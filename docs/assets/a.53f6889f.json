{"title":"Учимся программировать в Shell: манипуляции с переменными","summary":"Для написания скриптов логика которых сложнее чем просто вывод текста и вызов\nнескольких стандартных команд, необходимо знать основные управляющие\nконструкции и базовые манипуляции с переменными.\n","author":"sstotskyi","categories":["devops","important"],"createdAt":"2011-10-11T12:25:00.000Z","meta":{"keywords":["linux","Bash","переменные"]},"alias":"uchimsya-programmirovat-v-shell-manipulyatsii-s-peremennymi","content":"<p>Для написания скриптов логика которых сложнее чем просто вывод текста и вызов нескольких стандартных команд, необходимо знать основные управляющие конструкции и базовые манипуляции с переменными.</p>\n<h2 id=\"peremennye\"><a name=\"peremennye\" class=\"h-link\" href=\"#\"></a>Переменные</h2>\n<p>Переменные в Bash не типизированы, т.е. при создании переменной не нужно указывать какой тип данных она будет в себе содержать. Существует 3 основных типы переменных: строки, числа, массивы.</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ str=<span class=\"hljs-string\">'My First String'</span>\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$str</span>\nMy First String\nenej@linux:~$ num=5\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$num</span>\n5\nenej@linux:~$ arr=(my first array)\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${arr[@]}</span>\nmy first array\n</code></pre>\n<p>Обязательным является отсутствие пробелов перед и после знака равенства иначе получим ошибку</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ title = <span class=\"hljs-string\">'My First Var'</span>\ntitle: <span class=\"hljs-built_in\">command</span> not found\n</code></pre>\n<p>В большинстве случаев в Shell мы работаем с текстовыми данными, т.е. строками. По-этому нужно разобраться в базовых понятиях создания и манипулирования ими.</p>\n<p>Строку можно создать при помощи кавычек одинарных или двойных. Весь текст записанный в одинарных кавычках будет восприниматься интерпретатором, как обычный текст</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'\"$title\" is not a var it is just a text'</span>\n<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$title</span>\"</span> is not a var it is just a text\n</code></pre>\n<p>Но если записать то же самое в двойных кавычках, то</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"\\\"<span class=\"hljs-variable\">$title</span>\\\" is not a var it is just a text\"</span>\n<span class=\"hljs-string\">\"My First Var\"</span> is not a var it is just a text\n</code></pre>\n<p>увидим, что переменная <strong>$title</strong> интерполировалась в текст. Для того чтобы этого избежать используется экранирование с помощью символа обратной косой черты</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"\\\"\\$title\\\" is not a var it is just a text\"</span>\n<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$title</span>\"</span> is not a var it is just a text\n</code></pre>\n<h2 id=\"manipulyaczii-s-peremennymi\"><a name=\"manipulyaczii-s-peremennymi\" class=\"h-link\" href=\"#\"></a>Манипуляции с переменными</h2>\n<p>Рассмотрим базовые манипуляции с переменными</p>\n<ul>\n<li>\n<p>конкатенация строк</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ anotherVar=<span class=\"hljs-variable\">$title</span><span class=\"hljs-string\">' is a var'</span>\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$anotherVar</span>\nMy First Var is a var\n\n</code></pre>\n</li>\n<li>\n<p><strong>${str:-word}</strong> - использовать значение по умолчанию (если переменная равно <strong>null</strong> или пустой строке, то будет использоваться значение по умолчанию)</p>\n<pre><code class=\"hljs language-php\">enej@linux:~$ title=\nenej@linux:~$ <span class=\"hljs-keyword\">echo</span> ${title:-test}\ntest\nenej@linux:~$ title=<span class=\"hljs-string\">''</span>\nenej@linux:~$ <span class=\"hljs-keyword\">echo</span> ${title:-test}\ntest\n</code></pre>\n</li>\n<li>\n<p><strong>${str:=word}</strong> - установить значение по умолчанию (если переменная равно <strong>null</strong> или пустой строке, то ей будет присвоено значение по умолчанию)</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ title=<span class=\"hljs-string\">''</span>\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title:=test}</span>\n<span class=\"hljs-built_in\">test</span>\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$title</span>\n<span class=\"hljs-built_in\">test</span>\n</code></pre>\n</li>\n<li>\n<p><strong>${str:?word}</strong> - выход из команды и вывод сообщения об ошибке, если значение переменной равно <strong>null</strong> или пустой строке</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ title=<span class=\"hljs-string\">''</span>\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title:?'error message'}</span>\nbash: title: error message\n</code></pre>\n</li>\n<li>\n<p><strong>${str:+word}</strong> - альтернативное значение (если переменная не равна <strong>null</strong> и пустой строке, то ей будет использоваться альтернативное значение)</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ title=<span class=\"hljs-string\">''</span>\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title:+test}</span>\n\nenej@linux:~$ title=bla\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title:+test}</span>\n<span class=\"hljs-built_in\">test</span>\n</code></pre>\n</li>\n<li>\n<p><strong>${str:offset:length}</strong> - вырезать подстроку (если <strong>offset</strong> &lt; 0, то отсчет ведется начиная с конца строки, <strong>length</strong> может быть только больше нуля, необязательный параметр)</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ title=<span class=\"hljs-string\">\"My String\"</span>\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title:3}</span>\nString\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title:0-6:6}</span>\nString\n</code></pre>\n</li>\n<li>\n<p><strong>${!prefix*}, ${!prefix@}</strong> - ищет все переменные имя, которых начинается с указанного префикса и возвращает их имена</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ p_title=1\nenej@linux:~$ p_test=2\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${!p_*}</span>\np_test p_title\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${!p_@}</span>\np_test p_title\n</code></pre>\n</li>\n<li>\n<p><strong>${!arr[@]}, ${arr[@]}</strong> - первый возвращает все ключи массива, второй - все значения</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ arr=(my first array)\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${arr[@]}</span>\nmy first array\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${!arr[@]}</span>\n0 1 2\n</code></pre>\n</li>\n<li>\n<p><strong>${#parameter}</strong> - возвращает длину строки или последний индекс массива</p>\n<pre><code class=\"hljs language-php\">enej@linux:~$ arr=(my first <span class=\"hljs-keyword\">array</span>)\nenej@linux:~$ <span class=\"hljs-keyword\">echo</span> ${<span class=\"hljs-comment\">#arr}</span>\n<span class=\"hljs-number\">2</span>\nenej@linux:~$ title=<span class=\"hljs-string\">\"test\"</span>\nenej@linux:~$ <span class=\"hljs-keyword\">echo</span> ${<span class=\"hljs-comment\">#title}</span>\n<span class=\"hljs-number\">4</span>\n</code></pre>\n</li>\n<li>\n<p><strong>${parameter#word}, ${parameter##word}</strong> - если <strong>word</strong> совпадает с началом строки, то оно удаляется из строки, если <strong>parameter</strong> - это массив, то операция будет применена ко всем его элементам</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ title=<span class=\"hljs-string\">'test'</span>\nenej@linux:~$ arr=(amy afirst aarray);\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title#t}</span>\nest\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${arr[@]#a}</span>\nmy first array\n</code></pre>\n</li>\n<li>\n<p><strong>${parameter%word}, ${parameter%%word}</strong> - то же самое, что и предыдущее, только удаляет суффикс</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ title=<span class=\"hljs-string\">'test'</span>\nenej@linux:~$ arr=(mya first arraya);\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title%st}</span>\nte\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${arr[@]%a}</span>\nmy first array\n</code></pre>\n</li>\n<li>\n<p><strong>${parameter/pattern/string}</strong> - заменяет <strong>pattern</strong> на строку в <strong>parameter</strong>. Если <strong>pattern</strong> начинается с <strong>#</strong> - это значит, что искать нужно в начале строки, если с <strong>%</strong> - искать в конце строки, если с <strong>/</strong> - заменить все найденные вхождения <strong>pattern</strong> в строке на <strong>string</strong></p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ title=<span class=\"hljs-string\">'My test string for testing replacement feature'</span>\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title/test/}</span>\nMy string <span class=\"hljs-keyword\">for</span> testing replacement feature\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title//test/}</span>\nMy string <span class=\"hljs-keyword\">for</span> ing replacement feature\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title/#My/}</span>\n<span class=\"hljs-built_in\">test</span> string <span class=\"hljs-keyword\">for</span> testing replacement feature\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title/%My/}</span>\nMy <span class=\"hljs-built_in\">test</span> string <span class=\"hljs-keyword\">for</span> testing replacement feature\n</code></pre>\n</li>\n<li>\n<p><strong>${parameter^pattern}, ${parameter^^pattern}, ${parameter,pattern}, ${parameter,,pattern}</strong> - первые 2 делают найденный <strong>pattern</strong> - заглавными буквами, вторые две - прописными. <strong>,,</strong> и <strong>^^</strong> - заменяют регистр букв для всех найденных совпадений.</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ title=<span class=\"hljs-string\">'My test string for testing replacement feature'</span>\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title,M}</span>\nmy <span class=\"hljs-built_in\">test</span> string <span class=\"hljs-keyword\">for</span> testing replacement feature\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${title^^m}</span>\nMy <span class=\"hljs-built_in\">test</span> string <span class=\"hljs-keyword\">for</span> testing replaceMent feature\n</code></pre>\n</li>\n</ul>\n<p>Очень часто возникает задача сохранить результат работы команды в переменную для последующей обработки данных. Для этого есть 2 способа</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ title=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'some result'</span>)\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$title</span>\nsome result\nenej@linux:~$ title=`<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'some another result'</span>`\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$title</span>\nsome another result\n</code></pre>\n<p>С помощью &quot;<strong>$()</strong>&quot; или обратных кавычек, также можно интерполировать вывод команды в двойных кавычках</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"There is command output: <span class=\"hljs-variable\">$(echo 'some result')</span>\"</span>\nThere is <span class=\"hljs-built_in\">command</span> output: some result\n</code></pre>\n<p>Создавать переменные состоящие из нескольких строк можно при помощи одинарных кавычек или <strong>HERE DOC</strong> синтаксиса. С его помощью также можно передавать текст на стандартный ввод команды. Here Doc работает как двойные кавычки. Разница между &quot;<strong>&lt;&lt;</strong>&quot; и &quot;<strong>&lt;&lt;-</strong>&quot;, в том что последняя запись будет удалять из текста лидирующие табы, но не пробелы!</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ <span class=\"hljs-built_in\">read</span> -d <span class=\"hljs-string\">''</span> title &lt;&lt;-_EOF_\n<span class=\"hljs-built_in\">test</span>\nbig\ntext\n_EOF_\n\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$title</span>\n<span class=\"hljs-built_in\">test</span> big text\nenej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$title</span>\"</span>\n<span class=\"hljs-built_in\">test</span>\nbig\ntext\n</code></pre>\n<p>Видим один нюанс, если переменную взять в кавычки, то переводы строк сохранятся при использование команды <strong>echo</strong>, если нет, то вместо перевода строки используется пробел.</p>","headings":[["peremennye","Переменные"],["manipulyaczii-s-peremennymi","Манипуляции с переменными"]],"id":"uchimsya-programmirovat-v-shell-manipulyatsii-s-peremennymi"}