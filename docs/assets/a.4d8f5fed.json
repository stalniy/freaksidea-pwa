{"title":"Включаем HTTP кэширование в Nginx и Apache2","summary":"HTTP кэширование очень мощный инструмент, который я считаю недооценен. Если\nиспользовать правильно, то он может увеличить скорость загрузки последующих\nстраниц и освободит серверные ресурсы для более важных вещей, как например\nдоступность сайта еще для одной сотни пользователей.\n","author":"sstotskyi","categories":["linux","important"],"createdAt":"2017-05-10T08:00:00.000Z","meta":{"keywords":["оптимизация","web server","nginx","apache2","http cache"]},"alias":"vklyuchaem-http-keshirovanie-v-nginx-i-apache2","content":"<p>Скачивать одни и те же файлы каждый раз, когда браузер заходит на страничку, как минимум странно. Это увеличивает количество трафика, а также увеличивает загрузку страниц, что плохо отображается на нашем с Вами психологическом здоровье :) Именно для того, чтобы люди были счастливыми, а сервера занимались полезной работой и было придумано HTTP кэширование.</p>\n<p>Все браузеры поддерживают HTTP кэш. Все что нужно сделать - это правильно настроить сервер. Давайте же разберемся какие именно должны быть эти заголовки и как броузер ведет себя в разных ситуациях.</p>\n<h2 id=\"http-keshirovanie\"><a name=\"http-keshirovanie\" class=\"h-link\" href=\"#\"></a>HTTP Кэширование</h2>\n<p>Когда Вы заходите на любой сайт, броузер тут же отправляет запрос на сервер. Сервер же обычно возвращает в ответ HTML код, в котором могут быть ссылки на другие рисунки, CSS стили и JavaScript файлы.</p>\n<p>Рассмотрим небольшой пример запроса рисунка GET /image.jpg:</p>\n<p><img src=\"/media/assets/http-request.png\" alt=\"Запрос на сервер\" width=\"349\" height=\"253\">В ответ на запрос сервер возвращает заголовки и содержимое файла. Cache-Control заголовок указывает на сколько времени в секундах рисунок должен быть закэширован. Если на протяжении последующих 2 минут браузер будет заходить на эту же страницу, то вместо того чтобы запрашивать рисунок заново с сервера, он просто возьмет его из локальной файловой системы. И уже минус 1 запрос. А если таких рисунков 20?</p>\n<p>Что же происходит после окончания &quot;жизни&quot; файла? Как всегда браузер сначала проверяет кэш, срок действия последнего истек и он больше не может быть использован. Тогда шлется запрос на сервер и рисунок опять попадает в кэш.</p>\n<p>Все вроде нормально, но можно подумать и задать следующий вопрос: а что если по истечению времени жизни, файл не поменялся, зачем опять тратить время на его загрузку, если он уже у меня есть? Хороший вопрос! Именно для этого придуман заголовок ETag, который в общем-то является просто уникальным идентификатором ресурса. Если меняется ресурс (в нашем случае рисунок), то меняется и его ETag.</p>\n<p>Если веб-сервер настроен возвращать такой заголовок для файлов, то браузер его запоминает. После того, как кэш устарел браузер отправляет запрос с заголовком If-None-Match: x234dff, где x234dff - ETag нашего рисунка. Потом сервер проверяет, если ETag совпадает с тем, который есть у него, то он возвращает стандартный набор заголовков со статусом 304 Found (найден) и не отправляет содержимое самого файла в ответ! Другими словами, он говорит браузеру, что файл не поменялся и что нужно просто продолжить его жизнь в кэше.</p>\n<h2 id=\"optimizacziya-http-kesh\"><a name=\"optimizacziya-http-kesh\" class=\"h-link\" href=\"#\"></a>Оптимизация HTTP кэш</h2>\n<p>Все это работает хорошо, но если Ваш сайт посещают много клиентов, сервер будет тратить время на запросы по обновлению клиентского кэша. Так как это совсем не то, на что мы хотим тратить серверное время, то желательно было бы уменьшить количество таких запросов до 0. Все что нужно сделать - это обновлять имя файла каждый раз когда обновляется его контент. Т.е., по сути мы зашиваем значение ETag в имя файла и указываем срок кэширования на год или два.</p>\n<p>Это выглядит примерно так:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-string\">GET</span> <span class=\"hljs-string\">/styles.v1.css</span>\n\n<span class=\"hljs-attr\">Status:</span> <span class=\"hljs-number\">200</span> <span class=\"hljs-string\">OK</span>\n<span class=\"hljs-attr\">Cache-control:</span> <span class=\"hljs-number\">316887646</span>\n</code></pre>\n<p>На протяжении года браузер больше не будет запрашивать этот файл.</p>\n<p>Правильно настроив веб-сервер мы можем указать параметры кэширования для определенных запросов. Обычно рекомендуют кэшировать рисунки, таблицы стилей, JavaScript скрипты, шрифты, т.е. ресурсы, которые будут меняться достаточно редко.</p>\n<p>Понимая механизм работы, и зная что нужно оптимизировать давайте теперь настроим наш сервер правильно!</p>\n<h2 id=\"nastrojka-http-kesha-v-nginx\"><a name=\"nastrojka-http-kesha-v-nginx\" class=\"h-link\" href=\"#\"></a>Настройка HTTP кэша в Nginx</h2>\n<p>Кэш включается  при помощи директивы expires. expires max - задает время жизни на 10 лет, expires epoch - сбрасывает кэш, а expires off - просто убирает все заголовки относящиеся к кэшу. Например следующая конфигурация виртуального хоста указывает кэшировать все рисунки, css, js, xml, svg и файлы шрифтов на 30 дней. Более детально о <a href=\"http://nginx.org/ru/docs/http/ngx_http_headers_module.html#expires\" target=\"_blank\" rel=\"noopener nofollow\">директиве expires можно прочесть в документации Nginx</a>.</p>\n<pre><code class=\"hljs language-php\">server {\n  <span class=\"hljs-comment\"># .... other directives</span>\n\n  location ~* ^.+.(jpg|jpeg|gif|css|png|js|ico|xml|svg|ttf|eot|woff|woff2)$ {\n    expires <span class=\"hljs-number\">30</span>d;\n  }\n}\n</code></pre>\n<p>В Nginx также есть директива etag, которая включает или выключает добавление заголовка ETag. Ее прописывать не нужно, так как по умолчанию она включена. Больше информации о стандартных настройках можно найти в <a href=\"https://github.com/h5bp/server-configs-nginx\" target=\"_blank\" rel=\"noopener nofollow\">Github репозитории HTML5 boilerplate</a>.</p>\n<h2 id=\"nastrojka-http-kesha-v-apache\"><a name=\"nastrojka-http-kesha-v-apache\" class=\"h-link\" href=\"#\"></a>Настройка HTTP кэша в Apache</h2>\n<p>В Apache кэш включается при помощи модуля mod_expires и его директив: ExpiresActive, ExpiresDefault, ExpiresByType. Пример использования (можно вставить в .htaccess файл в корне проекта):</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IfModule</span> <span class=\"hljs-attr\">mod_expires.c</span>&gt;</span>\n    ExpiresActive on\n    ExpiresDefault                                      \"access plus 1 month\"\n\n    ExpiresByType text/css                              \"access plus 1 year\"\n    ExpiresByType text/html                             \"access plus 0 seconds\"\n    ExpiresByType application/javascript                \"access plus 1 year\"\n\n\n  # Media files\n    ExpiresByType image/gif                             \"access plus 1 month\"\n    ExpiresByType image/jpeg                            \"access plus 1 month\"\n    ExpiresByType image/png                             \"access plus 1 month\"\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IfModule</span>&gt;</span>\n</code></pre>\n<p>Таким образом можно закэшировать файлы, указать стандартное время жизни при помощи ExpiresDefault и потом переопределить значение для отдельных типов файлов. ETag, также как и в Nginx включен по умолчанию, и его можно настраивать при помощи директивы FileETag. Больше информации о стандартных настройках Apache можно найти в <a href=\"https://github.com/h5bp/server-configs-apache/\" target=\"_blank\" rel=\"noopener nofollow\">Github репозитории HTML5 boilerplate</a>.</p>\n<h2 id=\"zaklyuchenie\"><a name=\"zaklyuchenie\" class=\"h-link\" href=\"#\"></a>Заключение</h2>\n<p>Настройка веб сервера не занимает много времени, но может принести очень серьезные улучшения производительности Вашего веб сайта, что в свою очередь повлечет больший поток трафика с поисковых систем и соответственно, больше заказав, посещений и известности для Вас.</p>","headings":[["http-keshirovanie","HTTP Кэширование"],["optimizacziya-http-kesh","Оптимизация HTTP кэш"],["nastrojka-http-kesha-v-nginx","Настройка HTTP кэша в Nginx"],["nastrojka-http-kesha-v-apache","Настройка HTTP кэша в Apache"],["zaklyuchenie","Заключение"]],"id":"vklyuchaem-http-keshirovanie-v-nginx-i-apache2"}