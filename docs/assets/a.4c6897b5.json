{"title":"Учимся программировать в Shell: i/o переадресация. Часть 2","summary":"Зная об управляющих конструкциях стоит вновь вернутся к потоковой\nпереадресации. Циклы, как и почти все команды в Linux, умеют работать со\nстандартным вводом и выводом. Это позволяет читать файлы построчно или\nзаписывать в массив.\n","author":"sstotskyi","categories":["devops","important"],"createdAt":"2011-10-16T15:33:00.000Z","meta":{"keywords":["linux","input","output","Bash"]},"alias":"uchimsya-programmirovat-v-shell-i-o-pereadresatsiya-chast-2","content":"<p>Циклы, как и почти все команды в Linux, умеют работать со стандартным вводом и выводом. Это позволяет читать файлы построчно или записывать их в массивы. Но прежде стоит разобраться с командой <strong>read</strong></p>\n<h2 id=\"interaktivnye-skripty\"><a name=\"interaktivnye-skripty\" class=\"h-link\" href=\"#\"></a>Интерактивные скрипты</h2>\n<p>Для получения данных введенных пользователем с клавиатуры используется команда <strong>read</strong>. Она читает ввод с клавиатуры и присваивает его переменной. Например</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash\n</span>\n<span class=\"hljs-built_in\">echo</span> -n <span class=\"hljs-string\">\"Enter some text &gt; \"</span>\n<span class=\"hljs-built_in\">read</span> text\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"You entered: <span class=\"hljs-variable\">$text</span>\"</span>\n</code></pre>\n<p>Как видно в 3 строке кода вызывается <strong>echo</strong> с флагом &quot;<strong>-n</strong>&quot;, который указывает на то, что после вывода текста на экран не нужно перемещать курсор на следующую строку. Потом команда <strong>read</strong> останавливает выполнение скрипта и ждет ввода данных с клавиатуры. Пример скрипта в действии</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/tmp$ ./test.sh\nEnter some text &gt; bla\nYou entered: bla\n</code></pre>\n<p>Если не передать аргумент для <strong>read</strong>, то ввод будет присвоен переменной окружения <em>REPLY</em>. Эта команда также может принимать опции. Самые часто используемые - это &quot;<em>-t</em>&quot;, &quot;<em>-s</em>&quot; и &quot;<em>-d</em>&quot;. Опция <em>-t</em> позволяет указать <em>timeout</em> в секундах, после которого команда отдаст управление назад в скрипт. Например</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash\n</span>\n<span class=\"hljs-built_in\">echo</span> -n <span class=\"hljs-string\">\"Hurry up and type something! &gt; \"</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">read</span> -t 3 response; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Great, you made it in time!\"</span>\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Sorry, you are too slow!\"</span>\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<p>Флаг <em>-s</em> - скрывает ввод. Это нужно для получения каких-то конфиденциальных данных, например пароля. Опция <em>-d</em> - указывает символ при появлении которого чтение ввода нужно завершить, по умолчанию - это символ переноса строки.</p>\n<h2 id=\"praktikuemsya\"><a name=\"praktikuemsya\" class=\"h-link\" href=\"#\"></a>Практикуемся</h2>\n<p>Создавать строки, которые содержат символы переноса &quot;\\n&quot; мы умеем 2 способами, но они содержат некоторые недостатки</p>\n<ul>\n<li>одинарные кавычки (нет возможности интерполировать переменные)</li>\n<li>echo -e &quot;some string \\nnewline&quot; (можно интерполировать, но строка становится не читабельной)</li>\n</ul>\n<p>Благодаря команде <strong>read</strong> и <strong>HERE DOC</strong> синтаксису, который отправляет текст на стандартный ввод команды, можно реализовать третий способ</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash\n</span>\nname=<span class=\"hljs-string\">'Sergiy Stotskiy'</span>;\n\n<span class=\"hljs-built_in\">read</span> -d <span class=\"hljs-string\">''</span> text &lt;&lt;-_HERE_DOC\nHi <span class=\"hljs-variable\">${name}</span>.\n\nHow are you?\n_HERE_DOC\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$text</span>\"</span>;\n</code></pre>\n<p>То же самое можно сделать и при помощи конструкции <strong>$()</strong></p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\">#!/bin/bash</span>\n\nname=<span class=\"hljs-string\">'Sergiy Stotskiy'</span>;\n\ntext=$(cat &lt;&lt;-_HERE_DOC\nHi ${name}.\n\nHow are you?\n_HERE_DOC\n);\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"$text\"</span>;\n</code></pre>\n<p>Но по-моему так менее читабельно. Запустив этот скрипт получим</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/tmp$ ./test.sh\nHi Sergiy Stotskiy.\n\nHow are you?\n</code></pre>\n<p>Также команду <strong>read</strong> можно использовать вместе с циклами для чтения файла построчно. Напишем скрипт, который читает сам себя</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash\n</span>\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line;<span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$line</span>;\n<span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">$0</span>\n</code></pre>\n<p>Здесь на стандартный ввод циклу передается весь файл скрипта, потом команда <strong>read</strong> читает данные до момента появления символа переноса строки, т.е. одну строчку из файла.</p>\n<p>Результат работы цикла также можно перенаправить в файл</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash\n</span>\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line;<span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$line</span>;\n<span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">$0</span> &gt; /tmp/bla\n</code></pre>\n<p>В данном случае по сути написан простой скрипт для копирования файла. Запустите его и посмотрите что получится</p>","headings":[["interaktivnye-skripty","Интерактивные скрипты"],["praktikuemsya","Практикуемся"]],"id":"uchimsya-programmirovat-v-shell-i-o-pereadresatsiya-chast-2"}