{"title":"Учимся программировать в Shell: управляющие конструкции","summary":"Куда же во времена великих и могучих без управляющих конструкций. Почти ни\nодин язык не обходится без этого. Это относится и к Bash\n","author":"sstotskyi","categories":["linux","important"],"createdAt":"2011-10-13T22:50:00.000Z","meta":{"keywords":["Bash"]},"alias":"uchimsya-programmirovat-v-shell-upravlyayuschie-konstruktsii","content":"<p>Чтобы писать скрипты, которые состоят не просто из последовательного набора команд, но и те которые умеют &quot;думать&quot; и &quot;принимать решения&quot; основываясь на состоянии среды - необходимо знать управляющие конструкции. <strong>Bash</strong> предоставляет несколько команд, с помощью которых можно управлять логикой работы программы: if, exit, for, while, until, case, break, continue.</p>\n<h2 id=\"vetvlenie-if\"><a name=\"vetvlenie-if\" class=\"h-link\" href=\"#\"></a>Ветвление - if</h2>\n<p><strong>if</strong> - одна из самых простых команд, позволяет делать ветвление логики основываясь на условии. Эта команда имеет 3 формы</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># First form</span>\n\n<span class=\"hljs-keyword\">if</span> condition ; <span class=\"hljs-keyword\">then</span>\n    commands\n<span class=\"hljs-keyword\">fi</span>\n\n<span class=\"hljs-comment\"># Second form</span>\n\n<span class=\"hljs-keyword\">if</span> condition ; <span class=\"hljs-keyword\">then</span>\n    commands\n<span class=\"hljs-keyword\">else</span>\n    commands\n<span class=\"hljs-keyword\">fi</span>\n\n<span class=\"hljs-comment\"># Third form</span>\n\n<span class=\"hljs-keyword\">if</span> condition ; <span class=\"hljs-keyword\">then</span>\n    commands\n<span class=\"hljs-keyword\">elif</span> condition ; <span class=\"hljs-keyword\">then</span>\n    commands\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<p>В первом случае, если условие истинно, то выполняются команды внутри, если нет - ничего не происходит.</p>\n<p>Во втором случае, если условие истинно, то  выполнятся команды из первой части (между if и else), если нет - из второй (между else и fi).</p>\n<p>В третьем случае, если первое условие истинно, то выполняются команды из первой части, если нет, то проверяется второе условие если оно истинно, то выполняются команды из его части, если и это условие не истинно, то ничего не происходит.</p>\n<p>Что же такое <strong>condition</strong> в Bash? К большому удивлению здесь все наоборот, не так как в других языках программирования. Чтобы в этом разобраться для начала нужно рассмотреть другую базовою команду.</p>\n<h2 id=\"vyhod-exit\"><a name=\"vyhod-exit\" class=\"h-link\" href=\"#\"></a>Выход - exit</h2>\n<p>Правильно написанные <strong>Unix</strong> приложения всегда возвращают операционной системе статус завершения их работы (успешно или нет). Это делается при помощи <em>exit статуса</em>. <em>exit статус -</em> это целое число в пределах от 0 до 255. &quot;0&quot; - значит, что команда завершилась успешно; все другое означает, что произошла ошибка. Это позволяет обнаруживать возникновение ошибки в процессе выполнения скрипта и изменять в зависимости от этого его поведение.</p>\n<p>Очевидно, что обрабатывать ошибки не только является хорошим тоном, но и очень полезно! Например, перед тем как читать файл нужно проверить права на чтение и выдать пользователю понятную ошибку, в случае если их нет.</p>\n<p>По-этому, чтобы быть хорошими программистами, всегда нужно устанавливать <em>exit статус</em>. Для этого используется команда <strong>exit</strong>. Эта команда мгновенно останавливает выполнение скрипта и возвращает в качестве <em>exit статуса</em> переданный аргумент, например</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Fail</span>\n<span class=\"hljs-built_in\">exit</span> 1;\n\n<span class=\"hljs-comment\"># or Success</span>\n<span class=\"hljs-built_in\">exit</span> 0;\n</code></pre>\n<h2 id=\"prostye-true-false-usloviya-test\"><a name=\"prostye-true-false-usloviya-test\" class=\"h-link\" href=\"#\"></a>Простые true/false условия - test</h2>\n<p>Чаще всего команда <strong>test</strong> используется совместно с <strong>if</strong>, но это далеко не правило или ограничение. Эта команда работает просто, если <strong>expression</strong> = true, то команда возвращает <em>exit статус</em> 0, если равно false - возвращает 1. Команда имеет 2 формы записи</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># First form</span>\n\n<span class=\"hljs-built_in\">test</span> expression\n\n<span class=\"hljs-comment\"># Second form</span>\n\n[ expression ]\n</code></pre>\n<p>Если использовать ее в управляющих конструкциях, то второй вариант удобней, если же при выполнения цепочки команд, то понятней и удобней использовать первый. Например</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">if</span> [ -f <span class=\"hljs-string\">\"/path/to/some/file\"</span> ]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"File exists\"</span>\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"File does not exist\"</span>\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<p>Или же, если файла не существует, создать его</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">test</span> -f <span class=\"hljs-string\">\"/path/to/some/file\"</span> || touch <span class=\"hljs-string\">\"/path/to/some/file\"</span>;\n</code></pre>\n<p>Команда <strong>test</strong> имеет множество разных флагов. В примере выше <em>-f</em> означает проверку: является ли аргумент файлом. Если условие истинно, то <strong>test</strong> возвращает 0 и выполняется команда <strong>echo</strong>, которая сообщает что переданная строка - это файл , если нет - 1 и выполняется другая команда <strong>echo</strong>, после <strong>else</strong>. Вот список основных <strong>expression</strong>-ов для команды test</p>\n<ul>\n<li><em>-d file</em> - true, если file является каталогом</li>\n<li><em>-e file</em> - true, если file существует</li>\n<li><em>-f file</em> - true, если file является обычным файлом</li>\n<li><em>-L file</em> - true, если file является символьной ссылкой</li>\n<li><em>-r file</em> - true, если у Вас есть права на чтения файла file</li>\n<li><em>-w file</em> - true, если у Вас есть права на запись файла file</li>\n<li><em>-x file</em> - true, если у Вас есть права на выполнение файла file</li>\n<li><em>file1 -nt file2</em> - true, если file1 новее file2 (основываясь на дате модификации)</li>\n<li><em>file1 -ot file2</em> - true, если file1 старее file2</li>\n<li><em>-z string</em> - true, если строка пустая</li>\n<li><em>-n string</em> - true, если строка не пустая</li>\n<li><em>string1 = string2</em> - true, если строки равны</li>\n<li><em>string1 != string2</em> - true, если строки не равны</li>\n</ul>\n<p>Прежде чем идти дальше стоит рассмотреть еще несколько нюансов:</p>\n<ol>\n<li>\n<p>Пробелы после &quot;<strong>[</strong>&quot; и перед &quot;<strong>]</strong>&quot; обязательны, иначе получите ошибку</p>\n</li>\n<li>\n<p>&quot;<strong>;</strong>&quot; - является разделителем команд, например</p>\n<pre><code class=\"hljs language-bash\">clear; ls\n</code></pre>\n<p>очистит экран терминала и выполнит команду <strong>ls</strong></p>\n</li>\n</ol>\n<p>Вообще разделителем команд также является символ новой строки, по-этому команду if можно записать в другом виде</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\"># First form</span>\n<span class=\"hljs-keyword\">if</span> [ -f <span class=\"hljs-string\">\"/path/to/some/file\"</span> ]\nthen\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"File exists\"</span>\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"File does not exist\"</span>\nfi\n\n<span class=\"hljs-comment\"># Second form</span>\n<span class=\"hljs-keyword\">if</span> [ -f <span class=\"hljs-string\">\"/path/to/some/file\"</span> ]\nthen <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"File exists\"</span>\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"File does not exist\"</span>\nfi\n\n<span class=\"hljs-comment\"># Unreadable form</span>\n<span class=\"hljs-keyword\">if</span> [ -f <span class=\"hljs-string\">\"/path/to/some/file\"</span> ]; then <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"File exists\"</span>; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"File does not exist\"</span>; fi;\n</code></pre>\n<h2 id=\"praktikuemsya-proverka-na-superpolzovatelya\"><a name=\"praktikuemsya-proverka-na-superpolzovatelya\" class=\"h-link\" href=\"#\"></a>Практикуемся - проверка на суперпользователя</h2>\n<p>Что если скрипт, который Вы написали для своего выполнения нуждается в правах суперпользователя? Ведь если обычный пользователь запустит его, то он увидит кучу нечитабельных ошибок. Сразу оговорюсь, что использовать <strong>sudo</strong> внутри скрипта - плохая идея. По-этому нужно сделать проверку, является ли пользователь рутом.</p>\n<p>Команда <strong>id</strong> поможет нам в этом. Эта команда возвращает информацию о текущем пользователе, а если установить флаг <em>-u</em>, то вернет уникальный идентификатор пользователя. А в рут идентификатор равен 0. Тогда напишем скрипт основываясь на этом</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">if</span> [ $(id -u) != <span class=\"hljs-string\">\"0\"</span> ]; <span class=\"hljs-keyword\">then</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"You must be the superuser to run this script\"</span>\n    <span class=\"hljs-built_in\">exit</span> 1\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<p><strong>P.S.</strong>: продолжение следует! Кому не терпится - <strong>man bash</strong></p>","headings":[["vetvlenie-if","Ветвление - if"],["vyhod-exit","Выход - exit"],["prostye-true-false-usloviya-test","Простые true/false условия - test"],["praktikuemsya-proverka-na-superpolzovatelya","Практикуемся - проверка на суперпользователя"]],"id":"uchimsya-programmirovat-v-shell-upravlyayuschie-konstruktsii"}