{"title":"Учимся программировать в Shell: основные ошибки и методы устранения","summary":"Прежде чем продолжить изучение управляющих конструкций, рассмотрим основные\nошибки при написании скриптов и методы их устранения\n","author":"sstotskyi","categories":["linux","important"],"createdAt":"2011-10-15T12:26:00.000Z","meta":{"keywords":["linux","Bash"]},"alias":"uchimsya-programmirovat-v-shell-osnovnye-oshibki-i-metody-ustraneniya","content":"<p>Прежде чем продолжить изучение управляющих конструкций, рассмотрим основные ошибки при написании скриптов и методы их устранения. Для этого создадим тестовый скрипт <em>problem.sh</em></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash\n</span>\noption=5;\n\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$option</span> = <span class=\"hljs-string\">\"5\"</span> ]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Option = 5\"</span>;\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Option != 5\"</span>;\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<p>Если запустить этот код, то увидим, что Option равно 5, т.е. вроде все хорошо. Но немного изменив его, убедимся в обратном. Установим значение переменной <em>option</em> в <strong>null</strong> (3 строка)</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash\n</span>\noption=;\n\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$option</span> = <span class=\"hljs-string\">\"5\"</span> ]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Option = 5\"</span>;\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Option != 5\"</span>;\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<p>Запустив этот вариант скрипта - увидим</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/tmp$ /bin/bash problem.sh \nproblem.sh: line 5: [: =: unary operator expected\nOption != 5\n</code></pre>\n<p>С криками WTF лезем в исходник и долго смотрим на 5 строку кода, проверяем синтаксис команды <strong>if</strong> и все же не можем найти никакой ошибки. В чем же дело? Чтобы разобраться нужно взглянуть на скрипт глазами младенца <strong>Bash</strong>. Посмотрим на 5 строку.</p>\n<p>В первом ее варианте, когда <em>option</em> равнялась 5, он видел</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">if</span> [ 5 = <span class=\"hljs-string\">\"5\"</span> ]; <span class=\"hljs-keyword\">then</span>\n</code></pre>\n<p>А во втором</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">if</span> [ = <span class=\"hljs-string\">\"5\"</span> ];<span class=\"hljs-keyword\">then</span>\n</code></pre>\n<p>О! Теперь все ясно. Ведь конструкция в последнем варианте синтаксически невалидна. Как же быть? В одном из предыдущих топиков рассматривалась интерполяция переменных в двойных кавычках, давайте применим ее здесь, т.е. (меняем 5 строку)</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"$option\"</span> = <span class=\"hljs-string\">\"5\"</span> ]; then\n</code></pre>\n<p>Тогда <strong>Bash</strong> увидит следующее</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"\"</span> = <span class=\"hljs-string\">\"5\"</span> ]; <span class=\"hljs-keyword\">then</span>\n</code></pre>\n<p>Все правильно, все хорошо, скрипт выполняется и говорит, что <em>option</em> неравно 5.</p>\n<p>Еще одной проблемой является пропущенная кавычка. Например, уберите из строки 6 закрывающую кавычку и запустите скрипт</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/tmp$ /bin/bash problem.sh \nproblem.sh: line 8: unexpected EOF <span class=\"hljs-keyword\">while</span> looking <span class=\"hljs-keyword\">for</span> matching `<span class=\"hljs-string\">\"'\nproblem.sh: line 10: syntax error: unexpected end of file\n</span></code></pre>\n<p><strong>Bash</strong> говорит нам, что проблема в 8 строке, но взглянув на нее, ничего особенного не увидим. По-этому будьте внимательны и всегда используйте текстовый редактор с подсветкой кода, тогда такие ошибки зразу бросаются в глаза.</p>\n<h2 id=\"tehnika-poiska-oshibok\"><a name=\"tehnika-poiska-oshibok\" class=\"h-link\" href=\"#\"></a>Техника поиска ошибок</h2>\n<p>Иногда, очень сложно найти ошибку в коде, особенно если она логическая, а не синтаксическая. По-этому поделюсь некоторыми методами, которые использую сам</p>\n<ul>\n<li>\n<p>комментирование блоков кода. Суть метода состоит в комментировании нескольких строк кода и запустить скрипт вновь. Если проблема исчезла, значит она находится в закомментированном блоке, например, в случае с пропущенной кавычкой: если закомментировать блок else и запустим программу, то увидим, что ошибка не исчезла, значить проблема не в нем и тогда продолжаем комментировать дальше или что-то другое.</p>\n</li>\n<li>\n<p>вывод переменных. С помощью команды <strong>echo</strong>, выводим любые переменные из скрипта, чтобы посмотреть, является ли их значение ожидаем для нас.</p>\n</li>\n<li>\n<p>дебагинг. Вы наверно думаете, что я прекрасный <strong>Bash</strong> программист раз умею смотреть на код его глазами? Но здесь никакой магии. Вы можете смотреть тоже! При помощи опции <strong>-x</strong> можно установить debug режим интерпретатора, при котором на своем экране можно увидеть ход выполнения скрипта. Например, рассмотрим наш вариант неработающего скрипта, тот где <em>option</em> равно <strong>null</strong></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash\n</span>\noption=;\n\n<span class=\"hljs-comment\"># enable debug mode</span>\n<span class=\"hljs-built_in\">set</span> -x;\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$option</span> = <span class=\"hljs-string\">\"5\"</span> ]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Option = 5\"</span>;\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Option != 5\"</span>;\n<span class=\"hljs-keyword\">fi</span>\n\n<span class=\"hljs-comment\"># disable debug mode</span>\n<span class=\"hljs-built_in\">set</span> +x;\n</code></pre>\n<p>и вот что увидим запустив скрипт</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/tmp$ /bin/bash problem.sh \n+ <span class=\"hljs-string\">'['</span> = 1 <span class=\"hljs-string\">']'</span>\nproblem.sh: line 6: [: =: unary operator expected\n+ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'Option != 1'</span>\nOption != 1\n</code></pre>\n<p>т.е. именно то, что мы уже знаем.</p>\n</li>\n</ul>\n<p>По мотивам <a href=\"http://linuxcommand.org\" target=\"_blank\" rel=\"noopener nofollow\">http://linuxcommand.org</a></p>","headings":[["tehnika-poiska-oshibok","Техника поиска ошибок"]],"id":"uchimsya-programmirovat-v-shell-osnovnye-oshibki-i-metody-ustraneniya"}