{"title":"Ajax формы в Magento","summary":"как быть если нужно отправлять форму асинхронно? Нужно использовать AJAX\nскажут все. Да в точку, но не хочется каждый раз делать рутинную работу. По\nэтому представляю Вам FreaksForm - класс для отправки форм посредством AJAX в\nMagento\n","author":"sstotskyi","categories":["frontend","important"],"createdAt":"2011-10-01T13:55:00.000Z","meta":{"keywords":["ajax","magento","формы"]},"alias":"ajax-formy-v-magento","content":"<p>JavaScript формы очень удобны в Magento, так как предоставляют удобный интерфейс валидаторов. Но к сожалению они не умеют отправлять данные посредством ajax технологии. Вооружившись <a href=\"http://bonsaiden.github.com/JavaScript-Garden/ru/#object.prototype\" target=\"_blank\" rel=\"noopener nofollow\">знаниями по наследованию в JavaScript</a> было решено реализовать такую возможность в виде <strong>FreaksForm</strong> объекта. Поскольку команда Magento в качестве JavaScript фреймворка использует <a href=\"http://www.prototypejs.org/\" target=\"_blank\" rel=\"noopener nofollow\">Prototype</a>, то все изложения, понятия и термины будут идти относительно этой библиотеки.</p>\n<h2 id=\"zamysel-i-promysel\"><a name=\"zamysel-i-promysel\" class=\"h-link\" href=\"#\"></a>Замысел и Промысел</h2>\n<p>Для начала создадим новый класс и наследуемся от <strong>VarienForm</strong>, выглядит это так</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> FreaksForm = Class.create();\nFreaksForm.prototype = <span class=\"hljs-keyword\">new</span> VarienForm();\n</code></pre>\n<p>Переопределим конструктора, в нем добавим слушателя на событие отправки формы</p>\n<pre><code class=\"hljs language-javascript\">FreaksForm.prototype.initialize = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">superConstructor</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">formId, firstFieldFocus</span>) </span>{\n        superConstructor.call(<span class=\"hljs-keyword\">this</span>, formId, firstFieldFocus);\n        <span class=\"hljs-comment\">// if we have form element</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.form) {\n            <span class=\"hljs-keyword\">this</span>.responseBlock = <span class=\"hljs-literal\">null</span>;\n            <span class=\"hljs-keyword\">this</span>.loadingBlock  = $(<span class=\"hljs-keyword\">this</span>.form.id + <span class=\"hljs-string\">'-ajax'</span>);\n            <span class=\"hljs-keyword\">this</span>.form.observe(<span class=\"hljs-string\">'submit'</span>, <span class=\"hljs-keyword\">this</span>.submit.bindAsEventListener(<span class=\"hljs-keyword\">this</span>))\n        }\n    };\n})(VarienForm.prototype.initialize);\n</code></pre>\n<p>Свойство <strong>loadingBlock</strong> отвечает за блок ajax картинки, которая будет показываться во время отправки и получения данных. Поскольку в конструктор нужно передавать идентификатор формы, то было решено, что <strong>loadingBlock</strong> будет иметь точно такой же id как и форма, только из суффиксом <strong>-ajax</strong>.</p>\n<p>Свойство <strong>responseBlock</strong> отвечает за блок в который будет выводится сообщение, отправленное сервером в качестве результата завершения операции.</p>\n<p>Слушатель события отправки формы - простой метод, который проверяет все поля формы на корректность и вызывает метод оправки данных на сервер, если все окей. В качестве url для AJAX запроса берется атрибут формы action, метод которым будет отправлен запрос - атрибут method.</p>\n<p>Самое интересное в методе отвечающем за разбор полетов обработку ответа</p>\n<pre><code class=\"hljs language-javascript\">FreaksForm.prototype._processResult = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">transport</span>)</span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.loadingBlock) {\n        <span class=\"hljs-keyword\">this</span>.loadingBlock.hide();\n    }\n\n    <span class=\"hljs-keyword\">var</span> response = <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">try</span> {\n        response = transport.responseText.evalJSON();\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n        response = transport.responseText;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (response.error) {\n        <span class=\"hljs-keyword\">this</span>.setResponseMessage(<span class=\"hljs-string\">'error'</span>, response.error);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(response.success) {\n        <span class=\"hljs-keyword\">this</span>.setResponseMessage(<span class=\"hljs-string\">'success'</span>, response.success);\n        <span class=\"hljs-keyword\">if</span> (response.formVisibility == <span class=\"hljs-string\">'hide'</span>) {\n            <span class=\"hljs-keyword\">this</span>.form.hide();\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">var</span> url = response.redirect ? response.redirect : location.href;\n        location.href = url;\n    }\n};\n</code></pre>\n<p>Как видим по коду форма работает только с ответом в формате JSON. Если в ответе есть сообщение об ошибке или удаче, то показывает его и скрываем форму если это нужно. Если в ответе нет никаких нотайсов, то смело перегружаем страницу или отправляем пользователя на указаный url. Чем это хорошо? Тем, что, например, удобно авторизировать пользователя асинхронно и потом перенаправить его в личный кабинет.</p>\n<p>Скачать готовый файл можно <a href=\"/media/assets/freaks_form.js\" download=\"freaks_form.js\">здесь</a></p>\n<p><strong>P.S.</strong>: Думаю идею форм можно расширить, написанием возможности отправки файлов без лишних мыслей. Чем я и займусь в ближайшее время</p>","headings":[["zamysel-i-promysel","Замысел и Промысел"]],"id":"ajax-formy-v-magento"}