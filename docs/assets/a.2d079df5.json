{"title":"KnockOut - наблюдаем за всем и везде","summary":"О MVVM патерне, вокруг которого все крутится, уже упоминалось в предыдущей\nстатье. В соответствии патерну, на котором построен фреймворк, Капитан\nОчевидность КО состоит из 3 основных частей: наблюдаемые свойства и\nзависимости, декларативные привязки (байндинги) и шаблоны (темплейтинг). В\nэтот раз поговорим о наблюдаемых свойствах\n","author":"sstotskyi","categories":["frontend","important"],"createdAt":"2012-04-05T16:42:00.000Z","meta":{"keywords":["javascript","knockout","MVVM"]},"alias":"knockout---nablyudaem-za-vsem-i-vezde","content":"<p>О <a href=\"http://ru.wikipedia.org/wiki/Model-View-ViewModel\" target=\"_blank\" rel=\"noopener nofollow\">MVVM</a> патерне, вокруг которого все крутится, уже упоминалось <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;javascript/show-65-vvedenie-v-knockout-novyi-vzghliad-na-postroenie-javascript-prilozhenii&quot;}\">в предыдущей статье</app-link>. В соответствии патерну, на котором построен фреймворк, Капитан Очевидность КО состоит из 3 основных частей:</p>\n<ul>\n<li>наблюдаемые свойства и зависимости;</li>\n<li>декларативные привязки (байндинги);</li>\n<li>шаблоны (темплейтинг).</li>\n</ul>\n<h2 id=\"otobrazhenie-view-model\"><a name=\"otobrazhenie-view-model\" class=\"h-link\" href=\"#\"></a>Отображение View Model</h2>\n<p>В качестве <em>ViewModel</em> может быть любой <em>JavaScript</em> объект со свойствами и методами, например</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> PersonViewModel = {\n    <span class=\"hljs-attr\">personName</span>: <span class=\"hljs-string\">'Серега'</span>,\n    <span class=\"hljs-attr\">personAge</span>:  <span class=\"hljs-number\">22</span>\n};\n</code></pre>\n<p>Для создания самого простого отображения этой модели достаточно прописать байндинг для любого <em>DOM</em> элемента, например:</p>\n<pre><code class=\"hljs language-html\">Меня зовут <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: personName\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> и мне <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: personAge\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> года\n</code></pre>\n<p>Чтобы заставить все это работать достаточно написать (ko - глобальный объект)</p>\n<pre><code class=\"hljs language-javascript\">ko.applyBindings(PersonViewModel);\n</code></pre>\n<p>В этом случае наш Капитан пройдет по всем элементам <em>DOM</em>, в которых есть атрибут <strong>data-bind</strong> и выполнит все привязки. Этот атрибут нестандартный для HTML (HTML5 не в счет, он еще не утвержден как стандарт), но это не мешает броузеру работать в нормальном лихорадочном режиме.</p>\n<p>Вызов этого скрипта можно поместить в самый низ страницы или же добавить как слушателя на событие <strong>DOMContentLoaded,</strong> с чем отлично может справится <em>jQuery.</em> Результатом выполнения будет</p>\n<pre><code class=\"hljs language-html\">Меня зовут <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: personName\"</span>&gt;</span>Серега<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> и мне <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: personAge\"</span>&gt;</span>22<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> года\n</code></pre>\n<p>Метод <strong>applyBindings</strong> принимает 2 параметра:</p>\n<ul>\n<li>обязательный, <em>View Model</em>;</li>\n<li>необязательный, можно передать <em>DOM</em> элемент, в котором нужно активировать байндинги. Это достаточно удобно когда есть несколько <em>View</em> моделей, так как позволяет ассоциировать каждую из них со своим блоком на странице.</li>\n</ul>\n<p>Достаточно просто, не так ли?</p>\n<h2 id=\"nablyudaemye-svojstva\"><a name=\"nablyudaemye-svojstva\" class=\"h-link\" href=\"#\"></a>Наблюдаемые свойства</h2>\n<p>Мы уже научились создавать базовую <em>View</em> модель и отображать ее на странице используя байндинги. Но основная изюминка КО - это автоматическое обновление <em>UI</em>, когда происходят определенные изменения в модели. Каким образом Капитан узнает о таких изменениях? Все очевидно! Нужно просто объявить свойства модели как наблюдаемые при помощи метода <strong>observable</strong>, тогда они становятся объектами, которые умеют сообщать всем подписчикам, что в них произошли изменения. Этот метод принимает единственный необязательный параметр - инициализируемое значение для свойства, если не указать, то будет браться значение из элемента к которому привязано данное свойство.</p>\n<p><strong><code>var PersonViewModel = {     personName: ko.observable('Серега'),     personAge:  ko.observable(22) };</code></strong></p>\n<p><em>HTML</em> код изменять не нужно. Все будет работать как прежде за исключением того, что при изменении свойства модели, <em>view</em> автоматически обновится.</p>\n<p>Поскольку не все броузеры (да-да речь идет именно о <em>IE</em>) поддерживают геттеры/сеттеры в JavaScript, то было решено создать методы-врапперы и устанавливать или получать значения свойств при их помощи. Относительно конкретной модели:</p>\n<ul>\n<li>прочитать значение можно при помощи обращения к свойству как к методу PersonViewModel.personName() или PersonViewModel.personAge();</li>\n<li>записывается значение аналогично как и читается, только нужно передать параметр в метод PersonViewModel.personAge(23) - поменяет значение свойства на 23;</li>\n<li>при вызове наблюдаемых свойств-методов можно пользоваться цепочкой вызовов PersonViewModel.personAge(23).personName()</li>\n</ul>\n<p>То есть, когда КО найдет элемент с атрибутом data-bind=&quot;text: personName&quot; он подпишет этот элемент на изменения свойства personName и наоборот, при изменении значения текста в DOM элементе об этом будет уведомлено свойство <em>View</em> модели.</p>\n<p>Подписаться на изменения свойства также можно вручную при помощи метода <strong>subsribe</strong></p>\n<p><strong><code>PersonViewModel.personName.subscribe(function(newValue) {     alert(&quot;Имя человека изменилось на &quot; + newValue); });</code></strong></p>\n<p>Но в большинстве случаев этого делать не придется, потому что встроенных байндингов достаточно для манипуляции подписками.</p>\n<p><strong>По материалам:</strong> <a href=\"http://knockoutjs.com/documentation/observables.html\" target=\"_blank\" rel=\"noopener nofollow\">KnockOut</a></p>","headings":[["otobrazhenie-view-model","Отображение View Model"],["nablyudaemye-svojstva","Наблюдаемые свойства"]],"id":"knockout-nablyudaem-za-vsem-i-vezde"}