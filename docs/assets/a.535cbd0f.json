{"title":"Magento конфигурация от А до Я: layout-updates","summary":"Думаю почти все начинают свое знакомство с Magento с редактирования\nстандартной темы, добавления новых блоков или изменения старых. Это часть View\nиз тройки букаф MVC и она достаточно сложная для новичков, по-этому предлагаю\nразобраться что это за файлы xml в директории layout.\n","author":"sstotskyi","categories":["backend","important"],"createdAt":"2011-10-25T16:01:00.000Z","meta":{"keywords":["magento","XML","конфигурация"]},"alias":"magento-konfiguratsiya-ot-a-do-ya-layout-updates","content":"<p>Думаю почти все начинают свое знакомство с <em>Magento</em> с редактирования стандартной темы, добавления новых блоков или изменения старых. Это часть <strong>View</strong> из тройки букаф <strong>MVC</strong> и она достаточно сложная для новичков, по-этому предлагаю разобраться что это за файлы xml в директории <em>layout</em>.</p>\n<h2 id=\"stranicza-kirpichik-k-kirpichiku\"><a name=\"stranicza-kirpichik-k-kirpichiku\" class=\"h-link\" href=\"#\"></a>Страница - кирпичик к кирпичику</h2>\n<p>В Magento страницы строятся посредством блоков с использованием шаблонов, которые имеют расширение <em>*.phtml</em>. Любой <em>phtml</em> файл является валидным html кодом. Конечный результат создается путем декорации, т.е. вставки одного блока в другой. Хороший рисунок для понимания сути был найден в гайде по <em>Symfony1.4</em></p>\n<p><img src=\"/media/assets/layout-decoration.png\" alt=\"Magento view\" title=\"Magento view\" width=\"433\" height=\"103\">Здесь все работает точно также. В поставке стандартной темы есть 4 layout-a: 1 колонка, 2 колонки с leftbar, 2 колонки с rightbar, 3 колонки.</p>\n<p>Почти каждый модуль имеет layout-update - xml файл, который вносит дополнительный функционал в часть <strong>View</strong>. Конфигурационные файлы layout-ов имеют несколько основных директив: handle, reference, block, action, remove. Рассмотрим каждый из них по отдельности.</p>\n<h2 id=\"handle\"><a name=\"handle\" class=\"h-link\" href=\"#\"></a>Handle</h2>\n<p>Дословно можно сказать, что это крючок, на который можно повесить несколько блоков. Но я себе это представляю, как событие, на которое вешается блок и при его (события) появлении блок будет обработан и выведен пользователю. <em>Handle</em>-ы генерируются контроллером. Отрыв класс <em>Mage_Core_Controller_Varien_Action</em> увидим, что на любой экшен генерируется 4 стандартных handle-а: <em>default</em> (в методе <strong>loadLayout</strong>) и еще 3, один из которых отвечает за выбранную тему, второй за текущий модуль, контроллер и экшен и третий за текущий store (в методе <strong>addActionLayoutHandles</strong>)</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\">// load store handle</span>\n$update-&gt;addHandle(<span class=\"hljs-string\">'STORE_'</span>.Mage::app()-&gt;getStore()-&gt;getCode());\n\n<span class=\"hljs-comment\">// load theme handle</span>\n$package = Mage::getSingleton(<span class=\"hljs-string\">'core/design_package'</span>);\n$update-&gt;addHandle(\n    <span class=\"hljs-string\">'THEME_'</span>.$package-&gt;getArea().<span class=\"hljs-string\">'_'</span>.$package-&gt;getPackageName().<span class=\"hljs-string\">'_'</span>.$package-&gt;getTheme(<span class=\"hljs-string\">'layout'</span>)\n);\n\n<span class=\"hljs-comment\">// load action handle</span>\n$update-&gt;addHandle(strtolower(<span class=\"hljs-keyword\">$this</span>-&gt;getFullActionName()));\n</code></pre>\n<p>Например, если у нас 1 store (магазин), стандартная тема и мы на странице просмотра списка продуктов в категории, то сгенерируется: <em>default</em>, <em>STORE_default</em>, <em>THEME_frontend_default_default</em> и <em>catalog_category_view</em>.</p>\n<p>Также посмотрев более детально на методы <strong>loadLayout</strong> и <strong>renderLayout</strong> можно догадаться, что <strong>handle-ы</strong> можно генерировать динамически в зависимости от определенных условий, как делается в <em>Mage_Catalog_CategoryController</em></p>\n<pre><code class=\"hljs language-php\">$update = <span class=\"hljs-keyword\">$this</span>-&gt;getLayout()-&gt;getUpdate();\n$update-&gt;addHandle(<span class=\"hljs-string\">'default'</span>);\n\n<span class=\"hljs-keyword\">if</span> (!$category-&gt;hasChildren()) {\n    $update-&gt;addHandle(<span class=\"hljs-string\">'catalog_category_layered_nochildren'</span>);\n}\n\n<span class=\"hljs-keyword\">$this</span>-&gt;addActionLayoutHandles();\n$update-&gt;addHandle($category-&gt;getLayoutUpdateHandle());\n$update-&gt;addHandle(<span class=\"hljs-string\">'CATEGORY_'</span> . $category-&gt;getId());\n<span class=\"hljs-keyword\">$this</span>-&gt;loadLayoutUpdates();\n\n<span class=\"hljs-comment\">// apply custom layout update once layout is loaded</span>\n<span class=\"hljs-keyword\">if</span> ($layoutUpdates = $settings-&gt;getLayoutUpdates()) {\n    <span class=\"hljs-keyword\">if</span> (is_array($layoutUpdates)) {\n        <span class=\"hljs-keyword\">foreach</span>($layoutUpdates <span class=\"hljs-keyword\">as</span> $layoutUpdate) {\n            $update-&gt;addUpdate($layoutUpdate);\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">$this</span>-&gt;generateLayoutXml()-&gt;generateLayoutBlocks();\n</code></pre>\n<p>Основное описание всех страниц находится в <em>page.xml</em>. Если открыть его, то увидим наши <em>handle</em>-ы (<em>default</em>, <em>print</em>, <em>page_empty</em>, <em>page_one_column</em>, etc)</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">\"0.1.0\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Default layout, loads most of the pages --&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">default</span> <span class=\"hljs-attr\">translate</span>=<span class=\"hljs-string\">\"label\"</span> <span class=\"hljs-attr\">module</span>=<span class=\"hljs-string\">\"page\"</span>&gt;</span>\n        // default block structure\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">default</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">print</span> <span class=\"hljs-attr\">translate</span>=<span class=\"hljs-string\">\"label\"</span> <span class=\"hljs-attr\">module</span>=<span class=\"hljs-string\">\"page\"</span>&gt;</span>\n        // block structure\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">print</span>&gt;</span>\n\n     <span class=\"hljs-comment\">&lt;!-- Custom page layout handles --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">page_empty</span> <span class=\"hljs-attr\">translate</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>All Empty Layout Pages<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">reference</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"root\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"setTemplate\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>page/empty.phtml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!-- Mark root page block that template is applied --&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"setIsHandle\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">applied</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">applied</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">reference</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">page_empty</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">page_one_column</span> <span class=\"hljs-attr\">translate</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>All One-Column Layout Pages<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">reference</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"root\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"setTemplate\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>page/1column.phtml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n            <span class=\"hljs-comment\">&lt;!-- Mark root page block that template is applied --&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"setIsHandle\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">applied</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">applied</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">reference</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">page_one_column</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- another hanbles --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n</code></pre>\n<h2 id=\"reference\"><a name=\"reference\" class=\"h-link\" href=\"#\"></a>Reference</h2>\n<p>С помощью данной директивы можно обратится к блоку и вызвать у него определенные экшены или добавить дочерние блоки, как например в примере выше, <em>handle</em> = <em>page_one_column</em>. Мы обращаемся к самому верхнему по структуре блоку <strong>root</strong> и устанавливаем ему другой шаблон для отображения.</p>\n<p>Эта директива имеет атрибут <strong>name</strong>, в котором указываем имя блока, к которому хотим обратится. Почти все блоки имеют свое уникальное имя. При написании своих <em>layout-update</em>-ов давайте имена всем блокам, которые в будущем нужно будет изменять.</p>\n<h2 id=\"block\"><a name=\"block\" class=\"h-link\" href=\"#\"></a>Block</h2>\n<p>Блок - сердце всей структуры. Имеет несколько атрибутов:</p>\n<ul>\n<li><em>type</em> - Magento путь, указывающий на класс блока. Например, &quot;<em>cms/block</em>&quot; указывает на класс <em>Mage_Cms_Block_Block</em>, который находится в <em>app/code/core/Mage/Cms/Block/Block.php.</em> Если Вы не нуждаетесь в специфической логики обработки блока, а просто хотите вывести какой-то шаблон, то используйте &quot;<em>core/template</em>&quot;</li>\n<li><em>name</em> - уникальное имя блока, нужно для того чтобы потом можно было обращаться к ему посредством директивы <em>reference</em></li>\n<li><em>as</em> - псевдоним для имени блока, нужно если хотим обратится к блоку из кода, при помощи методов родительского блока <em>getChild</em> или <em>getChildHtml</em>.</li>\n<li><em>ifconfig</em> - конфигурационный путь, блок будет показан только, если значение настройки равно <em>true</em></li>\n<li><em>after</em> - указывает имя блока после которого нужно вывести данный</li>\n<li><em>before</em> - указывает имя блока перед которым нужно вывести данный. Если указать знак минуса (&quot;-&quot;), то блок будет выведен самым первым из всех в своем родителе</li>\n<li><em>template</em> - указывает шаблон для блока</li>\n<li><em>translate</em> - указывает теги(ноды, узлы), содержимое которых нужно перевести. Теги прописываются через пробел</li>\n</ul>\n<p>Например, выведем на главной список всех новинок</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cms_index_index</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">reference</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"content\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"catalog/product_new\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"products.new\"</span> <span class=\"hljs-attr\">before</span>=<span class=\"hljs-string\">\"-\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">reference</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">cms_index_index</span>&gt;</span>\n</code></pre>\n<p>Существует несколько стандартных имен блоков: <em>root</em>, <em>left</em>, <em>right</em>, <em>content</em>.</p>\n<h2 id=\"action\"><a name=\"action\" class=\"h-link\" href=\"#\"></a>Action</h2>\n<p>С помощью этой директивы можно вызывать методы блока, после его инициализации. Имеет атрибут <strong>method</strong>, в котором указывается имя метода. Аргументы перечисляются в тегах, имена тегов никак не используются. В метод аргументы передаются в такой очередности, в которой они были прописаны в xml файле, например установим другой шаблон руту</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">reference</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"root\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"setTemplate\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>page/1column.phtml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Mark root page block that template is applied --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"setIsHandle\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">applied</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">applied</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">reference</span>&gt;</span>\n</code></pre>\n<h2 id=\"remove\"><a name=\"remove\" class=\"h-link\" href=\"#\"></a>Remove</h2>\n<p>С помощью этой директивы можно удалять блоки. Имеет один атрибут <strong>name</strong> - имя блока, который нужно удалить. Например, удалим назойливые баннеры из стандартной темы</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">default</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">remove</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"right.permanent.callout\"</span> /&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">remove</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"left.permanent.callout\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">default</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n</code></pre>\n<h2 id=\"stavim-tochki-nad-i\"><a name=\"stavim-tochki-nad-i\" class=\"h-link\" href=\"#\"></a>Ставим точки над і</h2>\n<p>Так как <strong>handle</strong> - это крючок (событие), значит он самый главный в иерархии. Все остальное должно обязательно находится внутри его! В нем (handle-е) может находится: block, remove, reference. <strong>Reference</strong> - это просто ссылка на блок, т.е. способ обновить содержимое блока. Объясню на примере блока с именем <strong>content</strong>. Если открыть файл <em>page.xml</em>, то там в <strong>default handle</strong>, можно найти такое</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">default</span> <span class=\"hljs-attr\">translate</span>=<span class=\"hljs-string\">\"label\"</span> <span class=\"hljs-attr\">module</span>=<span class=\"hljs-string\">\"page\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>All Pages<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"page/html\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"root\"</span> <span class=\"hljs-attr\">output</span>=<span class=\"hljs-string\">\"toHtml\"</span> <span class=\"hljs-attr\">template</span>=<span class=\"hljs-string\">\"page/3columns.phtml\"</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"page/html_head\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"head\"</span> <span class=\"hljs-attr\">as</span>=<span class=\"hljs-string\">\"head\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"page/html_header\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"header\"</span> <span class=\"hljs-attr\">as</span>=<span class=\"hljs-string\">\"header\"</span>&gt;</span>\n            // header block children\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span>\n\n        // some blocks\n        \n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"core/text_list\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"content\"</span> <span class=\"hljs-attr\">as</span>=<span class=\"hljs-string\">\"content\"</span> <span class=\"hljs-attr\">translate</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>Main Content Area<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span>\n        \n        // another blocks\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">default</span>&gt;</span>\n</code></pre>\n<p>Что же делать, если нужно добавить дочерний блок в контент, но не исправляя файл <em>page.xml</em>? Нужно использовать <strong>reference</strong>!</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">default</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">reference</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"content\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"core/template\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"test.block\"</span> <span class=\"hljs-attr\">template</span>=<span class=\"hljs-string\">\"test/some_text.phtml\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">reference</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">default</span>&gt;</span>\n</code></pre>\n<p>Все что находится внутри <em>reference</em> можно считать, что оно находится внутри блока с заданным именем.</p>\n<p><strong>Block</strong> может находится внутри другого блока или <em>reference</em>-а (тогда он является дочерним блок и доступ к нему из родительского можно получить через метод <strong>getChild</strong>, первый параметр которого - элиас блока, т.е. содержимое атрибута <strong>as</strong>, по-этому если Вы планируете обратится к блоку из кода прописывайте ему элиас), также он может находится внутри <strong>handle</strong> (так как блок с именем <strong>root</strong>, смотреть <em>page.xml</em>).</p>\n<p><strong>Action</strong> может находится только в <em>reference</em> или <em>block</em>, так как эта директива означает вызов метода из класса блока. Например, блок <strong>head</strong> имеет методы <em>addJs</em>, <em>addCss</em>, <em>addItem</em> с помощью которых можно добавить на страницу файлы <em>javascript</em> (из директории js обычно) и <em>css</em> (из директории текущего скина).</p>\n<p>Метод <em>addItem</em> универсальный, с его помощью можно добавить <em>javascript</em> (как из корневого каталога, так и с каталога скина) и <em>css</em>, а также задавать параметры для <a href=\"http://en.wikipedia.org/wiki/Conditional_comment\" target=\"_blank\" rel=\"noopener nofollow\"><em>conditional comments</em></a> в IE</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">default</span> <span class=\"hljs-attr\">translate</span>=<span class=\"hljs-string\">\"label\"</span> <span class=\"hljs-attr\">module</span>=<span class=\"hljs-string\">\"page\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>All Pages<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"page/html\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"root\"</span> <span class=\"hljs-attr\">output</span>=<span class=\"hljs-string\">\"toHtml\"</span> <span class=\"hljs-attr\">template</span>=<span class=\"hljs-string\">\"page/3columns.phtml\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"page/html_head\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"head\"</span> <span class=\"hljs-attr\">as</span>=<span class=\"hljs-string\">\"head\"</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"addJs\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>prototype/prototype.js<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n            // add another files\n            \n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"addCss\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">stylesheet</span>&gt;</span>css/styles.css<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">stylesheet</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"addItem\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>skin_css<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>css/styles-ie.css<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">params</span>/&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span>&gt;</span>lt IE 8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"addItem\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>js<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>lib/ds-sleight.js<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">params</span>/&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span>&gt;</span>lt IE 7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"addItem\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>skin_js<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>js/ie6.js<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">params</span>/&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">if</span>&gt;</span>lt IE 7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">if</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">action</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">default</span>&gt;</span>\n</code></pre>\n<p><strong>P.S.</strong>: вот и все. Надеюсь материал сильно поможет начинающим, по-скольку все это я сам проходил набивая собственные шишки. Планирую написать серию статей о конфигурационных файлах в <em>Magento</em>. Ждите продолжения</p>\n<p><strong>UPD:</strong> забыл упомянуть о теге <strong>update</strong>. Имеет один атрибут <strong>handle</strong>, да-да это имя именно той самой директивы, о которой говорилось выше. Директива может находится только внутри другого <em>handle</em>-а, переносит все блоки из указанного <em>handle</em>-а в тот, в котором она прописана, например</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">customer_account_edit</span> <span class=\"hljs-attr\">translate</span>=<span class=\"hljs-string\">\"label\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>Customer Account Edit Form<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">update</span> <span class=\"hljs-attr\">handle</span>=<span class=\"hljs-string\">\"customer_account\"</span>/&gt;</span>\n\n    // another directives\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">customer_account_edit</span>&gt;</span>\n</code></pre>\n<p>Все директивы из <em>customer_account</em> будут использованы и в <em>customer_account_edit handle</em>-е. Применяется для того, чтобы избежать дублирования одинаковых директив.</p>","headings":[["stranicza-kirpichik-k-kirpichiku","Страница - кирпичик к кирпичику"],["handle","Handle"],["reference","Reference"],["block","Block"],["action","Action"],["remove","Remove"],["stavim-tochki-nad-i","Ставим точки над і"]],"id":"magento-konfighuratsiia-ot-a-do-ia-layout-updates"}