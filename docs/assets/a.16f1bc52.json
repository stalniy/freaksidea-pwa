{"title":"Борьба со спамом при помощи canvas","summary":"Вчера, на одном из старых сайтов я увидел номера телефонов в виде рисунков, и\nподумал - какая глупость! Но потом нашел оправдание человеку :) Скорее всего\nон не имел достаточно навыков, чтобы сделать это \"правильно\".  Но позже до\nменя дошло на сколько это на самом деле гениально!\n","author":"sstotskyi","categories":["frontend","important"],"createdAt":"2017-05-05T14:31:00.000Z","meta":{"keywords":["javascript","spam","canvas"]},"alias":"borba-so-spamom-pri-pomoschi-canvas","content":"<p>Давненько я не писал статей на своем блоге :) Много изучал, пробовал, полностью перебрался в Frontend разработку... Ну да ладно, сейчас не об этом.</p>\n<p>История началось с того, что мой хороший друг попросил сделать ему интернет магазин. Отказать другу тяжело, вот я и решил тряхнуть стариной :) Как и любой другой сайт, этот имел несколько форм взаимодействия с пользователем. Во-первых, там есть формы запроса прайс-листов, форма перезвонить, отзывы и все остальное, что в данном контексте я могу просто назвать &quot;формы&quot;. Во-вторых, номера телефонов и E-mail адресса. Соответственно все это нужно защитить от спамеров, поскольку те ребята и в формы всякого напишут и номера стырят и потом будут СМС-ки слать, что не очень приятно.</p>\n<p>Если с формами все понятно - просто поставить капчу (я использовал Google Recaptcha для Magento), то с номерами телефонов и email совсем другое дело. Ведь нельзя просить пользователя заполнить капчу перед тем как увидеть контактную информацию, это плохо для продаж. Что же делать? Клиент должен видеть контакты, а спам-боты - нет.</p>\n<h2 id=\"client-side-protection\"><a name=\"client-side-protection\" class=\"h-link\" href=\"#\"></a>Client side protection</h2>\n<p>Существует несколько разных способов защиты, например, отображать email и телефоны через html entities (такие слова, которые начинаются с &quot;&amp;&quot; и заканчиваются &quot;;&quot;, например 0 - число 1). Как вариант защиты - неплохо, точно защитит от тупых ботов, но насколько сложно это обойти? Очень просто, т.е. автору бота достаточно использовать что-то на подобии html_entity_decode в PHP. Так что защита так себе.</p>\n<p>Тогда я нашел другой, очень интересный способ защиты - при помощи CSS. Суть его заключается в том, что сервер выводит телефон/email задом наперед, а браузер через CSS делает тоже самое и для конечного пользователя все отображается правильно, но роботу найти контакты уже намного тяжелее. Более технически это выглядит вот так:</p>\n<pre><code class=\"hljs language-php\">&lt;!-- HTML --&gt;\n&lt;span <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">reverse</span>\"&gt;&lt;?<span class=\"hljs-title\">php</span> <span class=\"hljs-title\">echo</span> <span class=\"hljs-title\">strrev</span>($<span class=\"hljs-title\">email</span>) ?&gt;&lt;/<span class=\"hljs-title\">span</span>&gt;\n</span></code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* CSS */</span>\n<span class=\"hljs-selector-class\">.reverse</span> {\n  <span class=\"hljs-attribute\">direction</span>: rtl;\n  <span class=\"hljs-attribute\">unicode-bidi</span>: bidi-override;\n}\n</code></pre>\n<p>Вариант прост и хорош, но я подумал что даже с этим &quot;умный&quot; робот сможет справится, если постарается.</p>\n<p>Тогда я и вспомнил инцидент со старым интернет магазином, в котором номера телефонов были отображены картинкой. На этот раз мои мысли все дружно кричали &quot;гениально!&quot;. Ведь кто будет распознавать рисунок для того, чтобы получить номер? Понятно что можно это делать, понятно что есть методы и новое крутое словосочетание &quot;machine learning&quot;, но это ведь колоссальные затраты ресурсов. Так что этот способ показался самым &quot;правильным&quot;, так как отсеивает большинство ботов ...ну и еще потому что я хотел сделать что-то интересное при помощи canvas :)</p>\n<h2 id=\"reshenie\"><a name=\"reshenie\" class=\"h-link\" href=\"#\"></a>Решение</h2>\n<p>Основная идея заключалась в том, чтобы в местах где нужно отображать телефон или email, я буду вставлять canvas элемент и потом по завершению загрузки страницы, скрипт будет писать контактную информацию через canvas метод fillText. Все вроде бы просто, но в скрипт нужно как-то передать номер телефона, и передать так чтобы спам-бот не смог его увидеть, т.е. ни текст, ни атрибут, ни скрипт сразу после canvas элемента не подходили. Возникали идеи с AJAX и прочими штучками, но тогда это дополнительный запрос на сервер, дополнительное время загрузки страницы и дополнительная причина для Google понизить поисковый индекс для сайта.</p>\n<p>И я решил, чтобы передавать информацию я буду использовать data-draw атрибут. Но он будет содержать не просто номер телефона, а закодированный номер телефон. Алгоритм шифровки не имеет значения, единственное что, он должен быть простым, в идеале уже быть доступным и в PHP и в JavaScript, чтобы не писать ничего самому, поэтому мой выбор пал на base64 (т.е., base64_encode в PHP и atob в JavaScript).</p>\n<p>И потом при помощи jQuery пишем не большой скрипт:</p>\n<pre><code class=\"hljs language-javascript\">jQuery(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$</span>) </span>{\n  $(<span class=\"hljs-string\">'canvas[data-draw]'</span>).each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i, canvas</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> content = atob(canvas.getAttribute(<span class=\"hljs-string\">'data-draw'</span>));\n    <span class=\"hljs-keyword\">var</span> $parent = $(canvas.parentNode);\n    <span class=\"hljs-keyword\">var</span> styles = {\n      <span class=\"hljs-attr\">textBaseline</span>: <span class=\"hljs-string\">'top'</span>,\n      <span class=\"hljs-attr\">fillStyle</span>: $parent.css(<span class=\"hljs-string\">'color'</span>),\n      <span class=\"hljs-attr\">font</span>: $parent.css(<span class=\"hljs-string\">'font-size'</span>) + <span class=\"hljs-string\">' '</span> + $parent.css(<span class=\"hljs-string\">'font-family'</span>),\n    };\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">'2d'</span>);\n\n    canvas.width = <span class=\"hljs-built_in\">Math</span>.ceil(measureText(content, styles, context).width);\n    <span class=\"hljs-built_in\">Object</span>.assign(context, styles);\n    context.fillText(content, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n  });\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">measureText</span>(<span class=\"hljs-params\">text, styles, context</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.assign(context, styles).measureText(text);\n  }\n});\n</code></pre>\n<p>В целом скрипт ищет все canvas элементы на странице с атрибутом data-draw, декодирует значение этого телефона, устанавливает стили шрифта, которые указаны в CSS, меряет текст и печатает его на canvas. Получаем то же самое что и в HTML, но в виде растрового изображения :)</p>\n<p>Думаю недели через 2 конечный вариант можно будет посмотреть на сайте <a href=\"http://ruba4ok.com\" target=\"_blank\" rel=\"noopener nofollow\">ruba4ok.com</a>, а пока можно посмотреть на этот рисунок:</p>\n<p><img src=\"/media/assets/canvas-vs-spam.png\" alt=\"\" title=\"Canvas vs Spam\" loading=\"lazy\" width=\"1152\" style=\"max-height: 134px;\" srcset=\"/media/assets/canvas-vs-spam-xs.png 375w,/media/assets/canvas-vs-spam-sm.png 768w,/media/assets/canvas-vs-spam-md.png 1024w,/media/assets/canvas-vs-spam.png 1280w\" sizes=\"(max-width: 375px) 375px,(max-width: 768px) 768px,(max-width: 1024px) 1024px,1280px\"></p>","headings":[["client-side-protection","Client side protection"],["reshenie","Решение"]],"id":"borba-so-spamom-pri-pomoschi-canvas"}