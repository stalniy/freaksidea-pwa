{"title":"Magento модели от А до Я: 3 кита","summary":"Magento построена на базе Zend фреймворка. Но это платформа и неудивительно\nчто она использует свой фреймворк, который по сути является рассширением\nZend-а. Он называется Varien. И чтобы иметь хорошее представление о моделях,\nнужно заглянуть внутрь самой системы\n","author":"sstotskyi","categories":["backend","important"],"createdAt":"2012-01-16T19:11:00.000Z","meta":{"keywords":["magento","Zend","Varien","модели"]},"alias":"magento-modeli-ot-a-do-ya-3-kita","content":"<p><em>Magento</em> написана при помощи <em>Zend</em> фреймворка и библиотеки <em>Varien</em>. Базовый функционал всех моделей сконцентрирован именно в последней. А именно - это 3 кита <em>Magento</em>: <em>Varien_Object</em>, <em>Varien_Data_Collection</em> и <em>Varien_Data_Collection_Db</em>.</p>\n<h2 id=\"varien-object\"><a name=\"varien-object\" class=\"h-link\" href=\"#\"></a>Varien_Object</h2>\n<p>Большинство моделей в <em>Magento</em> наследуют функционал этого класса. Если в двух словах, то этот класс упрощает работу с данными. Конструктор принимает один необязательный аргумент массив данных, который записывается в свойство <strong>$_data</strong>. По-скольку класс реализовывает интерфейс <em>ArrayAccess</em>, то к данным в объекте можно обращаться при помощи квадратных скобок (<strong>[]</strong>). Так же в классе реализованы магические методы: <strong>__get()</strong>, <strong>__set()</strong>, <strong>__call()</strong>, благодаря которым также можно получать данные хранящиеся в объекте. Например, чтобы получить данные из объекта</p>\n<pre><code class=\"hljs language-php\">$user = <span class=\"hljs-keyword\">new</span> Varien_Object(<span class=\"hljs-keyword\">array</span>(\n    <span class=\"hljs-string\">'is_enabled'</span> =&gt; <span class=\"hljs-keyword\">true</span>,\n    <span class=\"hljs-string\">'group_id'</span>   =&gt; <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-string\">'name'</span>       =&gt; <span class=\"hljs-string\">'Вася Пупкин'</span>\n));\n\n<span class=\"hljs-comment\"># first one</span>\n<span class=\"hljs-keyword\">echo</span> $user-&gt;getIsEnabled(), <span class=\"hljs-string\">\"\\n\"</span>;\n<span class=\"hljs-keyword\">echo</span> $user-&gt;getName(), <span class=\"hljs-string\">\"\\n\"</span>;\n\n<span class=\"hljs-comment\"># second one</span>\n<span class=\"hljs-keyword\">echo</span> $user-&gt;is_enabled, <span class=\"hljs-string\">\"\\n\"</span>;\n<span class=\"hljs-keyword\">echo</span> $user-&gt;name, <span class=\"hljs-string\">\"\\n\"</span>;\n\n<span class=\"hljs-comment\"># third one</span>\n<span class=\"hljs-keyword\">echo</span> $user[<span class=\"hljs-string\">'is_enabled'</span>], <span class=\"hljs-string\">\"\\n\"</span>;\n<span class=\"hljs-keyword\">echo</span> $user[<span class=\"hljs-string\">'name'</span>], <span class=\"hljs-string\">\"\\n\"</span>;\n</code></pre>\n<p>Аналогично при помощи тех же конструкций можно установить значение</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\"># first one</span>\n$user-&gt;setIsEnabled(<span class=\"hljs-keyword\">false</span>);\n<span class=\"hljs-keyword\">echo</span> (int)$user-&gt;getIsEnabled(), <span class=\"hljs-string\">\"\\n\"</span>;\n\n<span class=\"hljs-comment\"># second one</span>\n$user-&gt;is_enabled = <span class=\"hljs-keyword\">false</span>;\n<span class=\"hljs-keyword\">echo</span> (int)$user-&gt;is_enabled, <span class=\"hljs-string\">\"\\n\"</span>;\n\n<span class=\"hljs-comment\"># third one</span>\n$user[<span class=\"hljs-string\">'is_enabled'</span>] = <span class=\"hljs-keyword\">false</span>;\n<span class=\"hljs-keyword\">echo</span> (int)$user[<span class=\"hljs-string\">'is_enabled'</span>], <span class=\"hljs-string\">\"\\n\"</span>;\n</code></pre>\n<p>Все выше упомянутые методы работают либо через интерфейс, либо благодаря магическим методам базируясь на функциях класса <strong>setData()</strong> или <strong>getData()</strong>.</p>\n<pre><code class=\"hljs language-php\">$user-&gt;setData(<span class=\"hljs-string\">'is_enabled'</span>, <span class=\"hljs-keyword\">false</span>);\n<span class=\"hljs-keyword\">echo</span> (int)$user-&gt;getData(<span class=\"hljs-string\">'is_enabled'</span>), <span class=\"hljs-string\">\"\\n\"</span>;\n</code></pre>\n<p>Эти методы очень упрощают работу! Например, если приходят данные с формы, то вместо вызова нескольких методов можно просто написать</p>\n<pre><code class=\"hljs language-php\">$user = <span class=\"hljs-keyword\">new</span> Varien_Object();\n$user-&gt;setData($_POST);\n\n<span class=\"hljs-keyword\">echo</span> $user-&gt;getName(), <span class=\"hljs-string\">\"\\n\"</span>;\n</code></pre>\n<p>А метод <strong>getData()</strong> позволяет напрямую обращаться к определенному значению в многомерном массиве при помощи пути</p>\n<pre><code class=\"hljs language-php\">$user = <span class=\"hljs-keyword\">new</span> Varien_Object(<span class=\"hljs-keyword\">array</span>(\n    <span class=\"hljs-string\">'name'</span>       =&gt; <span class=\"hljs-string\">'Вася Пупкин'</span>,\n    <span class=\"hljs-string\">'friends'</span>    =&gt; <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'university'</span> =&gt; <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>),\n        <span class=\"hljs-string\">'home'</span>       =&gt; <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'Petrov'</span> =&gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'Pupkin'</span> =&gt; <span class=\"hljs-number\">2</span>)\n    )\n));\n\n<span class=\"hljs-keyword\">echo</span> $user-&gt;getData(<span class=\"hljs-string\">'friends/home/Petrov'</span>), <span class=\"hljs-string\">\"\\n\"</span>;\n</code></pre>\n<p>Все бизнес модели являются потомками этого класса. Например, модели продукта и пользователя</p>\n<pre><code class=\"hljs language-php\">$customer = Mage::getModel(<span class=\"hljs-string\">'customer/customer'</span>);\n\n$customer-&gt;setFirstname(<span class=\"hljs-string\">'Vasya'</span>)\n    -&gt;setLastname(<span class=\"hljs-string\">'Pupkin'</span>)\n    -&gt;save();\n\nvar_dump($customer-&gt;getId());\n</code></pre>\n<p>Так же очень интересными есть методы <strong>setId()</strong>, <strong>getId()</strong> и <strong>setIdFieldName()</strong>. Благодаря им достаточно просто и удобно работать с любимы именами идентификаторов в базе. Например, в базе поле <em>PRIMARY_KEY</em> називается <em>entity_id</em>, но все равно к нему можно обращаться при помощи методов <em>setId/getId</em></p>\n<pre><code class=\"hljs language-php\">$user = <span class=\"hljs-keyword\">new</span> Varien_Object(<span class=\"hljs-keyword\">array</span>(\n    <span class=\"hljs-string\">'entity_id'</span> =&gt; <span class=\"hljs-number\">12</span>\n));\n$user-&gt;setIdFieldName(<span class=\"hljs-string\">'entity_id'</span>);\n\n<span class=\"hljs-keyword\">echo</span> $user-&gt;getId(), <span class=\"hljs-string\">\"\\n\"</span>;\n</code></pre>\n<p>Этот класс имеет и ряд методов по конвертации данных. Например, в <em>json</em>, <em>xml</em>, <em>array</em> и <em>string</em></p>\n<pre><code class=\"hljs language-php\">$user = <span class=\"hljs-keyword\">new</span> Varien_Object(<span class=\"hljs-keyword\">array</span>(\n    <span class=\"hljs-string\">'name'</span>       =&gt; <span class=\"hljs-string\">'Вася Пупкин'</span>,\n    <span class=\"hljs-string\">'id'</span>         =&gt; <span class=\"hljs-number\">5</span>\n));\n\n<span class=\"hljs-keyword\">echo</span> $user-&gt;toString(), <span class=\"hljs-string\">\"\\n\"</span>;\n<span class=\"hljs-keyword\">echo</span> $user-&gt;toXml(), <span class=\"hljs-string\">\"\\n\"</span>;\n<span class=\"hljs-keyword\">echo</span> $user-&gt;toJson(), <span class=\"hljs-string\">\"\\n\"</span>;\nvar_dump($user-&gt;toArray());\n</code></pre>\n<p>Каждый из этих методов имеет необязательные параметры, при помощи которых можно отфильтровать данные.</p>\n<h2 id=\"varien-data-collection\"><a name=\"varien-data-collection\" class=\"h-link\" href=\"#\"></a>Varien_Data_Collection</h2>\n<p>Этот класс реализовывает методы упрощающие работу с коллекцией объектов (айтемов), к примеру с массивом объектов класса <em>Varien_Object</em>. В качестве айтемов может быть любой другой объект. Для изменения класса предназначен метод <strong>setItemObjectClass(string $className)</strong>. Этот класс реализовывает 2 интерфейса <em>IteratorAggregate</em> и <em>Countable</em>, что позволяет перебирать его айтемы при помощи цикла <strong>foreach</strong> и узнавать к-во элементов при помощи ф-ции <strong>count</strong>.</p>\n<p>Сам по себе этот класс нигде не используется, а просто реализовывает базовый функционал. Достаточно странно, что он не абстрактный. Потому как он реализовывает базовый функционал пейджинга, но сам его нигде не использует (<strong>getCurPage()</strong>, <strong>getLastPageNumber()</strong>, <strong>getPageSize()</strong> и <strong>getSize()</strong>). Разница между методом <strong>getSize()</strong> и вызовом ф-цию <strong>count()</strong> на объекте в том, что при вызове первого к-во записывается в свойство объекта <strong>$_totalRecords</strong> и потом не пересчитывается. При втором способе будет каждый раз пересчитываться.</p>\n<p>Для работы с элементами доступны методы: <strong>addItem(), getFirstItem()</strong>, <strong>getLastItem(), getNewEmptyItem(), removeItemByKey</strong> и <strong>getItems()</strong>. Очистить коллекцию можно при помощи метода <strong>clear</strong>. Также есть набор методов (<em>set/get/has</em>) по установке флагов коллекции (это могут быть не только булевские значения). Например</p>\n<pre><code class=\"hljs language-php\">$user = <span class=\"hljs-keyword\">new</span> Varien_Object(<span class=\"hljs-keyword\">array</span>(\n    <span class=\"hljs-string\">'name'</span>       =&gt; <span class=\"hljs-string\">'Вася Пупкин'</span>,\n    <span class=\"hljs-string\">'id'</span>         =&gt; <span class=\"hljs-number\">5</span>\n));\n\n\n$collection = <span class=\"hljs-keyword\">new</span> Varien_Data_Collection();\n\n$collection-&gt;addItem($user)\n    -&gt;setFlag(<span class=\"hljs-string\">'is_new'</span>)\n    -&gt;setFlag(<span class=\"hljs-string\">'is_test'</span>, <span class=\"hljs-string\">'yes'</span>);\n\n<span class=\"hljs-keyword\">echo</span> (int)$collection-&gt;hasFlag(<span class=\"hljs-string\">'is_new'</span>), <span class=\"hljs-string\">\"\\n\"</span>;\n<span class=\"hljs-keyword\">echo</span> $collection-&gt;getFlag(<span class=\"hljs-string\">'is_test'</span>), <span class=\"hljs-string\">\"\\n\"</span>;\n</code></pre>\n<p>Можно получить массив значений определенного поля из всех элементов при помощи метода <strong>getColumnValues($colName)</strong>. Или же получить все айтыми, у которых значение определенного поля равно заданному <strong>getItemsByColumnValue($column, $value).</strong> Также можно получить идентификаторы всех элементов при помощи метода <strong>getAllIds()</strong>.</p>\n<p>В коде <em>Magento</em> очень часто фигурируют массивы такой структуры</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\"># first: Option Hash</span>\n$data = <span class=\"hljs-keyword\">array</span>(\n    $value =&gt; $label\n..........................\n);\n\n<span class=\"hljs-comment\"># second: Option Array</span>\n$data = <span class=\"hljs-keyword\">array</span>(\n..........................\n    <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'label'</span> =&gt; $label,\n        <span class=\"hljs-string\">'value'</span> =&gt; $value\n    )\n);\n</code></pre>\n<p>По-этому неудивительно, что данный класс реализовывает 2 метода: <strong>toOptionHash()</strong> и <strong>toOptionArray()</strong>, которые преобразовывают данные в коллекции именно к таким структурам соответственно. Поля $<em>value</em> и $<em>label</em> настраиваются для каждого класса отдельно при помощи защищенных методов <strong>_toOptionHash()</strong> и <strong>_toOptionArray()</strong>.</p>\n<h2 id=\"varien-data-collection-db\"><a name=\"varien-data-collection-db\" class=\"h-link\" href=\"#\"></a>Varien_Data_Collection_Db</h2>\n<p>Этот класс является фундаментом для всех коллекций в <em>Magento.</em> Для взаимодействия с базой используются расширенные <em>Zend</em>-овские классы. Запрос к базе создается при помощи объекта класса <em>Zend_Db_Select</em>.</p>\n<p>Конструктор коллекции принимает один необязательный параметр - объект соединения, который является экземпляром потомка класса <em>Zend_Db_Adapter_Abstract</em>. Получить объект селекта позволяет метод <em>getSelect()</em>, объект соединения с базой - <em>getConnection()</em>, <em>getData()</em> позволяет получить вместо объектов массивы данных из базы, <em>setOrder($field, $direction)</em> - устанавливает порядок сортировки, <em>load()</em> - загружает коллекцию из базы данных (вызывается автоматически перед перебором элементов или вызовом метода <em>getItems()</em>) и самый интересный <em>addFieldToFilter($field, $condition)</em> - добавляет в запрос фильтр по полю.</p>\n<p>Последний метод стоит рассмотреть более детально, поскольку значение <em>$condition</em> может быть достаточно разнообразным. Например</p>\n<pre><code class=\"hljs language-php\">$collection-&gt;addFieldToFilter(<span class=\"hljs-string\">'sku'</span>, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'eq'</span> =&gt; <span class=\"hljs-string\">'ZH12b5'</span>));\n</code></pre>\n<p>то же самое</p>\n<pre><code class=\"hljs language-php\">$collection-&gt;addFieldToFilter(<span class=\"hljs-string\">'sku'</span>, <span class=\"hljs-string\">'ZH12b5'</span>);\n</code></pre>\n<p>Чтобы разобраться с этим составим таблицу: выражения в PHP и соответствующий ему SQL.</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"eq\"</span> =&gt; <span class=\"hljs-string\">'ZH12b5'</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku = 'ZH12b5')\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"neq\"</span> =&gt; <span class=\"hljs-string\">'ZH12b5'</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku &lt;&gt; 'ZH12b5')\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"like\"</span> =&gt; <span class=\"hljs-string\">'ZH12b5'</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku LIKE 'ZH12b5')\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"nlike\"</span> =&gt; <span class=\"hljs-string\">'ZH'</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku NOT LIKE 'ZH')\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"is\"</span> =&gt; <span class=\"hljs-string\">'zh'</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku IS 'zh')\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"in\"</span> =&gt; <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'zh'</span>, <span class=\"hljs-string\">'pl'</span>))\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku IN ('zh', 'pl'))\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"nin\"</span> =&gt; <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'zh'</span>, <span class=\"hljs-string\">'pl'</span>))\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku NOT IN ('zh', 'pl'))\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"notnull\"</span> =&gt; <span class=\"hljs-keyword\">true</span> )\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku IS NOT NULL)\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"null\"</span> =&gt; <span class=\"hljs-keyword\">true</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku IS  NULL)\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"gt\"</span> =&gt; <span class=\"hljs-number\">5</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku &gt; 5)\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"lt\"</span> =&gt; <span class=\"hljs-number\">10</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku &lt; 10 )\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"gteq\"</span> =&gt; <span class=\"hljs-number\">10</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku &gt;= 5)\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"lteq\"</span> =&gt; <span class=\"hljs-number\">22</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku =&lt; 5)\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">\"finset\"</span> =&gt; <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'test'</span>))\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (find_in_set('test', sku))\n</code></pre>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'from'</span> =&gt; <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'to'</span> =&gt; <span class=\"hljs-number\">30</span>)\n</code></pre>\n<pre><code class=\"hljs language-sql\"> WHERE (sku &gt;= '2' AND sku &lt;= '30')\n</code></pre>\n<p>С этим все предельно ясно, но интересно узнать как комбинировать условия при помощи <strong>AND</strong>/<strong>OR</strong>. Достаточно просто:</p>\n<pre><code class=\"hljs language-php\">$collection-&gt;addFieldToFilter(<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'like'</span> =&gt; <span class=\"hljs-string\">'ZH%'</span>))\n    -&gt;addFieldToFilter(<span class=\"hljs-string\">'is_enabled'</span>, <span class=\"hljs-keyword\">true</span>);\n</code></pre>\n<p>Такой вызов приведет к созданию следующего запроса</p>\n<pre><code class=\"hljs language-sql\"> WHERE (name LIKE 'ZH%') AND (is_enabled = 1)\n</code></pre>\n<p>Для использования <strong>OR</strong> в запросе все не так очевидно:</p>\n<pre><code class=\"hljs language-php\">$collection-&gt;addFieldToFilter(<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-keyword\">array</span>(\n    <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'like'</span> =&gt; <span class=\"hljs-string\">'ZH%'</span>),\n    <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'like'</span> =&gt; <span class=\"hljs-string\">'%P'</span>)\n));\n</code></pre>\n<p>Такая конструкция создаст следующий запрос</p>\n<pre><code class=\"hljs language-sql\"> WHERE ((name LIKE 'ZH%') OR (name LIKE '%P')) \n</code></pre>\n<p>Если у таблицах совпадают имена полей, значит нужно сделать маппинг для фильтра. Например, есть таблицы пользователей (<em>users</em>) и ролей(<em>user_roles</em>), каждая из таблиц имеет поле <em>name</em>. Хотим сделать фильтр по полю из таблицы пользователей. Тогда</p>\n<pre><code class=\"hljs language-php\">$collection-&gt;addFilterToMap(<span class=\"hljs-string\">'user_name'</span>, <span class=\"hljs-string\">'users.name'</span>)\n    -&gt;addFilterToMap(<span class=\"hljs-string\">'role_name'</span>, <span class=\"hljs-string\">'user_roles.name'</span>)\n    -&gt;addFieldToFilter(<span class=\"hljs-string\">'user_name'</span>, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'like'</span> =&gt; <span class=\"hljs-string\">'Admin%'</span>));\n</code></pre>\n<p>Теперь немного об оптимизации. Коллекция предоставляет функционал кэширования при помощи метода:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">initCache</span><span class=\"hljs-params\">($cacheInstance, $cachePrefix, array $cacheTags)</span></span>;\n</code></pre>\n<p>Объект <strong>$cacheInstance</strong> может быть каким угодно, он даже не должен реализовывать какой-либо интерфейс, НО должен иметь методы <strong>load($cacheId)</strong> и <strong>save(string $data, $cacheId, $cacheTags)</strong>.</p>\n<p>Метод <strong>load()</strong> коллекции загружает все строки из базы данных соответствующие заданным критериям, но что если таких строк будет 100000 - тогда это 100000 объектов. Можно с 100% увереностью сказать, что не каждый сервер сможет поместить такое к-во объектов в памяти. Именно тогда и нужно использовать метод <strong>fetchItem()</strong> (доступный с версии 1.5.1). Если его вызвать он возвратит только один элемент за раз, если вызвать еще возвратит следующий.</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">while</span> ($item = $collection-&gt;fetchItem()) {\n   $data = $item-&gt;callSomeMethod();\n   <span class=\"hljs-comment\">// do some operations</span>\n   <span class=\"hljs-keyword\">unset</span>($item);\n}\n</code></pre>\n<p>Это позволит работать с большими данными и при этом целесообразно использовать оперативную память сервера.</p>\n<p>Проблема с памятью относится и к таким методам как <strong>toOptionHash()</strong> и <strong>toOptionArray()</strong>. По-этому был написан аналог первого (про второй видимо забыли), но с использованием метода <strong>fetchItem()</strong> и называется он <strong>_toOptionHashOptimized()</strong>. Это защищенный метод, по-этому доступ к нему можно получить только внутри класса. Но ничто не мешает создать наследника от этого класса и написать публичный метод <strong>toOptionHashOptimized()</strong>.</p>\n<p><strong>P.S.:</strong> в следующей статье начнем разбираться с &quot;реальными&quot; классами в <em>Magento</em>. Узнаем общую структуру моделей, что такое Magento-path и многое другое</p>","headings":[["varien-object","Varien_Object"],["varien-data-collection","Varien_Data_Collection"],["varien-data-collection-db","Varien_Data_Collection_Db"]],"id":"magento-modeli-ot-a-do-ya-3-kita"}