{"title":"Обработка событий и работа с полями форм в Knockout ","summary":"Никакое приложение не может быть востребованным и популярным, если оно не\nотвечает на действия пользователя. KO предоставляет ряд инструментов\n(байндингов) для обработки разных событий и управления полями формы.\n","author":"sstotskyi","categories":["frontend","important"],"createdAt":"2012-07-02T15:49:00.000Z","meta":{"keywords":["javascript","knockout"]},"alias":"obrabotka-sobytij-i-rabota-s-polyami-form-v-knockout","content":"<p>Никакое приложение не может быть востребованным и популярным, если оно не отвечает на действия пользователя. KO предоставляет ряд инструментов (байндингов) для обработки разных событий и управления полями формы.</p>\n<h2 id=\"click-bajnding\"><a name=\"click-bajnding\" class=\"h-link\" href=\"#\"></a>Click байндинг</h2>\n<p>Добавляет обработчик события (<em>JavaScript</em> функцию) для указанного элемента. Чаще всего используется для обработки нажатия мыши по кнопкам, чекбоксам и ссылкам, но также применим и к любому другому элементу. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    You've clicked <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: numberOfClicks\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> times\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"click: incrementClickCounter\"</span>&gt;</span>Click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        numberOfClicks : ko.observable(<span class=\"hljs-number\">0</span>),\n        incrementClickCounter : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">var</span> previousCount = <span class=\"hljs-keyword\">this</span>.numberOfClicks();\n            <span class=\"hljs-keyword\">this</span>.numberOfClicks(previousCount + <span class=\"hljs-number\">1</span>);\n        }\n    };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>При каждом нажатии на кнопку мыши, вызывается метод <strong>viewModel::incrementClickCounter</strong>, который увеличивает внутренний счетчик на 1. Данный байндинг принимает только один параметр, <strong>callback</strong> функцию, в которую передает 2 параметра: первый - текущий контекст (в примере выше это <em>viewModel</em>) и второй - объект события. Если нужно передать больше параметров, можно воспользоваться оберткой</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"click: function(data, event) { myFunction.call($root, data, event, 'param1', 'param2') }\"</span>&gt;</span>\n    Click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre>\n<p>Или же использовать метод <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener nofollow\">bind</a> для функции (если он доступен, по сути делает то же самое)</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"click: myFunction.bind($root, $data, event, 'param1', 'param2')\"</span>&gt;</span>\n    Click me\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n</code></pre>\n<p>По умолчание КО предотвращает стандартное поведение <em>DOM</em> элемента при клике на нем. В большей степени это сделано для работы с ссылками (или же button[type=&quot;submit&quot;]), так же как и с любыми другими элементами. Например, при нажатии по ссылке на которой установлен байндинг <strong>click</strong>, выполнится только <em>callback</em> функция и броузер не перенаправит пользователя на адрес указанный в атрибуте <em>href</em>. Но все же, если нужно разрешить стандартное поведение, то достаточно чтобы <em>callback</em> метод вернул <strong>true</strong>.</p>\n<p>Иногда нужно предотвратить всплывание события. Например, в случае если родительский и дочерний элемента оба определяют <em>callback</em> для <em>click</em> байндинга:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"click: myDivHandler\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"click: myButtonHandler, clickBubble: false\"</span>&gt;</span>\n        Click me\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Чтобы при нажатии на кнопку не запускался метод <strong>myDivHandler</strong>, для нее нужно определить еще один байндинг с именем <strong>clickBubble</strong> и передать ему параметр <strong>false</strong>.</p>\n<p>Все это относится и к другим типам событий. Например, чтобы отменить всплывание для <strong>mouseover</strong> события, нужно задать <strong>mouseoverBubble</strong> с параметром <strong>false</strong>.</p>\n<h2 id=\"event-bajnding\"><a name=\"event-bajnding\" class=\"h-link\" href=\"#\"></a>Event байндинг</h2>\n<p>Этот байндинг позволяет задать сразу несколько событий. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"event: { mouseover: enableDetails, mouseout: disableDetails }\"</span>&gt;</span>Mouse over me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"visible: detailsEnabled\"</span>&gt;</span>Details<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        detailsEnabled: ko.observable(<span class=\"hljs-literal\">false</span>),\n        enableDetails: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">this</span>.detailsEnabled(<span class=\"hljs-literal\">true</span>);\n        },\n        disableDetails: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">this</span>.detailsEnabled(<span class=\"hljs-literal\">false</span>);\n        }\n    };\n    ko.applyBindings(viewModel);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Теперь, если курсор мыши будет находится над первым <em>div</em>-ом, то второй <em>div</em> отобразится на странице, если убрать курсор последний исчезнет. Во всем остальном <strong>event</strong> байндинг аналогичен <strong>click</strong>-у.</p>\n<h2 id=\"submit-bajnding\"><a name=\"submit-bajnding\" class=\"h-link\" href=\"#\"></a>Submit байндинг</h2>\n<p><strong>submit</strong> байндинг добавляет обработчик события формы - <strong>submit</strong>. При использовании этого байндинга KO предотвращает стандартное поведение формы, т.е. браузер не отправит данные из формы на сервер. Если же нужно отправить ее, то обработчик события должен вернуть <strong>true</strong>. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"submit: doSomething\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- form contents go here --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    ko.applyBindings({\n        doSomething: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(formElement)</span> </span>{\n            <span class=\"hljs-comment\">// e.g. validate form values</span>\n        }\n    });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Стоит обратить внимание, что КО в качестве первого аргумент для этого байндинга передает элемент формы, а не текущий контекст. Для решения подобных проблем существует 2 известных способа:</p>\n<ul>\n<li>\n<p>передать контекст в качестве параметра</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"submit: function(form, event) { $root.doSomething($data, form, event) }\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"submit\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p>использовать <strong>ko.contextFor</strong></p>\n<pre><code class=\"hljs language-javascript\">ko.applyBindings({\n   <span class=\"hljs-attr\">doSomething</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">form, event</span>) </span>{\n       <span class=\"hljs-keyword\">var</span> context = ko.contextFor(form);\n       alert(context.$data);\n   }\n});\n</code></pre>\n</li>\n</ul>\n<p>Думаю второй более предпочтительнее ибо выглядит лучше и понятней.</p>\n<p>Здесь может возникнуть вполне логичный вопрос: а почему бы просто не поставить <strong>click</strong> байндинг на кнопку и в обработчике отправлять форму? Ответ кроется в том, что форму можно отправить и при помощи нажатия клавиши <strong>Enter</strong> в текстовом поле. Поэтому лучше использовать <strong>submit</strong> байндинг.</p>\n<h2 id=\"enable-disable-bajndingi\"><a name=\"enable-disable-bajndingi\" class=\"h-link\" href=\"#\"></a>Enable/Disable байндинги</h2>\n<p>Эти байндинги используются для контроля доступности элементов формы, таких как <em>input</em>, <em>textarea</em>, <em>select</em>. Первый из них делает элемент доступным, второй наоборот - выключает, если переданное байндингу значение будет равняться <strong>true</strong>. (также можно передавать <em>JavaScript</em> выражения, которые вернут <strong>true</strong> или <strong>false</strong>). Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'checkbox'</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: hasCellphone\"</span> /&gt;</span>\n    I have a cellphone\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Your cellphone number:\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">'text'</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"value: cellphoneNumber, enable: hasCellphone\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        hasCellphone : ko.observable(<span class=\"hljs-literal\">false</span>),\n        cellphoneNumber: <span class=\"hljs-string\">\"\"</span>\n    };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>В данном примере, если пользователь нажмет на чекбокс, то значение <strong>ViewModel::hasCellphone</strong> будет равняться <strong>true</strong> и текстовый элемент включится, пользователь сможет изменить телефонный номер.</p>\n<p><strong>disable</strong> байндинг - противоположность <strong>enable</strong>. Эквивалент для первого используя второй</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"enable: !someViewModelValue()\"</span> /&gt;</span>\n</code></pre>\n<h2 id=\"value-bajnding\"><a name=\"value-bajnding\" class=\"h-link\" href=\"#\"></a>Value байндинг</h2>\n<p>Этот байндинг ассоциирует значение элемента формы с указанным свойством <em>ViewModel</em>-и. Можно использовать для <strong>input</strong>, <strong>select</strong> и <strong>textarea</strong>. Стоит обратить внимание, что для работы с радио кнопками и чекбоксами стоит использовать <strong>checked</strong> байндинг, а не <strong>value</strong>.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Login name: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"value: userName\"</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Password: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"value: userPassword\"</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    ko.applyBindings({\n        userName: ko.observable(<span class=\"hljs-string\">\"\"</span>),        <span class=\"hljs-comment\">// Initially blank</span>\n        userPassword: ko.observable(<span class=\"hljs-string\">\"123\"</span>), <span class=\"hljs-comment\">// Prepopulate</span>\n    });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p><strong>value</strong> принимает один параметр: имя связанного свойства. Если последнее является наблюдаемым, то значение текстового поля будет меняться при каждом изменении свойства <em>ViewModel</em> и наоборот. По умолчанию КО обновляет <em>ViewModel</em> после того как поле потеряет фокус. Это поведение можно изменить задав еще один параметр - <em>valueUpdate</em>. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Your value: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"value: someValue, valueUpdate: 'afterkeydown'\"</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>You have typed: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: someValue\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- updates in real-time --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    ko.applyBindings({\n        someValue: ko.observable(<span class=\"hljs-string\">\"edit me\"</span>)\n    });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p><strong>valueUpdate</strong> может принимать такие значения:</p>\n<ul>\n<li><strong>change</strong> - стандартное поведение, <em>viewModel</em> обновляется после того как поле измениться;</li>\n<li><strong>keyup</strong> - обновляет после того как пользователь отпустит нажатую кнопку;</li>\n<li><strong>keypress</strong> - обновляет сразу при нажатии кнопки;</li>\n<li><strong>afterkeydown</strong> - начинает обновлять в тот момент когда пользователь начинает что-то набирать.</li>\n</ul>\n<p>Последний вариант подходит наилучшим образом, если нужно обновлять <em>ViewModel</em> в реальном времени. Если свойство с которым ассоциирован байндинг не наблюдаемое, то КО сможет наблюдать только за изменениями в пользовательском интерфейсе и соответственно обновлять значение свойства. Но при изменении свойства - <em>View</em> меняться не будет. Также <strong>value</strong> можно использовать в связке с <strong>options</strong> байндинг для <em>html</em> списков.</p>\n<h2 id=\"hasfocus-bajnding\"><a name=\"hasfocus-bajnding\" class=\"h-link\" href=\"#\"></a>hasfocus байндинг</h2>\n<p><strong>hasfocus</strong> ассоциирует состояние фокуса элемента со свойством <em>ViewModel</em>-и. Удобно для реализации подсказок для элементов формы, например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"hasfocus: isSelected\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"click: setIsSelected\"</span>&gt;</span>Focus programmatically<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"visible: isSelected\"</span>&gt;</span>The textbox has focus<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-keyword\">var</span> viewModel = {\n    isSelected: ko.observable(<span class=\"hljs-literal\">false</span>),\n    setIsSelected: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">this</span>.isSelected(<span class=\"hljs-literal\">true</span>) }\n};\nko.applyBindings(viewModel);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>В данном примере, когда текстовое поле получает фокус появляется подсказка в <em>span</em> элементе. Данный байндинг принимает всего один булевский параметр. Если последний равен <strong>true</strong> - поле получает фокус, если <strong>false</strong> - теряет.</p>\n<p>При помощи этого байндинга достаточно просто реализовать редактирование текстового элемента, например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Name: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">b</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"visible: !editing(), text: name, click: edit\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">b</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"visible: editing, value: name, hasfocus: editing\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">em</span>&gt;</span>Click the name to edit it; click elsewhere to apply changes.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">em</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">PersonViewModel</span><span class=\"hljs-params\">(name)</span> </span>{\n    <span class=\"hljs-comment\">// Data</span>\n    <span class=\"hljs-keyword\">this</span>.name = ko.observable(name);\n    <span class=\"hljs-keyword\">this</span>.editing = ko.observable(<span class=\"hljs-literal\">false</span>);\n\n    <span class=\"hljs-comment\">// Behaviors</span>\n    <span class=\"hljs-keyword\">this</span>.edit = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">this</span>.editing(<span class=\"hljs-literal\">true</span>) }\n}\n\nko.applyBindings(<span class=\"hljs-keyword\">new</span> PersonViewModel(<span class=\"hljs-string\">\"Bert Bertington\"</span>));\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Т.е. при нажатии на имя включается режим редактирования, при котором элемент <em>b</em> становится невидимым, а текстовый - видимым. Так как свойство name ассоциировано со значением <em>input</em>-а, то когда он потеряет фокус имя обновится и для <em>b</em> тега.</p>\n<h2 id=\"checked-bajnding\"><a name=\"checked-bajnding\" class=\"h-link\" href=\"#\"></a>Checked байндинг</h2>\n<p>Используется для наблюдения за состоянием чекбоксов или радио кнопок. В качестве параметра принимает одно булевское значение, например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Send me spam: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: wantsSpam\"</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        wantsSpam: ko.observable(<span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// Initially checked</span>\n    };\n\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-comment\">// The checkbox becomes unchecked</span>\n       viewModel.wantsSpam(<span class=\"hljs-literal\">false</span>);\n    }, <span class=\"hljs-number\">3000</span>);\n    ko.applyBindings(viewModel);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Для чекбоксов также можно передавать массив. Если значие атрибута <em>value</em> есть в массиве, то значение свойства <em>checked</em> чекбокса будет равнятmся <strong>true</strong>. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Send me spam: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: wantsSpam\"</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"visible: wantsSpam\"</span>&gt;</span>\n    Preferred flavors of spam:\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"cherry\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: spamFlavors\"</span> /&gt;</span> Cherry<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"almond\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: spamFlavors\"</span> /&gt;</span> Almond<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"msg\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: spamFlavors\"</span> /&gt;</span> Monosodium Glutamate<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        wantsSpam: ko.observable(<span class=\"hljs-literal\">true</span>),\n        spamFlavors: ko.observableArray([<span class=\"hljs-string\">\"cherry\"</span>,<span class=\"hljs-string\">\"almond\"</span>]) <span class=\"hljs-comment\">// Initially checks the Cherry and Almond checkboxes</span>\n    };\n\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-comment\">// Now additionally checks the Monosodium Glutamate checkbox</span>\n       viewModel.spamFlavors.push(<span class=\"hljs-string\">\"msg\"</span>);\n    }, <span class=\"hljs-number\">3000</span>);\n    ko.applyBindings(viewModel);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>При нажатии на чекбокс значение в массив будет добавляться (или удаляться из него) в зависимости от состояния свойства <em>checked</em>. И наоборот (если массив наблюдаемый), свойство чекбокса <em>checked</em> будет равно <strong>true</strong>, если добавить в массив значение и <strong>false</strong>, если удалить элемент из массива.</p>\n<p>Для радио кнопок поведение немного другое. Последняя будет отмечена только в том случае если значение в свойстве <em>ViewModel</em> и значение атрибута <strong>value</strong> будут равны. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Send me spam: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: wantsSpam\"</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"visible: wantsSpam\"</span>&gt;</span>\n    Preferred flavor of spam:\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"flavorGroup\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"cherry\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: spamFlavor\"</span> /&gt;</span> Cherry<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"flavorGroup\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"almond\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: spamFlavor\"</span> /&gt;</span> Almond<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"radio\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"flavorGroup\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"msg\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: spamFlavor\"</span> /&gt;</span> Monosodium Glutamate<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        wantsSpam: ko.observable(<span class=\"hljs-literal\">true</span>),\n        spamFlavor: ko.observable(<span class=\"hljs-string\">\"almond\"</span>) <span class=\"hljs-comment\">// Initially selects only the Almond radio button</span>\n    };\n\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// Now only Monosodium Glutamate is checked</span>\n        viewModel.spamFlavor(<span class=\"hljs-string\">\"msg\"</span>);\n    }, <span class=\"hljs-number\">3000</span>);\n    ko.applyBindings(viewModel);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"options-bajnding\"><a name=\"options-bajnding\" class=\"h-link\" href=\"#\"></a>options байндинг</h2>\n<p>Используется для указания возможных вариантов <strong><option></strong> для выпадающего списка <strong><select></strong>. Не применим больше ни к какому другому элементу. В качестве параметра можно передать наблюдаемый либо обычный массив. Чтобы указать (или узнать) какие из вариантов выбраны используется <strong>value</strong> байндинг для обычного <em><select></em> и <strong>selectedOptions</strong> для множественного. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Choose some countries you'd like to visit: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"options: availableCountries\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"5\"</span> <span class=\"hljs-attr\">multiple</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        availableCountries : ko.observableArray([<span class=\"hljs-string\">'France'</span>, <span class=\"hljs-string\">'Germany'</span>, <span class=\"hljs-string\">'Spain'</span>])\n    };\n    ko.applyBindings(viewModel);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Данный байндинг имеет ряд необязательных параметров:</p>\n<ul>\n<li>\n<p><strong>optionsCaption</strong> - добавляет опцию в начало массива с указанным текстом и значением <strong>undefined</strong>. Используется в основном с обычным выпадающим списком в тех случаях когда нежелательно, чтобы один из вариантов был выбран по умолчанию. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">'options: myOptions, optionsCaption: \"Select an item...\", value: myChosenValue'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p><strong>optionsText</strong> - используется, чтобы указать текст для тега <strong><option></strong>, если элемент массива является объектом. В качестве аргумента принимает строку с именем поля в последнем. Также можно передать функцию, чтобы задать специфическую логику для вывода. В качестве параметра ей передается текущий элемент массива. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Your country:\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"options: availableCountries, optionsText: 'countryName', value: selectedCountry, optionsCaption: 'Choose...'\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-comment\">// Constructor for an object with two properties</span>\n    <span class=\"hljs-keyword\">var</span> country = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(name, population)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.countryName = name;\n        <span class=\"hljs-keyword\">this</span>.countryPopulation = population;\n    };\n\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        availableCountries : ko.observableArray([\n            <span class=\"hljs-keyword\">new</span> country(<span class=\"hljs-string\">\"UK\"</span>, <span class=\"hljs-number\">65000000</span>),\n            <span class=\"hljs-keyword\">new</span> country(<span class=\"hljs-string\">\"USA\"</span>, <span class=\"hljs-number\">320000000</span>)\n        ]),\n        selectedCountry : ko.observable() <span class=\"hljs-comment\">// Nothing selected by default</span>\n    };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>или с использованием <em>callback</em></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- viewModel the same as in example above --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"options: availableCountries,\n                   optionsText: function(item) {\n                       return item.countryName + ' (pop: ' + item.countryPopulation + ')'\n                   },\n                   value: selectedCountry,\n                   optionsCaption: 'Choose...'\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p><strong>optionsValue</strong> - по аналогии к предыдущему параметру, позволяет указать какое из свойств объекта будет использоваться для установки атрибута <em>value</em> тега <em><option></em>.</p>\n</li>\n<li>\n<p><strong>selectedOptions</strong> - последний параметр рассмотрим немного позже.</p>\n</li>\n</ul>\n<p>Одной очень положительной особенностью <strong>options</strong> байндинга является способность сохранять свое состояние при любых изменении значения свойства <em>ViewModel</em>, если это возможно конечно. Т.е., если добавляется или удаляется элемент из массива, то все выбранные ранее варианты остаются таковыми (конечно же, если они не были удалены).</p>\n<h2 id=\"selected-options-bajnding\"><a name=\"selected-options-bajnding\" class=\"h-link\" href=\"#\"></a>selectedOptions байндинг</h2>\n<p>Этот байндинг контролирует, какие из элементов в списке с множественным выбором выбраны. Применим только к <strong><select></strong> элементу и только вместе с <strong>options</strong> байндингом. Когда пользователь отмечает какие-либо элементы, КО автоматически добавляет или удаляет значения из свойства, которое ассоциировано с этим байндингом. А это значит что в качестве параметра может быть только массив (или наблюдаемый его вариант). Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Choose some countries you'd like to visit:\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"options: availableCountries, selectedOptions: chosenCountries\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"5\"</span> <span class=\"hljs-attr\">multiple</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        availableCountries : ko.observableArray([<span class=\"hljs-string\">'France'</span>, <span class=\"hljs-string\">'Germany'</span>, <span class=\"hljs-string\">'Spain'</span>]),\n        chosenCountries : ko.observableArray([<span class=\"hljs-string\">'Germany'</span>]) <span class=\"hljs-comment\">// Initially, only Germany is selected</span>\n    };\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n       <span class=\"hljs-comment\">// Now France is selected too</span>\n       viewModel.chosenCountries.push(<span class=\"hljs-string\">'France'</span>);\n    }, <span class=\"hljs-number\">2000</span>);\n    ko.applyBindings(viewModel);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>В данном примере, изменение свойства <strong>viewModel::chosenCountries</strong> (добавление/удаление элементов) приведет к тому, что некоторые элементы будут выбраны, а другие - нет. Аналогично при выборе каких-либо опций свойство <em>ViewModel</em> будет автоматически обновлено.</p>\n<p>Массив необязательно должен содержать в себе только строки. Как было показано выше в примере с <strong>options</strong> байндигом, можно также работать и с массивом объектов, например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Choose some countries you'd like to visit:\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"options: availableCountries, selectedOptions: chosenCountries, optionsValue: 'code', optionsText: 'name'\"</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">\"5\"</span> <span class=\"hljs-attr\">multiple</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Country</span><span class=\"hljs-params\">(code, name)</span> </span>{\n       <span class=\"hljs-keyword\">this</span>.code = code;\n       <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        availableCountries : ko.observableArray([\n            <span class=\"hljs-keyword\">new</span> Country(<span class=\"hljs-string\">'FR'</span>, <span class=\"hljs-string\">'France'</span>),\n            <span class=\"hljs-keyword\">new</span> Country(<span class=\"hljs-string\">'GR'</span>, <span class=\"hljs-string\">'Germany'</span>),\n            <span class=\"hljs-keyword\">new</span> Country(<span class=\"hljs-string\">'SP'</span>, <span class=\"hljs-string\">'Spain'</span>)\n        ]),\n        chosenCountries : ko.observableArray([<span class=\"hljs-string\">'GR'</span>]) <span class=\"hljs-comment\">// Initially, only Germany is selected</span>\n    };\n\n    ko.applyBindings(viewModel)\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"uniq-name-bajnding\"><a name=\"uniq-name-bajnding\" class=\"h-link\" href=\"#\"></a>uniqName байндинг</h2>\n<p>Это самый редко используемый байндинг. Он обеспечивает уверенность в том, что элемент, на котором он применяется, имеет уникальный атрибут <strong>name</strong>. Если DOM элемент не имеет атрибута name, то для него будет сгенерировано уникальное значение. Принимает всего один параметр - <strong>true</strong>. Используется наверно только в следующих случаях:</p>\n<ul>\n<li>другая библиотека использует уникальные имена тегов для реализации своей логики. Например, <a href=\"http://docs.jquery.com/Plugins/validation\" target=\"_blank\" rel=\"noopener nofollow\">jQuery Validation</a> проверяет только те элементы, у которых есть атрибут <em>name</em>.</li>\n<li>IE6 не позволяет отмечать радио кнопки, которые не имеют имени. Это логично, ибо при помощи имени эти элементы группируются.</li>\n</ul>\n<p>Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"value: someModelProperty, uniqueName: true\"</span> /&gt;</span>\n</code></pre>\n<p><strong>По материалам:</strong> <a href=\"http://knockoutjs.com/\" target=\"_blank\" rel=\"noopener nofollow\">KnockOut</a></p>","headings":[["click-bajnding","Click байндинг"],["event-bajnding","Event байндинг"],["submit-bajnding","Submit байндинг"],["enable-disable-bajndingi","Enable/Disable байндинги"],["value-bajnding","Value байндинг"],["hasfocus-bajnding","hasfocus байндинг"],["checked-bajnding","Checked байндинг"],["options-bajnding","options байндинг"],["selected-options-bajnding","selectedOptions байндинг"],["uniq-name-bajnding","uniqName байндинг"]],"id":"obrabotka-sobytij-i-rabota-s-polyami-form-v-knockout"}