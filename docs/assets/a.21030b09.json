{"title":"Управление правами доступа в Expressjs при помощи CASL","summary":"Некоторое время назад я писал о возможностях библеотеки CASL, с помощью\nкоторой можно организовать проверку прав доступа в любом приложении на базе\nJavaScript. В этой статье я хочу рассказать о том как интегрировать CASL в\nExpressjs API.\n","author":"sstotskyi","categories":["frontend","important"],"createdAt":"2018-06-22T09:17:00.000Z","meta":{"keywords":["права доступа","javascript","nodejs","casl","expressjs"]},"alias":"upravlenie-pravami-dostupa-v-expressjs-pri-pomoschi-casl","content":"<p><img src=\"/media/assets/casl-expressjs-min.png\" alt=\"CASL express права доступа\" title=\"CASL express права доступа\" width=\"800\" height=\"383\"></p>\n<p>В современных приложениях, которые поддерживают аутентификацию, мы часто хотим изменить то, что видимо для пользователя, в зависимости от его роли. Например, гостевой пользователь может видеть статью, но только зарегистрированный пользователь или администратор видит кнопку для удаления этой статьи.</p>\n<p>Управление этой видимостью может стать полным кошмаром с увеличением количества ролей. Вероятно, вы уже писали или видели код вроде этого:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (user.role === ADMIN || user.auth &amp;&amp; post.author === user.id) {\n  res.send(post)\n} <span class=\"hljs-keyword\">else</span> {\n  res.status(<span class=\"hljs-number\">403</span>).send({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'You are not allowed to do this!'</span> })\n}\n</code></pre>\n<p>Такой код распространяется по приложению и обычно становится большой проблемой, когда заказчик изменяет требования или просит добавить дополнительные роли. В конце концов вам нужно пройти все такие <em>if</em>-s и добавить дополнительные проверки.</p>\n<p>В этой статье я покажу альтернативный способ реализации управления разрешениями в <a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener nofollow\">Expressjs</a> API с помощью библиотеки, которая называется <a href=\"https://github.com/stalniy/casl\" target=\"_blank\" rel=\"noopener nofollow\">CASL</a>. Она намного упрощает управление правами доступа и позволяет переписать предыдущий пример на что-то вроде этого:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (req.ability.can(<span class=\"hljs-string\">'read'</span>, post)) {\n  res.send(post)\n} <span class=\"hljs-keyword\">else</span> {\n  res.status(<span class=\"hljs-number\">403</span>).send({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'You are not allowed to do this!'</span> })\n}\n</code></pre>\n<p><strong>Впервые слышете о CASL?</strong> Рекомендую прочесть <app-link to=\"frontend\" params=\"{&quot;id&quot;:&quot;chto-takoe-casl-ili-kak-vnedrit-proverku-prav-dostupa-v-vashe-prilozhenie&quot;}\">Что такое CASL?</app-link></p>\n<h2 id=\"demo-prilozhenie\"><a name=\"demo-prilozhenie\" class=\"h-link\" href=\"#\"></a>Демо-приложение</h2>\n<p>В качестве тестового приложения я сделал достаточно простой <a href=\"https://github.com/stalniy/casl-express-example\" target=\"_blank\" rel=\"noopener nofollow\">REST API для блога</a>. Приложение состоит из 3 сущностей (User, Post и Comment) и 4 модулей (по одному модулю для каждой сущности и еще один - для проверки авторизации). Все модули можно найти в папке <em>src/modules</em>. Приложение использует <a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"noopener nofollow\">mongoose</a> модели, аутентификацию <a href=\"http://www.passportjs.org/\" target=\"_blank\" rel=\"noopener nofollow\">passportjs</a> и авторизацию (или проверку прав доступа) на базе CASL. При помощи API, пользователь может:</p>\n<ul>\n<li>читать все статьи и комментарии</li>\n<li>создавать пользователя (т.е., регистрироваться)</li>\n<li>управлять собственными статьями (создавать, редактировать, удалять), если авторизован</li>\n<li>обновлять персональную информацию, если авторизован</li>\n<li>управлять собственными комментариями, если авторизован</li>\n</ul>\n<p>Чтобы установить это приложение, просто склонируйте его из <a href=\"https://github.com/stalniy/casl-express-example\" target=\"_blank\" rel=\"noopener nofollow\">github</a> и запустите <em>npm install</em> и <em>npm start</em>. Также нужно запустить MongoDB сервер, приложение подключается к <em>mongodb://localhost:27017/blog</em>. После того, как все будет готово, можно немного поиграться, а чтобы было веселее, заимпортите базовые данные с папки <em>db/</em>:</p>\n<pre><code class=\"hljs language-bash\">mongorestore ./db\n</code></pre>\n<p>В качестве альтернативы, Вы можете следовать инструкциям в <a href=\"https://github.com/stalniy/casl-express-example\" target=\"_blank\" rel=\"noopener nofollow\">README файле проекта</a> или использовать <a href=\"https://www.getpostman.com/collections/a39c622e1c9401e32c51\" target=\"_blank\" rel=\"noopener nofollow\">мою Postman коллекцию</a>.</p>\n<h2 id=\"v-chem-fishka\"><a name=\"v-chem-fishka\" class=\"h-link\" href=\"#\"></a>В чем фишка?</h2>\n<p>Во-первых, большим плюсом CASL является, то что он позволяет определить права доступа в одном месте, для всех пользователей! Во-вторых, CASL концентрирует внимание не на том кем является пользователь, а на том что он может делать, т.е. на его возможностях. Это позволяет распределять эти возможности разным ролям или группам пользователей без лишних усилий. Это значит, что мы можем прописать права доступа для авторизованных и не авторизованных пользователей:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> { AbilityBuilder, Ability } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'casl'</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineAbilitiesFor</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { rules, can } = AbilityBuilder.extract()\n\n  can(<span class=\"hljs-string\">'read'</span>, [<span class=\"hljs-string\">'Post'</span>, <span class=\"hljs-string\">'Comment'</span>])\n  can(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'User'</span>)\n\n  <span class=\"hljs-keyword\">if</span> (user) {\n    can([<span class=\"hljs-string\">'update'</span>, <span class=\"hljs-string\">'delete'</span>, <span class=\"hljs-string\">'create'</span>], [<span class=\"hljs-string\">'Post'</span>, <span class=\"hljs-string\">'Comment'</span>], { <span class=\"hljs-attr\">author</span>: user._id })\n    can([<span class=\"hljs-string\">'read'</span>, <span class=\"hljs-string\">'update'</span>], <span class=\"hljs-string\">'User'</span>, { <span class=\"hljs-attr\">_id</span>: user._id })\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Ability(rules)\n}\n\n<span class=\"hljs-keyword\">const</span> ANONYMOUS_ABILITY = defineAbilitiesFor(<span class=\"hljs-literal\">null</span>)\n\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createAbilities</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  req.ability = req.user.email ? defineAbilitiesFor(req.user) : ANONYMOUS_ABILITY\n  next()\n}\n</code></pre>\n<p>Давайте теперь разберем код написанный выше. В функции <em>defineAbilitiesFor(user)</em> создается экземпляр <em>AbilityBuilder</em>-a, его метод extract разбивает этот объект на 2 простые функции <em>can</em> и <em>cannot</em> и массив <em>rules</em> (в данном коде cannot не используется). Далее при помощи вызовов функции <em>can</em> мы определяем, что пользователь может делать: первым аргументом передает действие (или массив действий), вторым аргументом - тип объекта над которым проводится действие (или массив типов) и третьим необязательным аргументом можно передать объект условий. Объект условий используется при проверке прав доступа на экземпляре класса, т.е. он проверяет равняется ли свойство <em>author</em> объекта <em>post user._id</em>, если не равняется, то вернется <em>false</em>, в противном случае <em>true</em>. Для большей наглядности приведу пример:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Post is a mongoose model</span>\n<span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">await</span> Post.findOne()\n<span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> User.findOne()\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbilitiesFor(user)\n\n<span class=\"hljs-built_in\">console</span>.log(ability.can(<span class=\"hljs-string\">'update'</span>, post)) <span class=\"hljs-comment\">// если post.author === user._id, то вернется true</span>\n</code></pre>\n<p>Далее при помощи <em>if (user)</em> мы определяем права доступа для авторизованного пользователя (если пользователь не авторизован, то мы не знаем кто он и не имеем объекта с информацией о пользователе). В конце возвращаем экземпляр класса <em>Ability</em>, с помощь которого мы и будем проверять права доступа.</p>\n<p>Далее создаем константу <em>ANONYMOUS_ABILITY</em>, она является инстансом <em>Ability</em> класса для не авторизованных пользователей. В конце, экспортируем express middleware, которое отвечает за создание <em>Ability</em> экземпляра для конкретного пользователя.</p>\n<h2 id=\"testiruem-api\"><a name=\"testiruem-api\" class=\"h-link\" href=\"#\"></a>Тестируем API</h2>\n<p>Давайте протестируем, что у нас получилось используя <a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener nofollow\">Postman</a>. Для начала нужно получить accessToken, для этого отправьте запрос</p>\n<pre><code class=\"hljs language-bash\">POST /session\n\n{\n  <span class=\"hljs-string\">\"session\"</span>: {\n    <span class=\"hljs-string\">\"email\"</span>: <span class=\"hljs-string\">\"casl@medium.com\"</span>,\n    <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"password\"</span>\n  }\n}\n</code></pre>\n<p>В ответ получите что-то вроде этого:</p>\n<pre><code class=\"hljs language-javascript\">{ <span class=\"hljs-string\">\"accessToken\"</span>: <span class=\"hljs-string\">\"....\"</span> }\n</code></pre>\n<p>Этот токен нужно вставить в <em>Authorization header</em> и отправлять со всеми последующими запросами.</p>\n<p>Теперь давайте попробуем обновить статью</p>\n<pre><code class=\"hljs language-javascript\">PATCH http:<span class=\"hljs-comment\">//localhost:3030/posts/597649a88679237e6f411ae6</span>\n\n{\n  <span class=\"hljs-string\">\"post\"</span>: {\n    <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"[UPDATED] my post title\"</span>\n  }\n}\n\n<span class=\"hljs-number\">200</span> Ok\n\n{\n  <span class=\"hljs-string\">\"post\"</span>: {\n    <span class=\"hljs-string\">\"_id\"</span>: <span class=\"hljs-string\">\"597649a88679237e6f411ae6\"</span>,\n    <span class=\"hljs-string\">\"updatedAt\"</span>: <span class=\"hljs-string\">\"2017-07-24T19:53:09.693Z\"</span>,\n    <span class=\"hljs-string\">\"createdAt\"</span>: <span class=\"hljs-string\">\"2017-07-24T19:25:28.766Z\"</span>,\n    <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"[UPDATED] my post title\"</span>,\n    <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\"very long and interesting text\"</span>,\n    <span class=\"hljs-string\">\"author\"</span>: <span class=\"hljs-string\">\"597648b99d24c87e51aecec3\"</span>,\n    <span class=\"hljs-string\">\"__v\"</span>: <span class=\"hljs-number\">0</span>\n  }\n}\n</code></pre>\n<p>Все хорошо работает. А что если обновим чужую статью?</p>\n<pre><code class=\"hljs language-javascript\">PATCH http:<span class=\"hljs-comment\">//localhost:3030/posts/59761ba80203fb638e9bd85c</span>\n\n{\n  <span class=\"hljs-string\">\"post\"</span>: {\n    <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"[EVIL ACTION] my post title\"</span>\n  }\n}\n\n<span class=\"hljs-number\">403</span> Ok\n\n{\n  <span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-string\">\"forbidden\"</span>,\n  <span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"Cannot execute \\\"update\\\" on \\\"Post\\\"\"</span>\n}\n</code></pre>\n<p>Получили ошибку! Как и ожидалось :)</p>\n<p>А теперь давайте представим, что для авторов нашего блога мы хотим создать страницу, где они смогут видеть все посты которые они могут обновлять. С точки зрения конкретной логики это несложно, просто нужно выбрать все статьи в которых <em>author</em> равняется <em>user._id</em>. Но мы ведь уже прописали такую логику при помощи CASL, было бы очень удобно получить все такие статьи из базы без написания лишних запросов, да и если права поменяются, то придется менять и запрос - лишняя работа :).</p>\n<p>К счастью, CASL имеет дополнительный npm пакет - <a href=\"https://github.com/stalniy/casl/tree/master/packages/casl-mongoose\" target=\"_blank\" rel=\"noopener nofollow\">@casl/mongoose</a>. Этот пакет позволяет запрашивать записи из MongoDB в соответствии с определенными правами доступа! Для mongoose этот пакет предоставляет плагин, который добавляет метод <em>accessibleBy(ability, action)</em> в модельку. С помощью этого метода мы и будем запрашивать записи из базы (больше об этом читайте <a href=\"https://stalniy.github.io/casl/abilities/database/integration/2017/07/22/database-integration.html\" title=\"CASL Mongoose\" target=\"_blank\" rel=\"noopener nofollow\">в документации CASL</a> и README файле пакета).</p>\n<p>Это именно, то как реализован hander для /posts (я также добавил возможность указывать, для какого действия нужно проверять права доступа):</p>\n<pre><code class=\"hljs language-php\">Post.accessibleBy(req.ability, req.query.action)\n</code></pre>\n<p>Так вот, для того чтобы решить задачу описанную ранее, достаточно добавить параметр <em>action=update</em>:</p>\n<pre><code class=\"hljs language-javascript\">GET http:<span class=\"hljs-comment\">//localhost:3030/posts?action=update</span>\n\n<span class=\"hljs-number\">200</span> Ok\n{\n  <span class=\"hljs-string\">\"posts\"</span>: [\n    {\n      <span class=\"hljs-string\">\"_id\"</span>: <span class=\"hljs-string\">\"597649a88679237e6f411ae6\"</span>,\n      <span class=\"hljs-string\">\"updatedAt\"</span>: <span class=\"hljs-string\">\"2017-07-24T19:53:09.693Z\"</span>,\n      <span class=\"hljs-string\">\"createdAt\"</span>: <span class=\"hljs-string\">\"2017-07-24T19:25:28.766Z\"</span>,\n      <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"[UPDATED] my post title\"</span>,\n      <span class=\"hljs-string\">\"text\"</span>: <span class=\"hljs-string\">\"very long and interesting text\"</span>,\n      <span class=\"hljs-string\">\"author\"</span>: <span class=\"hljs-string\">\"597648b99d24c87e51aecec3\"</span>,\n      <span class=\"hljs-string\">\"__v\"</span>: <span class=\"hljs-number\">0</span>\n    }\n  ]\n}\n</code></pre>\n<p><strong>В заключение</strong></p>\n<p>Благодаря CASL у нас есть действительно хороший способ управления правами доступа. Я более чем уверен, что конструкция типа</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (ability.can(<span class=\"hljs-string\">'read'</span>, post)) ...\n</code></pre>\n<p>намного понятнее и проще чем</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (user.role === ADMIN || user.auth &amp;&amp; todo.author === user.id) ...\n</code></pre>\n<p>При помощи CASL мы можем быть более четкими в отношении того, что делает наш код. Кроме того, такие проверки, безусловно, будут использоваться в другом месте нашего приложения, и именно здесь CASL поможет избежать дублирования кода.</p>\n<p>Я надеюсь, Вам было на столько же интересно читать о CASL, на сколько мне было интересно его создавать. <a href=\"https://stalniy.github.io/casl/\" target=\"_blank\" rel=\"noopener nofollow\">CASL имеет довольно хорошую документацию</a>, Вы наверняка найдете там много полезной информации, но не стесняйтесь задавать вопросы если что в <a href=\"https://gitter.im/stalniy-casl/casl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" target=\"_blank\" rel=\"noopener nofollow\">gitter чате</a> и добавить звездочку на <a href=\"https://github.com/stalniy/casl\" target=\"_blank\" rel=\"noopener nofollow\">гитхабе</a> ;)</p>\n<p><strong>P.S.</strong>: оригинальная статья была опубликована на <a href=\"https://medium.com/dailyjs/authorization-with-casl-in-express-app-d94eb2e2b73b\" target=\"_blank\" rel=\"noopener nofollow\">Medium.com</a></p>","headings":[["demo-prilozhenie","Демо-приложение"],["v-chem-fishka","В чем фишка?"],["testiruem-api","Тестируем API"]],"id":"upravlenie-pravami-dostupa-v-expressjs-pri-pomoschi-casl"}