{"title":"Минификация JavaScript в Magento 1.x","summary":"В Magento есть несколько встроенных возможностей по оптимизации клиентской\nчасти сайта. В данной статье мы научимся не только объединять все JavaScript\nфайлы в один, а и минифицировать конечный файл!\n","author":"sstotskyi","categories":["frontend","important"],"createdAt":"2017-05-11T11:00:00.000Z","meta":{"keywords":["magento","javascript","оптимизация","скорость загрузки"]},"alias":"minifikatsiya-javascript-v-magento-1x","content":"<p>Давайте поразмыслим, что нужно сделать чтобы увеличить скорость загрузки страницы:</p>\n<ol>\n<li>Уменьшить количество запросов на сервер.</li>\n<li>Уменьшить размер страницы.</li>\n<li><app-link to=\"page\" params=\"{&quot;id&quot;:&quot;linux/show-104-vklyuchaem-http-keshirovanie-v-nginx-i-apache2&quot;}\">Включить HTTP кэширование</app-link> на веб-сервере.</li>\n</ol>\n<p>Для начала замеряем исходную ситуацию. Магазин без каких либо оптимизаций:</p>\n<p><img src=\"/media/assets/magento-js-without-merge.png\" alt=\"Magento без оптимизации JavaScript\" width=\"846\" height=\"292\"></p>\n<p>К счастью в Magento есть настройки, которые могут уменьшить количество запросов на сервер при помощи объединения JavaScript (в данном случае их 194!). Давайте разберемся как это сделать.</p>\n<h2 id=\"obedinyaem-java-script-fajly\"><a name=\"obedinyaem-java-script-fajly\" class=\"h-link\" href=\"#\"></a>Объединяем JavaScript файлы</h2>\n<p>Все что нужно сделать - это зайти в настойки и установить флажок с &quot;Нет&quot; на &quot;Да&quot;. Значит открывайте админку и в меню перейдите в Система &gt; Конфигурация &gt; Расширенные &gt; Для разработчика &gt; Настройки JavaScript и установите &quot;Объединить JavaScript файлы&quot; в значение &quot;Да&quot;.</p>\n<p><img src=\"/media/assets/magento-js.png\" alt=\"Объединения JavaScript в Magento\" width=\"1025\" height=\"166\"></p>\n<p>Потом обязательно проверьте консоль через Developer Tools, чтобы убедится, что все хорошо и в Вашем JavaScript коде нет синтаксических ошибок (чтобы избежать проблем, будьте внимательны при написание js кода, ставьте точки с запятыми где нужно).</p>\n<p>В случае когда будет нужно внести правки в скрипты, то в админке откройте страницу Система Управление Кэшем и нажмите кнопку &quot;Очистить кэш JavaScript/CSS&quot;.</p>\n<p><img src=\"/media/assets/magento-js-cache.png\" alt=\"Magento удалить JavaScript кэш\" width=\"782\" height=\"247\"></p>\n<p>Обычно после этого я захожу на главную страницу магазина, чтобы Magento собрал заново все файлы в один. Сборка может занят некоторое время (5-10 секунд) и лучше подождать самому, нежели это сделает клиент магазина :). Во всех последующих случаях файл берется с кэша.</p>\n<p><img src=\"/media/assets/magento-js-merged.png\" alt=\"Magento результаты загрузки страницы для объединенных файлов\" width=\"912\" height=\"221\"></p>\n<p>Такое простое изменение позволило сэкономить до 300 мс во время загрузки сайта (в конкретном случае на 250 мс)! Так же уменьшилось количество запросов на сервер до 159. Давайте не будем останавливается на этом.</p>\n<h2 id=\"minificziruem-obedinennyj-java-script\"><a name=\"minificziruem-obedinennyj-java-script\" class=\"h-link\" href=\"#\"></a>Минифицируем объединенный JavaScript</h2>\n<p>Процесс объединения файлов проходит через класс Mage_Core_Model_Design_Package. В нем есть метод getMergedJsUrl, именно его я и собираюсь перезаписать.</p>\n<p>Во первых, нужно создать свой класс в отдельном модуле, который наследуется от Mage_Core_Model_Design_Package, назовем его FI_Optimisation_Model_Design_Package:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_Optimisation_Model_Design_Package</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Mage_Core_Model_Design_Package</span>\n</span>{\n}\n</code></pre>\n<p>Потом <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;php_and_somethings/show-63-magento-modeli-ot-a-do-ya-sobytiya-i-rewrite-klassov&quot;}\">перезапишем Magento класс своим при помощи rewrite правил</app-link>. Для этого в config.xml модуля прописываем:</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">config</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- .... --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">global</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">models</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fi_optimisation</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">class</span>&gt;</span>FI_Optimisation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">class</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fi_optimisation</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">core</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rewrite</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">design_package</span>&gt;</span>FI_Optimisation_Model_Design_Package<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">design_package</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rewrite</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">core</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">models</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">global</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- .... --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">config</span>&gt;</span>\n</code></pre>\n<p>Таким образом я указал, что нужно использовать мой класс, а не стандартный в Magento. Чистите кэш и идем дальше.</p>\n<p>Как я уже писал выше, нужно переопределить метод getMergedJsUrl. Т.е., сначала объединяем все файлы, а уже потом их минифицируем. Минификация может занять, некоторое время, поэтому я буду это делать в отдельном процессе, при помощи функции exec в PHP. Пока отдельный процесс работает, я не хочу блокировать работу пользователя с магазином, поэтому в этот период буду отдавать просто объединенный файл.</p>\n<p>Я провел достаточно много времени в поисках минификатора написанного на PHP, но все они либо имеют много зависимостей, которые не хочется тащить в проект, либо работают нестабильно. Поэтому для минификации я буду использовать <a href=\"https://www.npmjs.com/package/uglify-js\" target=\"_blank\" rel=\"noopener nofollow\">uglifyjs</a>, который установлю глобально при помощи <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\" target=\"_blank\" rel=\"noopener nofollow\">npm</a>.</p>\n<pre><code class=\"hljs language-bash\">$ npm install -g uglify-js\n</code></pre>\n<p>Вы же можете использовать то, что больше нравится Вам.</p>\n<p>Добавляем логику в класс, который создали ранее:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Freaks_Ruba4ok_Model_Design_Package</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Mage_Core_Model_Design_Package</span>\n</span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMergedJsUrl</span><span class=\"hljs-params\">($files)</span>\n    </span>{\n        $url = <span class=\"hljs-keyword\">parent</span>::getMergedJsUrl($files);\n\n        <span class=\"hljs-keyword\">if</span> (!$url) {\n            <span class=\"hljs-keyword\">return</span> $url;\n        }\n\n        $minUrl = str_replace(<span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.min.js'</span>, $url);\n        $minPath = str_replace(Mage::getBaseUrl(<span class=\"hljs-string\">'media'</span>), Mage::getBaseDir(<span class=\"hljs-string\">'media'</span>) . DS, $minUrl);\n\n        <span class=\"hljs-keyword\">if</span> (!file_exists($minPath)) {\n            <span class=\"hljs-keyword\">$this</span>-&gt;_minifyJs(str_replace(<span class=\"hljs-string\">'.min.js'</span>, <span class=\"hljs-string\">'.js'</span>, $minPath), $minPath);\n            <span class=\"hljs-keyword\">return</span> $url;\n        }\n\n        <span class=\"hljs-keyword\">return</span> filesize($minPath) === <span class=\"hljs-number\">0</span> ? $url : $minUrl;\n    }\n\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_minifyJs</span><span class=\"hljs-params\">($originalPath, $path)</span>\n    </span>{\n        file_put_contents($path, <span class=\"hljs-string\">''</span>);\n        $binPath = <span class=\"hljs-string\">'uglifyjs'</span>;\n        $uglify = $binPath . <span class=\"hljs-string\">' '</span> . escapeshellarg($originalPath)\n            . <span class=\"hljs-string\">' --compress --screw-ie8 '</span>\n            . <span class=\"hljs-string\">' -o '</span> . escapeshellarg($path)\n            . <span class=\"hljs-string\">' &gt; /dev/null 2&gt;&amp;1 &amp;'</span>;\n\n        exec($uglify);\n    }\n}\n</code></pre>\n<p>Давайте разберемся, что здесь происходит.</p>\n<p>Метод getMergedJsUrl вызывает, родительскую логику для объединения JavaScript в один файл. Потом проверяется если URL, который был возвращен пустой, то его же и возвращаем (скорее всего объединение выключено). В противном случае, создаем URL и путь к минифицированному файлу, если такого файла нет, нужно запустить процесс по уменьшению размера. В случае когда он есть, нужно проверить пустой ли он, если пустой значит процесс не закончился и нужно вернуть обычный файл, а если не пустой - значит отдаем этот же файл.</p>\n<p>В методе _minifyJs, я использовал &quot;&amp;&quot; для того, чтобы PHP не ждал завершения работы этого процесса. На сколько мне известно этот метод не будет работать на Windows серверах, но благо большинство людей используют Linux :) Все ошибки и информация по процессу минификации отправляется в &quot;никуда&quot;, так как нет нужды это куда либо писать. Более <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;linux/show-50-uchimsya-programmirovat-v-shell-obrabotka-oshibok&quot;}\">детально о работе с ошибками в Shell</app-link> я писал в другой статье.</p>\n<p>После замеров получилось, что удалось сэкономить еще до 100 мс (в конкретном случае на 70 мс).</p>\n<p><img src=\"/media/assets/magento-js-merged-min.png\" alt=\"Magento результаты загрузки страницы для объединенных и минифицированных файлов\" width=\"977\" height=\"244\"></p>\n<h2 id=\"zaklyuchenie\"><a name=\"zaklyuchenie\" class=\"h-link\" href=\"#\"></a>Заключение</h2>\n<p>Конечный результат очень радует, потому что получилось оптимизировать страницу аж на целых 350 мс, это очень много!</p>\n<p>Аналогичный процесс можно провести и для CSS файлов и тогда сайт будет грузится еще быстрее, но это уже совсем другая тема :)</p>","headings":[["obedinyaem-java-script-fajly","Объединяем JavaScript файлы"],["minificziruem-obedinennyj-java-script","Минифицируем объединенный JavaScript"],["zaklyuchenie","Заключение"]],"id":"minifikatsiya-javascript-v-magento-1x"}