{"title":"Учимся программировать в Shell: обработка ошибок","summary":"Разница между хорошо написанной программой и плохо - это возможность\n\"справляться\" с непредвиденными ситуациями. Как мы уже знаем любая хорошо\nнаписанная программа возвращает exit-статус операционной системе после\nокончания работы. Для написания правильных программ нужно всегда делать\nпроверку exit-статуса, особенно в тех случаях, когда что-то может пойти\nкардинально и невозвратимо не в ту сторону\n","author":"sstotskyi","categories":["devops","important"],"createdAt":"2011-10-19T21:24:00.000Z","meta":{"keywords":["linux","Bash","ошибки"]},"alias":"uchimsya-programmirovat-v-shell-obrabotka-oshibok","content":"<p>Разница между хорошо написанной программой и плохо - это возможность &quot;справляться&quot; с непредвиденными ситуациями. Как мы уже знаем любая хорошо написанная программа возвращает <em>exit-статус</em> операционной системе после окончания работы. Для написания правильных программ нужно всегда делать проверку <em>exit-статуса</em>, особенно в тех случаях, когда что-то может пойти кардинально и невозвратимо не в ту сторону. Вот пример очень плохой программы</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Example of a really bad idea</span>\n\n<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$some_directory</span>\nrm *\n</code></pre>\n<p>На первый взгляд все вроде хорошо. Заходим в какую-то директорию и удаляем из нее все файлы. НО, что если по каким-то причинам этот каталог не будет существовать? Тогда наш скрипт удалит все файлы из текущей рабочей директории. А это плохо!</p>\n<h2 id=\"proverka-exit-statusa\"><a name=\"proverka-exit-statusa\" class=\"h-link\" href=\"#\"></a>Проверка exit-статуса</h2>\n<p>Существует несколько способов проверить <em>exit-статус</em>. Одним из них является проверка переменной окружения <strong>$?</strong>, которая возвращает <em>exit-статус</em> последней выполненной команды. Например</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/tmp$ <span class=\"hljs-literal\">true</span>; <span class=\"hljs-built_in\">echo</span> $?\n0\nenej@linux:~/tmp$ <span class=\"hljs-literal\">false</span>; <span class=\"hljs-built_in\">echo</span> $?\n1\n</code></pre>\n<p>Да-да, в <strong>Linux</strong> есть такие команды как <strong>true</strong> и <strong>false</strong>. Эти команды ничего не делают, просто возвращают соответственный <em>exit-статус</em> и мы уже знаем какой. Обладая новыми знаниями давайте перепишем наш скрипт</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Check the exit status</span>\n\n<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$some_directory</span>\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"$?\"</span> = <span class=\"hljs-string\">\"0\"</span> ]; <span class=\"hljs-keyword\">then</span>\n    rm *\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Cannot change directory!\"</span> 1&gt;&amp;2\n    <span class=\"hljs-built_in\">exit</span> 1\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<p>Здесь можно увидеть еще одну незнакомую конструкцию <strong>1&gt;&amp;2</strong> - она означает переадресацию данных на стандартную ошибку (standard error). Теперь скрипт проверяет <em>exit-статус</em> команды <strong>cd</strong> и ничего страшного не произойдет, если он вдруг будет не нулевым.</p>\n<p>Это конечно же, рабочий вариант, но его можно переписать более изящно</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># A better way</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$some_directory</span>; <span class=\"hljs-keyword\">then</span>\n    rm *\n<span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Could not change directory! Aborting.\"</span> 1&gt;&amp;2\n    <span class=\"hljs-built_in\">exit</span> 1\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<p>Но а для гурманов и любителей вкусняшек</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$some_directory</span> &amp;&amp; rm *\n</code></pre>\n<h2 id=\"and-i-or-stroki\"><a name=\"and-i-or-stroki\" class=\"h-link\" href=\"#\"></a>And и OR строки</h2>\n<p>Предыдущий пример в мэнуале по <strong>Bash</strong> имеет даже свое название - <em>AND строка</em>. Выполнение команд, можно объеденять в AND и/или OR строки. Например</p>\n<pre><code class=\"hljs language-bash\">command1 &amp;&amp; command2\n</code></pre>\n<p>command2 выполнится только при условии, если command1 вернет нулевой <em>exit-статус</em> или</p>\n<pre><code class=\"hljs language-bash\">command1 || command2\n</code></pre>\n<p>command2 выполнится только при условии, если command1 вернет не нулевой <em>exit-статус.</em> Посмотрим на простом примере</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/tmp$ <span class=\"hljs-literal\">true</span> || <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'echo executed'</span>;\nenej@linux:~/tmp$ <span class=\"hljs-literal\">false</span> || <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'echo executed'</span>;\n<span class=\"hljs-built_in\">echo</span> executed\nenej@linux:~/tmp$ <span class=\"hljs-literal\">true</span> &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'echo executed'</span>;\n<span class=\"hljs-built_in\">echo</span> executed\nenej@linux:~/tmp$ <span class=\"hljs-literal\">false</span> &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'echo executed'</span>;\n</code></pre>\n<p><em>Exit-статус</em> и фишки вроде выполнения строки команд - это конечно хорошо, но что если в нашем пример выше переменная <strong>some_directory</strong> будет пустой? Тогда <strong>Bash</strong> подумает, что <strong>cd</strong> запускается без параметров и поменяет текущую директорию на рабочий каталог пользователя, который запустил скрипт и удалит там все файлы. А это совсем как плохо! По-этому проверяйте не только выполнение команд, но и переменные, которые вы им передаете.</p>\n<h2 id=\"error-exit-funkcziya\"><a name=\"error-exit-funkcziya\" class=\"h-link\" href=\"#\"></a>Error exit функция</h2>\n<p>При написании скриптов хорошим тоном является создание функции отвечающей за обработку ошибку (error handler). Перепишем наш скрипт с учетом этого</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># An error exit function</span>\n\n<span class=\"hljs-keyword\">function</span> error_exit {\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span> 1&gt;&amp;2\n  <span class=\"hljs-built_in\">exit</span> 1\n}\n\n<span class=\"hljs-comment\"># Using error_exit</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$some_directory</span>; <span class=\"hljs-keyword\">then</span>\n  rm *\n<span class=\"hljs-keyword\">else</span>\n  error_exit <span class=\"hljs-string\">\"Cannot change directory!  Aborting.\"</span>\n<span class=\"hljs-keyword\">fi</span>\n</code></pre>\n<p>Теперь все ошибки выводим при помощи <strong>error_exit</strong> функции, в данном случае она просто выводит текст ошибки. Будет полезно немного улучшить эту функцию добавив имя файла в котором произошла ошибка (это понадобится, когда ваш скрипт будет состоять более чем из одного файла), а также номер строки в которой она произошла (номер строки хранится в переменной окружения <em>LINENO).</em> Напишем простой пример использования</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\">#!/bin/bash</span>\n\nPROGNAME=$(basename $<span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">error_exit</span> </span>{\n  <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"${PROGNAME}: ${1:-\"</span>Unknown Error<span class=\"hljs-string\">\"}\"</span> <span class=\"hljs-number\">1</span>&gt;&amp;<span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">exit</span> <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Example of error with line number and message\"</span>\nerror_exit <span class=\"hljs-string\">\"$LINENO: An error has occurred.\"</span>\n</code></pre>\n<p>Как видно из кода, если не передать текст ошибки в функцию, то будет использоваться значение по умолчанию - <em>Unknow error</em>.</p>\n<p>Никогда не забывайте обрабатывать ошибки в своих программах!</p>\n<p>По мотивам <a href=\"http://linuxcommand.org\" target=\"_blank\" rel=\"noopener nofollow\">http://linuxcommand.org</a></p>","headings":[["proverka-exit-statusa","Проверка exit-статуса"],["and-i-or-stroki","And и OR строки"],["error-exit-funkcziya","Error exit функция"]],"id":"uchimsya-programmirovat-v-shell-obrabotka-oshibok"}