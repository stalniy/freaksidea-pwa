{"title":"Колекционируем данные или учим Doctrine делать multiple insert","summary":"Учим Doctrine делать множественную вставку строк","author":"sstotskyi","categories":["backend","important"],"createdAt":"2011-02-18T15:10:00.000Z","meta":{"keywords":["Doctrine","multiple insert"]},"alias":"kolektsioniruem-dannye-ili-uchim-doctrine-delat-multiple-insert","content":"<p>В моей практике достаточно часто возникает проблема с импортом excel или csv файлов в базу данных. Свои проекты в основном пишу на symfony 1.4 + doctrine 1.2. Конечно же, хочется сделать, чтобы все работало быстро и с минимальными затратами ресурсов.</p>\n<h2 id=\"ideya\"><a name=\"ideya\" class=\"h-link\" href=\"#\"></a>Идея</h2>\n<p>Идея же конечно очень простая - использовать multiple insert. Такие запросы точно поддерживает MySQL-сервер и они я думаю намного быстрее выполняются чем несколько аналогичных по одному.</p>\n<h2 id=\"problemy\"><a name=\"problemy\" class=\"h-link\" href=\"#\"></a>Проблемы</h2>\n<p>К сожалению Doctrine 1.2 не поддерживает вставку множества строк одним запросом. Наверно из-за того, что на любой модели может быть какой-то listener или hook, который не будет выполнен посредством такого запроса. Но все же, есть ситуации, когда это нужно для таблиц, которые не имеют ни listener-ов, ни hook-ов. Понятно, что при импорте не очень то хочется делать 10000 запросов к базе данных. Мне на ум пришло 2 варианта:</p>\n<ul>\n<li>использовать InnoDB таблицы и транзакции</li>\n<li>расширить возможности Doctrine_Query</li>\n</ul>\n<p>В первом все понятно. Предлагаю рассмотреть реализацию второго варианта.</p>\n<h2 id=\"stavim-zadachu\"><a name=\"stavim-zadachu\" class=\"h-link\" href=\"#\"></a>Ставим задачу</h2>\n<p>По щучьему велению по моему хотению хочу:</p>\n<ul>\n<li>запрос должен иметь очередь вставляемых строк</li>\n<li>все строки будут массивами, ключи в которых должны соответствовать полям в базе</li>\n<li>если таблица имеет связь с другими, можно вставлять множество строк в несколько таблиц (2 запроса или больше) и вложенность может быть произвольной</li>\n<li>возможность получить id последних вставленных строк</li>\n</ul>\n<h2 id=\"net-problem\"><a name=\"net-problem\" class=\"h-link\" href=\"#\"></a>Нет проблем</h2>\n<p>Подумаем какие дополнительные атрибуты нужны для класса <em>sjQuery</em>, который будет расширять <em>Doctrine_Query</em></p>\n<ul>\n<li>array <em>$_insert_queue -</em> очередь вставляемых строк. 1 строка - 1 массив, ключи которого соответствуют полям в моделе</li>\n<li>array <em>$_relations_queue -</em> очередь связей для нашей таблицы</li>\n<li>array <em>$_last_insert_ids</em> - id последних вставленных строк</li>\n<li>int <em>$_insert_queue_size</em> - размер очереди</li>\n</ul>\n<p>Реализуем для начала возможность добавлять новые строки в очередь, а также метод, который будет делать запросы в базу данных, то есть открытый api interface</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">weQuery</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Doctrine_Query</span> </span>{\n    <span class=\"hljs-keyword\">protected</span>\n        $_insert_queue_size = <span class=\"hljs-number\">0</span>,\n        $_insert_queue = <span class=\"hljs-keyword\">array</span>(),\n        $_last_insert_ids = <span class=\"hljs-keyword\">array</span>(),\n        $_relations_queue = <span class=\"hljs-keyword\">array</span>();\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">queueSize</span><span class=\"hljs-params\">()</span></span>{\n      <span class=\"hljs-keyword\">return</span> count(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue);\n   }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setQueue</span><span class=\"hljs-params\">(array $queue)</span></span>{\n      <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue = $queue;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n   }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pushToQueue</span><span class=\"hljs-params\">($data)</span></span>{\n      <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue[] = $data;\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n   }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">popFromQueue</span><span class=\"hljs-params\">()</span></span>{\n      array_pop(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n   }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">multipleInsert</span><span class=\"hljs-params\">($tableName)</span></span>{\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue[<span class=\"hljs-number\">0</span>])) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n        }\n        <span class=\"hljs-keyword\">$this</span>-&gt;reset();\n        $table = Doctrine_Core::getTable($tableName);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;prepareInsert($table);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reset</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue = <span class=\"hljs-keyword\">array</span>();\n        <span class=\"hljs-keyword\">$this</span>-&gt;_last_insert_ids = <span class=\"hljs-keyword\">array</span>();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n    }\n.....................................................................\n}\n</code></pre>\n<p>Здесь все просто. После того как все данные собраны вызываем метод <em>multipleInsert</em>, который принимает всего один параметр - это имя модели таблицы.</p>\n<p>Основную работу я решил отдать методу <em>prepareInsert.</em> Познакомимся с ним поближе</p>\n<pre><code class=\"hljs language-php\">..................................................................................\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">prepareInsert</span><span class=\"hljs-params\">(Doctrine_Table $table)</span></span>{\n        $tableName = $table-&gt;getTableName();\n        $data = <span class=\"hljs-keyword\">$this</span>-&gt;prepareQueueValues($table);\n\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;beginTransaction();\n            <span class=\"hljs-comment\">// build the statement</span>\n            $query = <span class=\"hljs-string\">'INSERT INTO '</span> . <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;quoteIdentifier($tableName)\n                . <span class=\"hljs-string\">' ('</span> . implode(<span class=\"hljs-string\">', '</span>, $data[<span class=\"hljs-string\">'fields'</span>]) . <span class=\"hljs-string\">')'</span>\n                . <span class=\"hljs-string\">' VALUES '</span> . implode(<span class=\"hljs-string\">', '</span>, $data[<span class=\"hljs-string\">'values'</span>]);\n\n            $result = <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;exec($query, $data[<span class=\"hljs-string\">'params'</span>]);\n            <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue_size = <span class=\"hljs-keyword\">$this</span>-&gt;queueSize();\n\n            <span class=\"hljs-keyword\">if</span> ($result &amp;&amp; !<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue)) {\n                $result = $result &amp;&amp; <span class=\"hljs-keyword\">$this</span>-&gt;insertRelationDataFor($table);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (!$result) {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Doctrine_Connection_Exception(<span class=\"hljs-string\">\"Failed inserting records in \"</span> . get_class($table));\n            }\n            <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;commit();\n\n            <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue = <span class=\"hljs-keyword\">array</span>();\n            <span class=\"hljs-keyword\">return</span> $result;\n        } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">Exception</span> $e) {\n            <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;rollBack();\n            <span class=\"hljs-keyword\">throw</span> $e;\n        }\n    }\n...........................................................................................\n</code></pre>\n<p>Этот метод сначала вызывает <em>prepareQueueValues</em>, который подготавливает данные для запроса, а также вызывает другой метод, который находит все связи и записывает их в массив <em>$_relations_queue</em>. Рассмотрим эти методы</p>\n<pre><code class=\"hljs language-php\">...........................................................................................\n\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">prepareQueueValues</span><span class=\"hljs-params\">(Doctrine_Table $table)</span> </span>{\n        $relations = <span class=\"hljs-keyword\">array</span>();\n\n        <span class=\"hljs-comment\">// column names are specified as array keys</span>\n        $cols = <span class=\"hljs-keyword\">array</span>();\n        $a = $b = <span class=\"hljs-keyword\">array</span>();\n        $fields = reset(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue);\n        <span class=\"hljs-keyword\">foreach</span> ($fields <span class=\"hljs-keyword\">as</span> $fieldName =&gt; $value) {\n            <span class=\"hljs-keyword\">if</span> (is_array($value) &amp;&amp; $table-&gt;hasRelation($fieldName)) {\n                $relations[] = $fieldName;\n            } <span class=\"hljs-keyword\">else</span> {\n                $cols[] = <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;quoteIdentifier($table-&gt;getColumnName($fieldName));\n                $a[] = <span class=\"hljs-string\">'?'</span>;\n            }\n        }\n\n        $a = <span class=\"hljs-string\">'('</span>.implode(<span class=\"hljs-string\">','</span>, $a).<span class=\"hljs-string\">')'</span>;\n        $b = array_fill(<span class=\"hljs-number\">0</span>, count(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue), $a);\n\n        <span class=\"hljs-keyword\">$this</span>-&gt;prepareRelations($table, $relations);\n        $values = array_map(<span class=\"hljs-string\">'array_values'</span>, <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue);\n        $values = call_user_func_array(<span class=\"hljs-string\">'array_merge'</span>, $values);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">array</span>(\n            <span class=\"hljs-string\">'fields'</span> =&gt; $cols,\n            <span class=\"hljs-string\">'values'</span> =&gt; $b,\n            <span class=\"hljs-string\">'params'</span> =&gt; $values\n        );\n    }\n\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">prepareRelations</span><span class=\"hljs-params\">(Doctrine_Table $table, array $relations)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>($relations)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n        }\n\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue <span class=\"hljs-keyword\">as</span> $k =&gt; &amp;$row) {\n            <span class=\"hljs-keyword\">foreach</span> ($relations <span class=\"hljs-keyword\">as</span> &amp;$relation) {\n                <span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue[$relation][] = $row[$relation];\n                <span class=\"hljs-keyword\">unset</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue[$k][$relation]);\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n    }\n..........................................................................................\n</code></pre>\n<p>Здесь только уточню, что <em>prepareQueueValues</em> возврашает массив з подготовленными данными только для 1 запроса! Все в массиве очереди (<em>$_insert_queue</em>) должны иметь единый формат!!!</p>\n<p>Дальше открываем транзакцию. После выполнения первого запроса, проверяем есть ли у нас связи для вставки, если есть тогда вызываем метод <em>insertRelationDataFor</em>.</p>\n<p>Что же происходит дальше?</p>\n<pre><code class=\"hljs language-php\">...........................................................................................\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getLastInsertIds</span><span class=\"hljs-params\">(Doctrine_Table $table)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_last_insert_ids)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;_last_insert_ids;\n        }\n\n        $last_id = <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;lastInsertId(<span class=\"hljs-string\">'id'</span>);\n        $count = <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue_size;\n        $ids = <span class=\"hljs-keyword\">array</span>();\n\n        <span class=\"hljs-keyword\">if</span> ($count &amp;&amp; $count != <span class=\"hljs-number\">1</span>) {\n            $idFieldName = $table-&gt;getIdentifier();\n            $q = $table-&gt;createQuery(<span class=\"hljs-string\">'ls'</span>)\n                -&gt;select(<span class=\"hljs-string\">'ls.'</span> . $idFieldName . <span class=\"hljs-string\">' as id'</span>)\n                -&gt;where(<span class=\"hljs-string\">'ls.'</span> . $idFieldName . <span class=\"hljs-string\">' &lt;= ?'</span>, $last_id + $count - <span class=\"hljs-number\">1</span>)\n                -&gt;orderBy(<span class=\"hljs-string\">'ls.'</span> . $idFieldName . <span class=\"hljs-string\">' DESC'</span>)\n                -&gt;limit($count);\n            $data = $q-&gt;execute(<span class=\"hljs-keyword\">array</span>(), Doctrine_Core::HYDRATE_SCALAR);\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>($data)) {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Doctrine_Connection_Exception(<span class=\"hljs-string\">\"Failed to get last insert ids for \"</span> . get_class($table) . <span class=\"hljs-string\">\". Before using this method you must execute insert\"</span>);\n            }\n            $i = count($data);\n            $k = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">while</span> ($i--) {\n                $id = $data[$i][<span class=\"hljs-string\">'ls_id'</span>];\n                <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue[$k++][$idFieldName] = $id;\n                $ids[] = $id;\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            $ids[] = $last_id;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;_last_insert_ids = $ids;\n    }\n\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insertRelationDataFor</span><span class=\"hljs-params\">(Doctrine_Table $table)</span> </span>{\n        $ids = <span class=\"hljs-keyword\">$this</span>-&gt;getLastInsertIds($table);\n        $return = <span class=\"hljs-keyword\">true</span>;\n\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue <span class=\"hljs-keyword\">as</span> $relation =&gt; &amp;$value) {\n            $relationObj = $table-&gt;getRelation($relation);\n            $foreignColumn = $relationObj-&gt;getForeignColumnName();\n            $localColumn = $relationObj-&gt;getLocalColumnName();\n\n            <span class=\"hljs-keyword\">foreach</span> ($value <span class=\"hljs-keyword\">as</span> $k =&gt; &amp;$row) {\n                $row = array_values($row);\n                <span class=\"hljs-keyword\">foreach</span> ($row <span class=\"hljs-keyword\">as</span> $i =&gt; &amp;$subRow) {\n                    $subRow[$foreignColumn] = &amp;<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue[$k][$localColumn];\n                }\n            }\n            $value = call_user_func_array(<span class=\"hljs-string\">'array_merge'</span>, $value);\n            $result = Doctrine_Query::create()\n                -&gt;setQueue($value)\n                -&gt;multipleInsert($relationObj-&gt;getClass());\n\n            $return = $return &amp;&amp; $result;\n            <span class=\"hljs-keyword\">if</span> (!$return) {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Doctrine_Relation_Exception(sprintf(\n                    <span class=\"hljs-string\">\"Can not insert relation data (%s) for %s table\"</span>,\n                    $relationObj-&gt;getTable()-&gt;getTableName(),\n                    $table-&gt;getTableName()\n                ));\n            }\n            <span class=\"hljs-keyword\">unset</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue[$relation]);\n        }\n        <span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue = <span class=\"hljs-keyword\">array</span>();\n        <span class=\"hljs-keyword\">return</span> $return;\n    }\n.........................................................................................\n</code></pre>\n<p>Этот метод берет id последних вставленных строк, которые устанавливаются в &quot;правильные&quot; строки массива <em>$_insert_queue</em>. Потом идем по всем связям подготавливаем данные, создаем объект запроса и делаем <em>multipleInsert</em>.</p>\n<p>Если есть проблема - бросаем исключение. Закрываем транзакцию. Вот и все!!!</p>\n<p>Не забываем о самом важном!!! Чтобы Doctrine использовал наш объект для запросов, ему нужно об этом сказать:</p>\n<pre><code class=\"hljs language-php\">$doctrineDbManager-&gt;setAttribute(Doctrine::ATTR_QUERY_CLASS, <span class=\"hljs-string\">'sjQuery'</span>);\n</code></pre>\n<p>Привожу весь код скачать исходники можно <a href=\"https://gist.github.com/stalniy/1dd385d00bb34148d86dd0483468577f\" target=\"_blank\" rel=\"noopener nofollow\">ЗДЕСЬ</a></p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">sjQuery</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Doctrine_Query</span> </span>{\n    <span class=\"hljs-keyword\">protected</span>\n        $_insert_queue_size = <span class=\"hljs-number\">0</span>,\n        $_insert_queue = <span class=\"hljs-keyword\">array</span>(),\n        $_last_insert_ids = <span class=\"hljs-keyword\">array</span>(),\n        $_relations_queue = <span class=\"hljs-keyword\">array</span>();\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">queueSize</span><span class=\"hljs-params\">()</span></span>{\n      <span class=\"hljs-keyword\">return</span> count(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue);\n   }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setQueue</span><span class=\"hljs-params\">(array $queue)</span></span>{\n      <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue = $queue;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n   }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pushToQueue</span><span class=\"hljs-params\">($data)</span></span>{\n      <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue[] = $data;\n\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n   }\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">popFromQueue</span><span class=\"hljs-params\">()</span></span>{\n      array_pop(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n   }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">multipleInsert</span><span class=\"hljs-params\">($tableName)</span></span>{\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue[<span class=\"hljs-number\">0</span>])) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n        }\n        <span class=\"hljs-keyword\">$this</span>-&gt;reset();\n        $table = Doctrine_Core::getTable($tableName);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;prepareInsert($table);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getLastInsertIds</span><span class=\"hljs-params\">(Doctrine_Table $table)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_last_insert_ids)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;_last_insert_ids;\n        }\n\n        $last_id = <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;lastInsertId(<span class=\"hljs-string\">'id'</span>);\n        $count = <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue_size;\n        $ids = <span class=\"hljs-keyword\">array</span>();\n\n        <span class=\"hljs-keyword\">if</span> ($count &amp;&amp; $count != <span class=\"hljs-number\">1</span>) {\n            $idFieldName = $table-&gt;getIdentifier();\n            $q = $table-&gt;createQuery(<span class=\"hljs-string\">'ls'</span>)\n                -&gt;select(<span class=\"hljs-string\">'ls.'</span> . $idFieldName . <span class=\"hljs-string\">' as id'</span>)\n                -&gt;where(<span class=\"hljs-string\">'ls.'</span> . $idFieldName . <span class=\"hljs-string\">' &lt;= ?'</span>, $last_id + $count - <span class=\"hljs-number\">1</span>)\n                -&gt;orderBy(<span class=\"hljs-string\">'ls.'</span> . $idFieldName . <span class=\"hljs-string\">' DESC'</span>)\n                -&gt;limit($count);\n            $data = $q-&gt;execute(<span class=\"hljs-keyword\">array</span>(), Doctrine_Core::HYDRATE_SCALAR);\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>($data)) {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Doctrine_Connection_Exception(<span class=\"hljs-string\">\"Failed to get last insert ids for \"</span> . get_class($table) . <span class=\"hljs-string\">\". Before using this method you must execute insert\"</span>);\n            }\n            $i = count($data);\n            $k = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">while</span> ($i--) {\n                $id = $data[$i][<span class=\"hljs-string\">'ls_id'</span>];\n                <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue[$k++][$idFieldName] = $id;\n                $ids[] = $id;\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            $ids[] = $last_id;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>-&gt;_last_insert_ids = $ids;\n    }\n\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">prepareQueueValues</span><span class=\"hljs-params\">(Doctrine_Table $table)</span> </span>{\n        $relations = <span class=\"hljs-keyword\">array</span>();\n\n        <span class=\"hljs-comment\">// column names are specified as array keys</span>\n        $cols = <span class=\"hljs-keyword\">array</span>();\n        $a = $b = <span class=\"hljs-keyword\">array</span>();\n        $fields = reset(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue);\n        <span class=\"hljs-keyword\">foreach</span> ($fields <span class=\"hljs-keyword\">as</span> $fieldName =&gt; $value) {\n            <span class=\"hljs-keyword\">if</span> (is_array($value) &amp;&amp; $table-&gt;hasRelation($fieldName)) {\n                $relations[] = $fieldName;\n            } <span class=\"hljs-keyword\">else</span> {\n                $cols[] = <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;quoteIdentifier($table-&gt;getColumnName($fieldName));\n                $a[] = <span class=\"hljs-string\">'?'</span>;\n            }\n        }\n\n        $a = <span class=\"hljs-string\">'('</span>.implode(<span class=\"hljs-string\">','</span>, $a).<span class=\"hljs-string\">')'</span>;\n        $b = array_fill(<span class=\"hljs-number\">0</span>, count(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue), $a);\n\n        <span class=\"hljs-keyword\">$this</span>-&gt;prepareRelations($table, $relations);\n        $values = array_map(<span class=\"hljs-string\">'array_values'</span>, <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue);\n        $values = call_user_func_array(<span class=\"hljs-string\">'array_merge'</span>, $values);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">array</span>(\n            <span class=\"hljs-string\">'fields'</span> =&gt; $cols,\n            <span class=\"hljs-string\">'values'</span> =&gt; $b,\n            <span class=\"hljs-string\">'params'</span> =&gt; $values\n        );\n    }\n\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">prepareRelations</span><span class=\"hljs-params\">(Doctrine_Table $table, array $relations)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>($relations)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n        }\n\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue <span class=\"hljs-keyword\">as</span> $k =&gt; &amp;$row) {\n            <span class=\"hljs-keyword\">foreach</span> ($relations <span class=\"hljs-keyword\">as</span> &amp;$relation) {\n                <span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue[$relation][] = $row[$relation];\n                <span class=\"hljs-keyword\">unset</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue[$k][$relation]);\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n    }\n\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insertRelationDataFor</span><span class=\"hljs-params\">(Doctrine_Table $table)</span> </span>{\n        $ids = <span class=\"hljs-keyword\">$this</span>-&gt;getLastInsertIds($table);\n        $return = <span class=\"hljs-keyword\">true</span>;\n\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue <span class=\"hljs-keyword\">as</span> $relation =&gt; &amp;$value) {\n            $relationObj = $table-&gt;getRelation($relation);\n            $foreignColumn = $relationObj-&gt;getForeignColumnName();\n            $localColumn = $relationObj-&gt;getLocalColumnName();\n\n            <span class=\"hljs-keyword\">foreach</span> ($value <span class=\"hljs-keyword\">as</span> $k =&gt; &amp;$row) {\n                $row = array_values($row);\n                <span class=\"hljs-keyword\">foreach</span> ($row <span class=\"hljs-keyword\">as</span> $i =&gt; &amp;$subRow) {\n                    $subRow[$foreignColumn] = &amp;<span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue[$k][$localColumn];\n                }\n            }\n            $value = call_user_func_array(<span class=\"hljs-string\">'array_merge'</span>, $value);\n            <span class=\"hljs-comment\">#echo \"&lt;pre&gt;Relation \", $relation, \"n\";</span>\n            <span class=\"hljs-comment\">#print_r($value);</span>\n            <span class=\"hljs-comment\">#echo \"nn\";</span>\n            <span class=\"hljs-comment\">#continue;</span>\n            $result = Doctrine_Query::create()\n                -&gt;setQueue($value)\n                -&gt;multipleInsert($relationObj-&gt;getClass());\n\n            $return = $return &amp;&amp; $result;\n            <span class=\"hljs-keyword\">if</span> (!$return) {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Doctrine_Relation_Exception(sprintf(\n                    <span class=\"hljs-string\">\"Can not insert relation data (%s) for %s table\"</span>,\n                    $relationObj-&gt;getTable()-&gt;getTableName(),\n                    $table-&gt;getTableName()\n                ));\n            }\n            <span class=\"hljs-keyword\">unset</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue[$relation]);\n        }\n        <span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue = <span class=\"hljs-keyword\">array</span>();\n        <span class=\"hljs-comment\">#exit;</span>\n        <span class=\"hljs-keyword\">return</span> $return;\n    }\n\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">prepareInsert</span><span class=\"hljs-params\">(Doctrine_Table $table)</span></span>{\n        $tableName = $table-&gt;getTableName();\n        $data = <span class=\"hljs-keyword\">$this</span>-&gt;prepareQueueValues($table);\n\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;beginTransaction();\n            <span class=\"hljs-comment\">// build the statement</span>\n            $query = <span class=\"hljs-string\">'INSERT INTO '</span> . <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;quoteIdentifier($tableName)\n                . <span class=\"hljs-string\">' ('</span> . implode(<span class=\"hljs-string\">', '</span>, $data[<span class=\"hljs-string\">'fields'</span>]) . <span class=\"hljs-string\">')'</span>\n                . <span class=\"hljs-string\">' VALUES '</span> . implode(<span class=\"hljs-string\">', '</span>, $data[<span class=\"hljs-string\">'values'</span>]);\n\n            $result = <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;exec($query, $data[<span class=\"hljs-string\">'params'</span>]);\n            <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue_size = <span class=\"hljs-keyword\">$this</span>-&gt;queueSize();\n\n            <span class=\"hljs-keyword\">if</span> ($result &amp;&amp; !<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue)) {\n                $result = $result &amp;&amp; <span class=\"hljs-keyword\">$this</span>-&gt;insertRelationDataFor($table);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (!$result) {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Doctrine_Connection_Exception(<span class=\"hljs-string\">\"Failed inserting records in \"</span> . get_class($table));\n            }\n            <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;commit();\n\n            <span class=\"hljs-keyword\">$this</span>-&gt;_insert_queue = <span class=\"hljs-keyword\">array</span>();\n            <span class=\"hljs-keyword\">return</span> $result;\n        } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">Exception</span> $e) {\n            <span class=\"hljs-keyword\">$this</span>-&gt;_conn-&gt;rollBack();\n            <span class=\"hljs-keyword\">throw</span> $e;\n        }\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reset</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">$this</span>-&gt;_relations_queue = <span class=\"hljs-keyword\">array</span>();\n        <span class=\"hljs-keyword\">$this</span>-&gt;_last_insert_ids = <span class=\"hljs-keyword\">array</span>();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n    }\n}\n</code></pre>\n<h2 id=\"kak-ispolzovat\"><a name=\"kak-ispolzovat\" class=\"h-link\" href=\"#\"></a>Как использовать</h2>\n<p>Покажу на &quot;живом&quot; примере из моего опыта. Имеет 2 связанные таблицы: каталог деталей и другая таблица для поиска &quot;похожих&quot; (альтернативных) деталей, причем первая таблица должна быть на 3 языках (в doctrine 1.2 использовал template I18n). SQL синтаксис:</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> catalog_translation (\n   <span class=\"hljs-keyword\">id</span> <span class=\"hljs-built_in\">INT</span> <span class=\"hljs-keyword\">UNSIGNED</span>,\n   <span class=\"hljs-keyword\">name</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n   description <span class=\"hljs-built_in\">TEXT</span>,\n   lang <span class=\"hljs-built_in\">CHAR</span>(<span class=\"hljs-number\">2</span>),\n   PRIMARY <span class=\"hljs-keyword\">KEY</span>(<span class=\"hljs-keyword\">id</span>, lang)\n) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">ENGINE</span> = <span class=\"hljs-keyword\">INNODB</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-keyword\">catalog</span> (\n   <span class=\"hljs-keyword\">id</span> <span class=\"hljs-built_in\">INT</span> <span class=\"hljs-keyword\">UNSIGNED</span> AUTO_INCREMENT,\n   keyword <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n   price <span class=\"hljs-built_in\">DECIMAL</span>(<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n   created_at DATETIME <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n   updated_at DATETIME <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n   PRIMARY <span class=\"hljs-keyword\">KEY</span>(<span class=\"hljs-keyword\">id</span>)\n) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">ENGINE</span> = <span class=\"hljs-keyword\">INNODB</span>;\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> catalog_similarkey (\n   <span class=\"hljs-keyword\">id</span> <span class=\"hljs-built_in\">INT</span> <span class=\"hljs-keyword\">UNSIGNED</span> AUTO_INCREMENT,\n   catalog_id <span class=\"hljs-built_in\">INT</span> <span class=\"hljs-keyword\">UNSIGNED</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n   <span class=\"hljs-keyword\">name</span> <span class=\"hljs-built_in\">VARCHAR</span>(<span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span>,\n   <span class=\"hljs-keyword\">INDEX</span> catalog_id_idx (catalog_id),\n   PRIMARY <span class=\"hljs-keyword\">KEY</span>(<span class=\"hljs-keyword\">id</span>)\n) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-built_in\">CHARACTER</span> <span class=\"hljs-keyword\">SET</span> utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci <span class=\"hljs-keyword\">ENGINE</span> = <span class=\"hljs-keyword\">INNODB</span>;\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> catalog_translation <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CONSTRAINT</span> catalog_translation_id_catalog_id\n   <span class=\"hljs-keyword\">FOREIGN</span> <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-keyword\">id</span>) <span class=\"hljs-keyword\">REFERENCES</span> <span class=\"hljs-keyword\">catalog</span>(<span class=\"hljs-keyword\">id</span>) <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">CASCADE</span> <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">CASCADE</span>;\n<span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> catalog_similarkey <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">CONSTRAINT</span> catalog_similarkey_catalog_id_catalog_id\n   <span class=\"hljs-keyword\">FOREIGN</span> <span class=\"hljs-keyword\">KEY</span> (catalog_id) <span class=\"hljs-keyword\">REFERENCES</span> <span class=\"hljs-keyword\">catalog</span>(<span class=\"hljs-keyword\">id</span>) <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">CASCADE</span>;\n</code></pre>\n<p>Импорт нужно было делать из excel файла. Но это упустим и сделаем задачу более теоретической.</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\"># include doctrine and other files</span>\n<span class=\"hljs-comment\"># P.S. i tested it using lime test framework in symfony</span>\n\n$data = <span class=\"hljs-keyword\">array</span>(\n    <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'keyword'</span> =&gt; <span class=\"hljs-string\">'keyword 1'</span>,\n        <span class=\"hljs-string\">'price'</span> =&gt; <span class=\"hljs-number\">10.1</span>,\n        <span class=\"hljs-string\">'Translation'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n            <span class=\"hljs-string\">'en'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n                <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'name 1 en'</span>,\n                <span class=\"hljs-string\">'description'</span> =&gt; <span class=\"hljs-string\">'test en description'</span>,\n                <span class=\"hljs-string\">'lang'</span> =&gt; <span class=\"hljs-string\">'en'</span>\n            ),\n            <span class=\"hljs-string\">'ru'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n                <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'name 1 ru'</span>,\n                <span class=\"hljs-string\">'description'</span> =&gt; <span class=\"hljs-string\">''</span>,\n                <span class=\"hljs-string\">'lang'</span> =&gt; <span class=\"hljs-string\">'ru'</span>\n            )\n        ),\n        <span class=\"hljs-string\">'CatalogSimilarkey'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 1 for keyword 1'</span>),\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 2 for keyword 1'</span>),\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 3 for keyword 1'</span>),\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 4 for keyword 1'</span>)\n        )\n    ),\n    <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'keyword'</span> =&gt; <span class=\"hljs-string\">'keyword 2'</span>,\n        <span class=\"hljs-string\">'price'</span> =&gt; <span class=\"hljs-number\">15.21</span>,\n        <span class=\"hljs-string\">'Translation'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n            <span class=\"hljs-string\">'en'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n                <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'name 2 en'</span>,\n                <span class=\"hljs-string\">'description'</span> =&gt; <span class=\"hljs-string\">'test en description'</span>,\n                <span class=\"hljs-string\">'lang'</span> =&gt; <span class=\"hljs-string\">'en'</span>\n            ),\n            <span class=\"hljs-string\">'ru'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n                <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'name 2 ru'</span>,\n                <span class=\"hljs-string\">'description'</span> =&gt; <span class=\"hljs-string\">''</span>,\n                <span class=\"hljs-string\">'lang'</span> =&gt; <span class=\"hljs-string\">'ru'</span>\n            )\n        ),\n        <span class=\"hljs-string\">'CatalogSimilarkey'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 1 for keyword 2'</span>),\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 2 for keyword 2'</span>),\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 3 for keyword 2'</span>),\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 4 for keyword 2'</span>)\n        )\n    ),\n    <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'keyword'</span> =&gt; <span class=\"hljs-string\">'keyword 3'</span>,\n        <span class=\"hljs-string\">'price'</span> =&gt; <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-string\">'Translation'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n            <span class=\"hljs-string\">'en'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n                <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'name 3 en'</span>,\n                <span class=\"hljs-string\">'description'</span> =&gt; <span class=\"hljs-string\">'test en description'</span>,\n                <span class=\"hljs-string\">'lang'</span> =&gt; <span class=\"hljs-string\">'en'</span>\n            ),\n            <span class=\"hljs-string\">'ru'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n                <span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'name 3 ru'</span>,\n                <span class=\"hljs-string\">'description'</span> =&gt; <span class=\"hljs-string\">''</span>,\n                <span class=\"hljs-string\">'lang'</span> =&gt; <span class=\"hljs-string\">'ru'</span>\n            )\n        ),\n        <span class=\"hljs-string\">'CatalogSimilarkey'</span> =&gt; <span class=\"hljs-keyword\">array</span>(\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 1 for keyword 3'</span>),\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 2 for keyword 3'</span>),\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 3 for keyword 3'</span>),\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'name'</span> =&gt; <span class=\"hljs-string\">'similar 4 for keyword 3'</span>)\n        )\n    )\n);\n\n$db = Doctrine_Manager::getInstance();\n$db-&gt;setAttribute(Doctrine::ATTR_QUERY_CLASS, <span class=\"hljs-string\">'sjQuery'</span>);\n$query = Doctrine_Query::create();\n\n<span class=\"hljs-keyword\">foreach</span> ($data <span class=\"hljs-keyword\">as</span> $row) {\n    $query-&gt;pushToQueue($row);\n}\n\n<span class=\"hljs-comment\">/** or just do:\n *\n *  $query-&gt;setQueue($data)\n */</span>\n<span class=\"hljs-keyword\">try</span> {\n    $query-&gt;multipleInsert(<span class=\"hljs-string\">'Catalog'</span>);\n} <span class=\"hljs-keyword\">catch</span> (Doctrine_Exception $e) {\n    <span class=\"hljs-keyword\">echo</span> $e-&gt;getMessage();\n}\n</code></pre>\n<p>Запускаем и смотрим в нашу базу данных.</p>\n<h2 id=\"multiple-insert-vs-prepared-statement\"><a name=\"multiple-insert-vs-prepared-statement\" class=\"h-link\" href=\"#\"></a>MultipleInsert vs prepared statement</h2>\n<p>Запишем 100 000 строк в таблицу каталог (keyword, price, created_at, updated_at) с помощью prepared statement + transaction и новым методом multipleInsert.</p>\n<p>Тесты провожу у себя на локальной машине</p>\n<ul>\n<li>Intel(R) Core(TM)2 Duo 2.00GHz</li>\n<li>2GB RAM</li>\n<li>Apache/2.2.12 (Ubuntu)</li>\n<li>MySQL-server Ver 14.14 Distrib 5.1.37</li>\n<li>PHP 5.2.10-2ubuntu6.5 with Suhosin-Patch 0.9.7 (cli)</li>\n<li>symfony 1.4 (svn)</li>\n</ul>\n<p>Привожу код и файл с тестовыми данными.</p>\n<p>Prepared statement:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">#include doctrine and other files</span>\n\nDoctrine::getTable(<span class=\"hljs-string\">'Catalog'</span>)-&gt;getConnection()\n    -&gt;exec(<span class=\"hljs-string\">'TRUNCATE TABLE catalog'</span>);\n\n$data = unserialize(file_get_contents(<span class=\"hljs-string\">'/tmp/test.sr'</span>));\n<span class=\"hljs-comment\">/**\n * Row format\n * array(\n *      'keyword' =&gt; 'random string',\n *      'price' =&gt; 'random number',\n *      'created_at' =&gt; now,\n *      'updated_at' =&gt; now\n * )\n */</span>\n\n$t = microtime(<span class=\"hljs-keyword\">true</span>);\n$conn = Doctrine::getTable(<span class=\"hljs-string\">'Catalog'</span>)-&gt;getConnection();\n$stmt = $conn-&gt;prepare(<span class=\"hljs-string\">'\n        INSERT INTO catalog (\n            keyword, price, created_at, updated_at\n        ) VALUES (\n            :keyword, :price, :created_at, :updated_at\n        )'</span>);\n<span class=\"hljs-keyword\">try</span> {\n    $conn-&gt;beginTransaction();\n    <span class=\"hljs-keyword\">foreach</span> ($data <span class=\"hljs-keyword\">as</span> $row) {\n        $stmt-&gt;execute($row);\n    }\n    $conn-&gt;commit();\n} <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">Exception</span> $e) {\n    $conn-&gt;rollBack();\n}\nvar_dump(<span class=\"hljs-keyword\">true</span>, <span class=\"hljs-string\">'time: '</span> . (microtime(<span class=\"hljs-keyword\">true</span>) - $t));\n</code></pre>\n<p>Multiple insert:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">#include doctrine and other files</span>\nDoctrine::getTable(<span class=\"hljs-string\">'Catalog'</span>)-&gt;getConnection()\n    -&gt;exec(<span class=\"hljs-string\">'TRUNCATE TABLE catalog'</span>);\n\n$data = unserialize(file_get_contents(<span class=\"hljs-string\">'/tmp/test.sr'</span>));\n\n$t = microtime(<span class=\"hljs-keyword\">true</span>);\n$q = Doctrine_Query::create()\n    -&gt;setQueue($data)\n    -&gt;multipleInsert(<span class=\"hljs-string\">'Catalog'</span>);\n\nvar_dump(<span class=\"hljs-keyword\">true</span>, <span class=\"hljs-string\">'time: '</span> . (microtime(<span class=\"hljs-keyword\">true</span>) - $t));\n</code></pre>\n<h4 id=\"rezultaty\"><a name=\"rezultaty\" class=\"h-link\" href=\"#\"></a>Результаты</h4>\n<ul>\n<li>Multiple insert: 6.74 с</li>\n<li>Prepared Statement: 24.78 с</li>\n</ul>\n<p>Как видно - разница приблизительно в 3-4 раза.</p>\n<p>Все это тестировалось только на MySQL базе данных, поэтому буду благодарен, если кто-то протестирует на других серверах.</p>","headings":[["ideya","Идея"],["problemy","Проблемы"],["stavim-zadachu","Ставим задачу"],["net-problem","Нет проблем"],["kak-ispolzovat","Как использовать"],["multiple-insert-vs-prepared-statement","MultipleInsert vs prepared statement"],["rezultaty","Результаты"]],"id":"kolektsioniruem-dannye-ili-uchim-doctrine-delat-multiple-insert"}