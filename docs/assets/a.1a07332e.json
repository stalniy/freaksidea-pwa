{"title":"Интернационализация в Magento","summary":"Мультиязычность уже давно стала обычным делом для сайтов направленных на\nмеждународную аудиторию. Благодаря этому, пользователь может выбрать язык\n(соответственно и локализацию), которая больше подходит ему. В Magento вопрос\nинтернационализации немного не очевиден, поэтому стоит рассмотреть его более\nдетально\n","author":"sstotskyi","categories":["backend","important"],"createdAt":"2012-07-07T19:00:00.000Z","meta":{"keywords":["magento","модуль","I18n","модели"]},"alias":"internatsionalizatsiya-v-magento","content":"<p>Мультиязычность уже давно стала обычным делом для сайтов направленных на международную аудиторию. Благодаря этому, пользователь может выбрать язык (соответственно и локализацию), которая больше подходит ему.</p>\n<p>В <em>Magento</em> вопрос интернационализации немного не очевиден (думаю из-за большой абстрактности). Этот функционал реализуется посредством скоупов, о которых упоминалось <app-link to=\"backend\" params=\"{&quot;id&quot;:&quot;magento-konfiguratsiya-ot-a-do-ya-systemxml&quot;}\">в одной из прошлых статтей</app-link> (разделение на скоупы - идея, которая очень глубоко заложена в ядре системы). А именно при помощи так называемых <strong>StoreView</strong>.</p>\n<h2 id=\"sozdanie-store-view\"><a name=\"sozdanie-store-view\" class=\"h-link\" href=\"#\"></a>Создание StoreView</h2>\n<p>Для реализации магазина на 2 языках (например, русский и английский) нужно 2 <em>StoreView.</em> Для русского можно использовать дефолтный, а для английского нужно создать еще один (можно и наоборот). Идем в <strong>System -&gt; Manage Stores</strong> и нажимаем кнопку <strong>Create Store View</strong></p>\n<p><img src=\"/media/assets/create-store-view.png\" alt=\"\" title=\"Create Store View in Magento\" loading=\"lazy\" width=\"708\" style=\"max-height: 251px;\" srcset=\"/media/assets/create-store-view-xs.png 375w,/media/assets/create-store-view.png 1280w\" sizes=\"(max-width: 375px) 375px,1280px\"></p>\n<p>В поле имя можно писать все что угодно, но так чтобы было понятно за что отвечает этот <em>Store View</em> (вид магазина). В поле <em>Code</em> нужно прописать код магазина (для интернационализации понятно, что лучше использовать код языка к которому принадлежит вид). Все остальное понятно. Потом нажимаете <strong>Save Store View</strong>. Также можно переименовать и изменить код для <em>Store View</em> по умолчанию (например код можно поменять на <strong>en</strong>, а название на <strong>English</strong>).</p>\n<p>Чтобы все переводы отображались на русском для <em>Store View</em> с кодом <strong>ru</strong>, нужно зайти в конфигурацию, в скоуп этого вида (<strong>System</strong> &gt; <strong>Configuration</strong> &gt; (выбираем Русский <em>Store View</em>) &gt; <strong>General</strong> &gt; <strong>Locale Options</strong>)</p>\n<p><img src=\"/media/assets/storeview-localization.png\" alt=\"\" title=\"Magento Store View Localization\" loading=\"lazy\" width=\"700\" style=\"max-height: 260px;\" srcset=\"/media/assets/storeview-localization-xs.png 375w,/media/assets/storeview-localization.png 1280w\" sizes=\"(max-width: 375px) 375px,1280px\"></p>\n<p>В поле <em>Locale</em> выбираете русский язык, а в поле <em>First Day of Week</em> - <em>Monday</em>. Сохраняете конфигурацию (не забудьте сделать переиндексацию!). Теперь, если это предусмотрено вашей темой, на фронтенде появится переключатель языков.</p>\n<h2 id=\"fantaziruem\"><a name=\"fantaziruem\" class=\"h-link\" href=\"#\"></a>Фантазируем</h2>\n<p>К сожалению в <em>Magento</em> нет стандартного функционала, который упрощал бы создание многоязычной сущности (кроме <em>EAV</em> конечно, но ИМХО - слишком сложно для такого простого задания).</p>\n<p>Задача собственно</p>\n<ul>\n<li>для реализации многоязычности для одной сущности используем 2 связанные таблицы\n<ul>\n<li>в одной хранится общая информация для всех языков</li>\n<li>в другой хранятся поля, который зависят от языка (в данном случае от <em>Store View</em>)</li>\n</ul>\n</li>\n<li>написать <em>table</em> класс и <em>behavior</em> интерфейс, которые упростят создание специфической для задания структуры базы</li>\n<li>реализовать <em>i18n</em> <em>behavior</em> на основе интерфейса</li>\n<li>написать ресурс модели, которые упрощает сохранение данных (в данном случае ресурс модель и коллекцию)</li>\n<li><em>API</em> доступа к бизнес моделям должен остаться без изменений, за исключением добавления фильтра по <em>Store View</em></li>\n</ul>\n<h2 id=\"vokrug-da-okolo\"><a name=\"vokrug-da-okolo\" class=\"h-link\" href=\"#\"></a>Вокруг да около</h2>\n<p>В <em>Magento</em>, начиная с версии 1.6, появился класс <strong>Varien_Db_Ddl_Table</strong>, используется для создания таблиц в <em>setup</em> файлах модуля. Например</p>\n<pre><code class=\"hljs language-php\">$table = $installer-&gt;getConnection()\n    -&gt;newTable($installer-&gt;getTable(<span class=\"hljs-string\">'core/config_data'</span>))\n    -&gt;addColumn(<span class=\"hljs-string\">'config_id'</span>, Varien_Db_Ddl_Table::TYPE_INTEGER, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'identity'</span>  =&gt; <span class=\"hljs-keyword\">true</span>,\n        <span class=\"hljs-string\">'unsigned'</span>  =&gt; <span class=\"hljs-keyword\">true</span>,\n        <span class=\"hljs-string\">'nullable'</span>  =&gt; <span class=\"hljs-keyword\">false</span>,\n        <span class=\"hljs-string\">'primary'</span>   =&gt; <span class=\"hljs-keyword\">true</span>,\n        ), <span class=\"hljs-string\">'Config Id'</span>)\n    -&gt;addColumn(<span class=\"hljs-string\">'scope'</span>, Varien_Db_Ddl_Table::TYPE_TEXT, <span class=\"hljs-number\">8</span>, <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'nullable'</span>  =&gt; <span class=\"hljs-keyword\">false</span>,\n        <span class=\"hljs-string\">'default'</span>   =&gt; <span class=\"hljs-string\">'default'</span>,\n        ), <span class=\"hljs-string\">'Config Scope'</span>)\n    -&gt;addColumn(<span class=\"hljs-string\">'scope_id'</span>, Varien_Db_Ddl_Table::TYPE_INTEGER, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'nullable'</span>  =&gt; <span class=\"hljs-keyword\">false</span>,\n        <span class=\"hljs-string\">'default'</span>   =&gt; <span class=\"hljs-string\">'0'</span>,\n        ), <span class=\"hljs-string\">'Config Scope Id'</span>)\n    -&gt;addColumn(<span class=\"hljs-string\">'path'</span>, Varien_Db_Ddl_Table::TYPE_TEXT, <span class=\"hljs-number\">255</span>, <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'nullable'</span>  =&gt; <span class=\"hljs-keyword\">false</span>,\n        <span class=\"hljs-string\">'default'</span>   =&gt; <span class=\"hljs-string\">'general'</span>,\n        ), <span class=\"hljs-string\">'Config Path'</span>)\n    -&gt;addColumn(<span class=\"hljs-string\">'value'</span>, Varien_Db_Ddl_Table::TYPE_TEXT, <span class=\"hljs-string\">'64k'</span>, <span class=\"hljs-keyword\">array</span>(\n    ), <span class=\"hljs-string\">'Config Value'</span>)\n    -&gt;addIndex($installer-&gt;getIdxName(<span class=\"hljs-string\">'core/config_data'</span>, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'scope'</span>, <span class=\"hljs-string\">'scope_id'</span>, <span class=\"hljs-string\">'path'</span>), Varien_Db_Adapter_Interface::INDEX_TYPE_UNIQUE),\n        <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'scope'</span>, <span class=\"hljs-string\">'scope_id'</span>, <span class=\"hljs-string\">'path'</span>), <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'type'</span> =&gt; Varien_Db_Adapter_Interface::INDEX_TYPE_UNIQUE))\n    -&gt;setComment(<span class=\"hljs-string\">'Config Data'</span>);\n$installer-&gt;getConnection()-&gt;createTable($table);\n</code></pre>\n<p>Метод <em>getConnection</em> возвращает выбранный адаптер базы данных. В этом адаптере метод <em>newTable</em> возвращает экземпляр <em>Varien_Db_Ddl_Table</em> класса. И изменить это поведение к сожалению невозможно, поэтому когда класс расширенной таблицы будет реализован, придется создавать объект последнего напрямую.</p>\n<p>Класс <strong>FI_I18n_Model_Resource_Table</strong> добавляет несколько важных методов: <em>addBehavior</em>, <em>applyBehaviors</em> и <em>save</em>. По именах методов можно понять, что они делают, кроме последнего. Метод <strong>save</strong> - это обертка</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_Table</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Varien_Db_Ddl_Table</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">save</span><span class=\"hljs-params\">(Mage_Core_Model_Resource_Setup $context)</span> </span>{\n        <span class=\"hljs-keyword\">$this</span>-&gt;applyBehaviors($context);\n        <span class=\"hljs-keyword\">return</span> $context-&gt;getConnection()-&gt;createTable(<span class=\"hljs-keyword\">$this</span>);\n    }\n............................................................\n}\n</code></pre>\n<p>В метод <strong>addBehavior</strong> нужно передать объект, который реализует <em>behavior</em> интерфейс</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_Table</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Varien_Db_Ddl_Table</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addBehavior</span><span class=\"hljs-params\">(FI_I18n_Model_Resource_Behavior_Interface $behavior)</span> </span>{\n        <span class=\"hljs-keyword\">$this</span>-&gt;_behaviors[] = $behavior;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n    }\n............................................................\n}\n</code></pre>\n<p>Метод <strong>applyBehaviors</strong> итерирует по все поведениям (<em>behaviors</em>) и применяет их к таблице</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_Table</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Varien_Db_Ddl_Table</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">applyBehaviors</span><span class=\"hljs-params\">(Mage_Core_Model_Resource_Setup $context)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_behaviors)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n        }\n\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">$this</span>-&gt;_behaviors <span class=\"hljs-keyword\">as</span> $behavior) {\n            $behavior-&gt;applyTo(<span class=\"hljs-keyword\">$this</span>, $context);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n    }\n............................................................\n}\n</code></pre>\n<p>Также добавлен метод <strong>removeColumns</strong>, который удаляет колонки из таблицы по имени и потом возвращает их. Это нужно для того, чтобы &quot;поведения&quot; имели интерфейс через который они могут не только добавлять новые колонки, но и переносить их в другую таблицу, что именно и нужно в данном случае.</p>\n<p>Создадим теперь класс <em>I18n</em>, который реализует <em>Behavior</em> интерфейс. Последний очень прост:</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_Behavior_Interface</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">applyTo</span><span class=\"hljs-params\">(Varien_Db_Ddl_Table $table, Mage_Core_Model_Resource_Setup $context)</span></span>;\n}\n</code></pre>\n<p>В нашем случае класс поведения должен создать еще одну таблицу удалив из базовой некоторые поля. Что и сделано в методе applyTo</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_Behavior_I18n</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_Behavior_Interface</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">applyTo</span><span class=\"hljs-params\">(Varien_Db_Ddl_Table $table, Mage_Core_Model_Resource_Setup $setup)</span> </span>{\n        $columns = $table-&gt;removeColumns(<span class=\"hljs-keyword\">$this</span>-&gt;_fields);\n\n        $tableI18n = <span class=\"hljs-keyword\">$this</span>-&gt;_newI18nTable($table, $columns);\n        $setup-&gt;getConnection()-&gt;createTable($tableI18n);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n    }\n............................................................\n}\n</code></pre>\n<p>Этот класс имеет 2 константы: одна указывает на суффикс дополнительной таблицы, а другая указывает название поля, которое является идентификатором языка.</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_Behavior_I18n</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_Behavior_Interface</span> </span>{\n    <span class=\"hljs-keyword\">const</span> TABLE_SUFIX = <span class=\"hljs-string\">'_store'</span>;\n    <span class=\"hljs-keyword\">const</span> LANG_COLUMN_NAME = <span class=\"hljs-string\">'store_id'</span>;\n............................................................\n}\n</code></pre>\n<p>Также реализован статический метод <strong>getI18nTableName</strong>, который возвращает имя дополнительной таблицы для указанной (просто к имени указанной добавляет <em>TABLE_SUFIX</em> константу). Конструктор этого класса в качестве единого параметра принимает массив полей, которые должны быть разными для разных языков.</p>\n<p>Например, есть таблица новостей с полями: <em>id</em>, <em>title</em>, <em>desciption</em>, <em>is_active</em>, <em>created_at</em>, <em>updated_at</em>. Поля <em>title</em> и <em>description</em> мультиязычны. Тогда <em>install</em> файл выглядит следующим образом:</p>\n<pre><code class=\"hljs language-php\">$installer = <span class=\"hljs-keyword\">$this</span>;\n$installer-&gt;startSetup();\n\n$table = <span class=\"hljs-keyword\">new</span> FI_I18n_Model_Resource_Table();\n$table-&gt;setName($installer-&gt;getTable(<span class=\"hljs-string\">'fi_i18n/news'</span>))\n    -&gt;addColumn(<span class=\"hljs-string\">'id'</span>, Varien_Db_Ddl_Table::TYPE_SMALLINT, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'identity'</span>  =&gt; <span class=\"hljs-keyword\">true</span>,\n        <span class=\"hljs-string\">'unsigned'</span>  =&gt; <span class=\"hljs-keyword\">true</span>,\n        <span class=\"hljs-string\">'nullable'</span>  =&gt; <span class=\"hljs-keyword\">false</span>,\n        <span class=\"hljs-string\">'primary'</span>   =&gt; <span class=\"hljs-keyword\">true</span>,\n        ), <span class=\"hljs-string\">'Website Id'</span>)\n    -&gt;addColumn(<span class=\"hljs-string\">'title'</span>, Varien_Db_Ddl_Table::TYPE_TEXT, <span class=\"hljs-number\">64</span>, <span class=\"hljs-keyword\">array</span>(\n        ), <span class=\"hljs-string\">'News Title'</span>)\n    -&gt;addColumn(<span class=\"hljs-string\">'description'</span>, Varien_Db_Ddl_Table::TYPE_TEXT, <span class=\"hljs-string\">'64k'</span>, <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'nullable'</span> =&gt; <span class=\"hljs-keyword\">false</span>\n        ), <span class=\"hljs-string\">'Decsription'</span>)\n    -&gt;addColumn(<span class=\"hljs-string\">'is_active'</span>, Varien_Db_Ddl_Table::TYPE_SMALLINT, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'unsigned'</span>  =&gt; <span class=\"hljs-keyword\">true</span>,\n        <span class=\"hljs-string\">'nullable'</span>  =&gt; <span class=\"hljs-keyword\">false</span>,\n        <span class=\"hljs-string\">'default'</span>   =&gt; <span class=\"hljs-string\">'0'</span>,\n        ), <span class=\"hljs-string\">'News Activity'</span>)\n    -&gt;addColumn(<span class=\"hljs-string\">'created_at'</span>, Varien_Db_Ddl_Table::TYPE_TIMESTAMP, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">array</span>(\n        ), <span class=\"hljs-string\">'Date of News Creation'</span>)\n    -&gt;addColumn(<span class=\"hljs-string\">'updated_at'</span>, Varien_Db_Ddl_Table::TYPE_TIMESTAMP, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">array</span>(\n        ), <span class=\"hljs-string\">'Date of News Modification'</span>)\n    -&gt;addBehavior(<span class=\"hljs-keyword\">new</span> FI_I18n_Model_Resource_Behavior_I18n(<span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'title'</span>, <span class=\"hljs-string\">'description'</span>\n    )));\n\n$table-&gt;save($installer);\n$installer-&gt;endSetup();\n</code></pre>\n<p>Этот код сгенерирует следующий запрос к базе (на сервере <em>MySQL</em>):</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`i18n_news`</span> (\n <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">smallint</span>(<span class=\"hljs-number\">5</span>) <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> AUTO_INCREMENT <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'Website Id'</span>,\n <span class=\"hljs-string\">`is_active`</span> <span class=\"hljs-built_in\">smallint</span>(<span class=\"hljs-number\">5</span>) <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-string\">'0'</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'News Activity'</span>,\n <span class=\"hljs-string\">`created_at`</span> <span class=\"hljs-built_in\">timestamp</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'Date of News Creation'</span>,\n <span class=\"hljs-string\">`updated_at`</span> <span class=\"hljs-built_in\">timestamp</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'Date of News Modification'</span>,\n PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>)\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> AUTO_INCREMENT=<span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8 <span class=\"hljs-keyword\">COMMENT</span>=<span class=\"hljs-string\">'i18n_news'</span>\n\n<span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-string\">`i18n_news_store`</span> (\n <span class=\"hljs-string\">`id`</span> <span class=\"hljs-built_in\">smallint</span>(<span class=\"hljs-number\">5</span>) <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'Translation Id'</span>,\n <span class=\"hljs-string\">`title`</span> <span class=\"hljs-built_in\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'News Title'</span>,\n <span class=\"hljs-string\">`description`</span> <span class=\"hljs-built_in\">text</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'Decsription'</span>,\n <span class=\"hljs-string\">`store_id`</span> <span class=\"hljs-built_in\">smallint</span>(<span class=\"hljs-number\">5</span>) <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">NOT</span> <span class=\"hljs-literal\">NULL</span> <span class=\"hljs-keyword\">COMMENT</span> <span class=\"hljs-string\">'Store Id'</span>,\n PRIMARY <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>,<span class=\"hljs-string\">`store_id`</span>),\n <span class=\"hljs-keyword\">CONSTRAINT</span> <span class=\"hljs-string\">`FK_I18N_NEWS_STORE`</span> <span class=\"hljs-keyword\">FOREIGN</span> <span class=\"hljs-keyword\">KEY</span> (<span class=\"hljs-string\">`id`</span>) <span class=\"hljs-keyword\">REFERENCES</span> <span class=\"hljs-string\">`i18n_news`</span> (<span class=\"hljs-string\">`id`</span>) <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">CASCADE</span> <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-keyword\">CASCADE</span>\n) <span class=\"hljs-keyword\">ENGINE</span>=<span class=\"hljs-keyword\">InnoDB</span> <span class=\"hljs-keyword\">DEFAULT</span> <span class=\"hljs-keyword\">CHARSET</span>=utf8 <span class=\"hljs-keyword\">COMMENT</span>=<span class=\"hljs-string\">'i18n_news_store'</span>\n</code></pre>\n<p>Теперь не стоит беспокоится о создание индексов и еще одной таблицы. Это за Вас сделает <strong>Behavior_I18n</strong>.</p>\n<h2 id=\"resurs-modeli\"><a name=\"resurs-modeli\" class=\"h-link\" href=\"#\"></a>Ресурс модели</h2>\n<p>Упрощение для создания <em>setup</em> файлов конечно хорошо, но также хотелось бы иметь возможность просто работать с данными, т.е. не думать о том, что нужно объединить таблицы при выборке и т.д. Также логичным кажется тот факт, что бизнес модели не должны знать ничего о таблицах и их связях. Именно поэтому стоит написать ресурс модель, которая при сохранении распределяет данные по нужным таблицам, а при выборке их объединяет.</p>\n<p>Для этого создадим класс <strong>FI_I18n_Model_Resource_I18n</strong>, в котором нужно переопределить методы <strong>_getLoadSelect</strong> (для загрузки данных из базы) и <strong>save</strong> (для распределения данных по разным таблицам). В первом просто объединим 2 таблицы (базовою и <em>i18n</em>)</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_I18n</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Mage_Core_Model_Resource_Db_Abstract</span> </span>{\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_getLoadSelect</span><span class=\"hljs-params\">($field, $value, $object)</span>\n    </span>{\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>(<span class=\"hljs-keyword\">$this</span>-&gt;_i18nFields)) {\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Exception</span>(<span class=\"hljs-string\">'Specify i18n fields for your resource model'</span>);\n        }\n\n        $select = <span class=\"hljs-keyword\">parent</span>::_getLoadSelect($field, $value, $object);\n        $tableName = <span class=\"hljs-keyword\">$this</span>-&gt;getMainTable();\n        $i18nTableName = FI_I18n_Model_Resource_Behavior_I18n::getI18nTableName($tableName);\n        $adapter = $select-&gt;getAdapter();\n\n        $select-&gt;joinLeft(\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-keyword\">self</span>::I18N_TABLE_ALIAS =&gt; $i18nTableName),\n            <span class=\"hljs-keyword\">self</span>::I18N_TABLE_ALIAS . <span class=\"hljs-string\">'.id = '</span> . $adapter-&gt;quoteInto($tableName . <span class=\"hljs-string\">'.'</span> . $field)\n            . <span class=\"hljs-string\">' AND '</span> . <span class=\"hljs-keyword\">$this</span>-&gt;getLangColumnName() . <span class=\"hljs-string\">' = '</span> . $adapter-&gt;quoteInto($object-&gt;getStoreId()),\n            <span class=\"hljs-keyword\">$this</span>-&gt;_i18nFields\n        );\n\n        <span class=\"hljs-keyword\">return</span> $select;\n    }\n..........................................................\n}\n</code></pre>\n<p>В методе <strong>save</strong> сначала фильтруем данные по разным таблицам, потом создаем новую транзакцию. Также стоит упомянуть, что поле <em>id</em> в <em>i18n</em> таблице указывает на <em>id</em> в базовой таблице. Поэтому сохраняем сначала данные в базовую таблицу, а потом и в <em>i18n</em>.</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_I18n</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Mage_Core_Model_Resource_Db_Abstract</span> </span>{\n..........................................................\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">save</span><span class=\"hljs-params\">(Mage_Core_Model_Abstract $object)</span>\n    </span>{\n        $adapter = <span class=\"hljs-keyword\">$this</span>-&gt;_getWriteAdapter();\n        $adapter-&gt;beginTransaction();\n        <span class=\"hljs-keyword\">try</span> {\n            $data = $object-&gt;getData();\n\n            $i18n = <span class=\"hljs-keyword\">array</span>();\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">$this</span>-&gt;_i18nFields <span class=\"hljs-keyword\">as</span> $field) {\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">isset</span>($data[$field])) {\n                    $i18n[$field] = $data[$field];\n                    <span class=\"hljs-keyword\">unset</span>($data[$field]);\n                }\n            }\n            $result = <span class=\"hljs-keyword\">parent</span>::save($object);\n\n            $i18n[<span class=\"hljs-string\">'id'</span>] = $object-&gt;getId();\n            $i18n[FI_I18n_Model_Resource_Behavior_I18n::LANG_COLUMN_NAME] = $object-&gt;getStoreId();\n\n            $update = array_keys($i18n);\n            $adapter-&gt;insertOnDuplicate(\n                FI_I18n_Model_Resource_Behavior_I18n::getI18nTableName(<span class=\"hljs-keyword\">$this</span>-&gt;getMainTable()),\n                $i18n,\n                array_combine($update, $update)\n            );\n\n            $adapter-&gt;commit();\n            <span class=\"hljs-keyword\">return</span> $result;\n        } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">Exception</span> $e) {\n            $adapter-&gt;rollback();\n            <span class=\"hljs-keyword\">throw</span> $e;\n        }\n    }\n}\n</code></pre>\n<p>В этом же классе реализован метод <strong>provideCollectionQuery</strong> - используется для модификации запроса коллекции. Это сделано с целью не раскрывать внутренней реализации ресурс модели (вообще было бы логично, если бы коллекции в <em>Magento</em> загружались используя тот же класс ресурса, что и бизнес модели и не имели собственного объекта <em>Zend_Db_Select</em>). Этот метод просто объединяет базовую и <em>i18n</em> таблицы</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_I18n</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Mage_Core_Model_Resource_Db_Abstract</span> </span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">provideCollectionQuery</span><span class=\"hljs-params\">(Zend_Db_Select $query)</span> </span>{\n        $tableName = <span class=\"hljs-keyword\">$this</span>-&gt;getMainTable();\n        $i18nTableName = $i18nTableName = FI_I18n_Model_Resource_Behavior_I18n::getI18nTableName($tableName);\n        $adapter = $query-&gt;getAdapter();\n\n        $from = $query-&gt;getPart(Zend_Db_Select::FROM);\n        $aliases = array_keys($from);\n        $mainTableAlias = $aliases[<span class=\"hljs-number\">0</span>];\n\n        $query-&gt;joinLeft(\n            <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-keyword\">self</span>::I18N_TABLE_ALIAS =&gt; $i18nTableName),\n            <span class=\"hljs-keyword\">self</span>::I18N_TABLE_ALIAS . <span class=\"hljs-string\">'.id = '</span> . $adapter-&gt;quoteInto($mainTableAlias . <span class=\"hljs-string\">'.'</span> . <span class=\"hljs-keyword\">$this</span>-&gt;getIdFieldName()),\n            <span class=\"hljs-keyword\">$this</span>-&gt;_getI18nColumns()\n        );\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n    }\n......................................................................................\n}\n</code></pre>\n<p>Код коллекции по сути ничего не делает (просто делегирует полномочия ресурсу)</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_I18n_Model_Resource_I18n_Collection</span>\n    <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Mage_Core_Model_Resource_Db_Collection_Abstract</span>\n</span>{\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_initSelect</span><span class=\"hljs-params\">()</span>\n    </span>{\n        $result = <span class=\"hljs-keyword\">parent</span>::_initSelect();\n        <span class=\"hljs-keyword\">$this</span>-&gt;getResource()-&gt;provideCollectionQuery(<span class=\"hljs-keyword\">$this</span>-&gt;getSelect());\n\n        <span class=\"hljs-keyword\">return</span> $result;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addStoreToFilter</span><span class=\"hljs-params\">($store)</span>\n    </span>{\n        <span class=\"hljs-keyword\">if</span> ($store <span class=\"hljs-keyword\">instanceof</span> Mage_Core_Model_Store) {\n            $store = $store-&gt;getId();\n        }\n        <span class=\"hljs-keyword\">$this</span>-&gt;addFieldToFilter(<span class=\"hljs-keyword\">$this</span>-&gt;getResource()-&gt;getLangColumnName(), $store);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n    }\n}\n</code></pre>\n<h2 id=\"praktikuemsya\"><a name=\"praktikuemsya\" class=\"h-link\" href=\"#\"></a>Практикуемся</h2>\n<p>Модели написаны. Чтобы получить их функционал - достаточно в своем модуле их наследовать. Вернемся к модулю новостей. Создадим бизнес и ресурс модели, а также класс коллекции (2 последние наследуются от <strong>FI_I18n_Model_Resource_I18n</strong> и <strong>FI_I18n_Model_Resource_I18n_Collection</strong> классов соответственно). Тогда создать одну новость можно таким образом</p>\n<pre><code class=\"hljs language-php\">$news = Mage::getModel(<span class=\"hljs-string\">'my_module/news'</span>);\n$news-&gt;setTitle(<span class=\"hljs-string\">'Test Title'</span>)\n    -&gt;setDescription(<span class=\"hljs-string\">'Test Description'</span>)\n    -&gt;setStoreId(Mage::app()-&gt;getStore()-&gt;getId())\n    -&gt;save();\n</code></pre>\n<p>Загрузить новость из базы</p>\n<pre><code class=\"hljs language-php\">$news = Mage::getModel(<span class=\"hljs-string\">'my_module/news'</span>)-&gt;setStoreId(Mage::app()-&gt;getStore()-&gt;getId())\n   -&gt;load(<span class=\"hljs-number\">1</span>);\nprint_r($news-&gt;getData());\n</code></pre>\n<p>Загрузить список новостей из базы</p>\n<pre><code class=\"hljs language-php\">$collection = Mage::getModel(<span class=\"hljs-string\">'my_module/news'</span>)-&gt;getCollection()\n    -&gt;addStoreToFilter(Mage::app()-&gt;getStore());\n\n<span class=\"hljs-keyword\">foreach</span> ($collection <span class=\"hljs-keyword\">as</span> $news) {\n    print_r($news-&gt;getData());\n}\n</code></pre>\n<p>Стоит помнить, что при работе с этими моделями всегда нужно указывать <em>store</em> для которого нужно получить данные!</p>\n<p>Скачать модуль можно <a href=\"/media/assets/FI_I18n.tar.bz2\" title=\"Magento I18n Models\" download=\"FI_I18n.tar.bz2\">здесь</a>.</p>\n<p><strong>P.S.</strong>: поддержка версий ниже 1.6 - затруднительна, так что <em>setup</em> файлы придется писать как и раньше, но ресурс модели можно использовать и в старых версиях, стоит только переименовать классы от которых они наследуются (заменить <em>Resource_Db</em> на <em>Mysql4</em>).</p>","headings":[["sozdanie-store-view","Создание StoreView"],["fantaziruem","Фантазируем"],["vokrug-da-okolo","Вокруг да около"],["resurs-modeli","Ресурс модели"],["praktikuemsya","Практикуемся"]],"id":"internatsionalizatsiya-v-magento"}