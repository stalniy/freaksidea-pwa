{"title":"Как кэшировать client side переводы в Magento","summary":"Как всегда в Magento существует огромное количество мест, которые можно\nоптимизировать. В этой статье я предлагаю закэшированить клиентские переводы в\nотдельный файл. Это в свою очередь позволит не грузить их на каждой странице и\nуменьшить объем результирующего HTML контента, который отправляется\nпользователю, а соответственно увеличит скорость загрузки страницы!\n","author":"sstotskyi","categories":["backend","important"],"createdAt":"2017-05-15T08:00:00.000Z","meta":{"keywords":["magento","I18n","javascript","оптимизация"]},"alias":"kak-keshirovat-client-side-perevody-v-magento","content":"<p>Я уже писал о том, как <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;linux/show-104-vklyuchaem-http-keshirovanie-v-nginx-i-apache2&quot;}\">увеличить скорость загрузки страницы при помощи HTTP кэша</app-link>, если Вы этого еще не сделали рекомендую посмотреть, так как результирующий файл мы также будем сохранять в браузерном кэше.</p>\n<p>В этой же статье, я расскажу как уменьшить результирующий размер HTML страницы, которая отправляется пользователю с севера.</p>\n<h2 id=\"ishodnaya-situacziya\"><a name=\"ishodnaya-situacziya\" class=\"h-link\" href=\"#\"></a>Исходная ситуация</h2>\n<p>Не оптимизированная страница выглядит вот так:</p>\n<p><img src=\"/media/assets/traslations.png\" alt=\"Не оптимизированная страница Magento\" width=\"1239\" height=\"420\"></p>\n<p>Обратите внимание на тэг script и все что внутри. Это переводы сообщений с английского на русский (или любой другой язык соответствующий магазину). В основном они используются для отображения ошибок при помощи JavaScript. Объект Translator имеет метод add, при помощи которого, можно добавить новые переводы динамически, поэтому теоретически в старых версиях Magento переводы могут динамически додаваться разными модулями. Настоятельно советую найти все такие места и вынести переводы в jstranslator.xml файл Вашего модуля (пример можно посмотреть в модуле Mage_Checkout, папочка etc/).</p>\n<p>Чем больше у Вас таких переводов, тем дольше грузится страница и соответственно возрастает вероятность ухода пользователя на другой сайт. А меняются они ведь очень очень очень редко.</p>\n<h2 id=\"keshiruem-perevody\"><a name=\"keshiruem-perevody\" class=\"h-link\" href=\"#\"></a>Кэшируем переводы</h2>\n<p>То самое место которое нужно изменить находится в файле app/design/frontend/base/default/template/page/html/head.phtml</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\"># ....</span>\n<span class=\"hljs-meta\">&lt;?php</span> <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-keyword\">$this</span>-&gt;helper(<span class=\"hljs-string\">'core/js'</span>)-&gt;getTranslatorScript() <span class=\"hljs-meta\">?&gt;</span>\n<span class=\"hljs-comment\"># ...</span>\n</code></pre>\n<p>Прежде чем что-то делать, нужно скопировать этот файл в свою тему и <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;php_and_somethings/show-5-magento---sozdanie-crud-modulya&quot;}\">создать отдельный Magento модуль</app-link> (назовем его FI_Optimisation). Потом в файле head.phtml меняем строчку выше на</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php</span> <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-keyword\">$this</span>-&gt;helper(<span class=\"hljs-string\">'fi_optimisation/js'</span>)-&gt;getTranslatorScript() <span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n<p>Теперь создадим файл app/code/local/FI/Optimisation/Helper/Js.php</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_Optimisation_Helper_Js</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Mage_Core_Helper_Js</span>\n</span>{\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_getTranslatorCacheFilePath</span><span class=\"hljs-params\">($suffix = <span class=\"hljs-string\">''</span>)</span>\n    </span>{\n      <span class=\"hljs-keyword\">return</span> Mage::getBaseDir(<span class=\"hljs-string\">'media'</span>) . <span class=\"hljs-string\">'/js/translator'</span> . ($suffix ? <span class=\"hljs-string\">'.'</span> . $suffix : <span class=\"hljs-string\">''</span>) . <span class=\"hljs-string\">'.js'</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTranslatorScript</span><span class=\"hljs-params\">()</span>\n    </span>{\n        $storeId = Mage::app()-&gt;getStore()-&gt;getId();\n        $pattern = <span class=\"hljs-keyword\">$this</span>-&gt;_getTranslatorCacheFilePath($storeId . <span class=\"hljs-string\">'.*'</span>);\n        $files = glob($pattern);\n\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>($files[<span class=\"hljs-number\">0</span>])) {\n            $filepath = str_replace(<span class=\"hljs-string\">'.*'</span>, <span class=\"hljs-string\">'.'</span> . time(), $pattern);\n            $json = <span class=\"hljs-keyword\">$this</span>-&gt;getTranslateJson();\n            file_put_contents($filepath, <span class=\"hljs-string\">'var Translator = new Translate('</span> . $json . <span class=\"hljs-string\">');'</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            $filepath = $files[<span class=\"hljs-number\">0</span>];\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;script src=\"'</span> . Mage::getBaseUrl(<span class=\"hljs-string\">'media'</span>) . <span class=\"hljs-string\">'/js/'</span> . basename($filepath) . <span class=\"hljs-string\">'\"&gt;&lt;/script&gt;'</span>;\n    }\n}\n</code></pre>\n<p>Наш хелпер класс наследует класс Magento, который отвечает за выдачу JavaScript переводов и переопределяет метод getTranslatorScript, в котором вместо того чтобы возвращать инлайновый скрипт, я возвращаю закэшированный. Давайте более детально посмотрим на этот метод.</p>\n<p>Сначала он ищет файл media/js/translator.${storeId}.*.js при помощи glob функции (находит файлы по шаблону), если находит - значит есть закэшированная версия и возвращает ее, если нет, тогда создает имя файла, заменяя звездочку в конце шаблона на текущий timestamp (timestamp гарантирует, что пользователь будет получать всегда самую последнюю версию файла), собирает все переводы при помощи метода getTranslateJson и записывает результат в файл при помощи функции file_put_contents.</p>\n<p>Обратите внимание, что в имени файла присутствует storeId - это значит, что каждый магазин (а с технической точки зрения админка в Magento тоже является магазином) будет иметь отдельный кэш.</p>\n<p>Если у Вас на данный момент код не работает, то почистите сначала кэш Magento, если это не помогло то проверьте unix правда доступа на директорию media/js.</p>\n<p>Всегда нужно помнить, что если есть кэш, то должен быть механизм его удаления или старения. Конечно же, можно просто заходить по ftp или sftp и удалять файлы вручную, но хотелось бы иметь возможность делать это через админку, просто нажав кнопку.</p>\n<p>В Magento есть отдельный тип кэша для переводов и было бы хорошо, чтобы он был ответственным не только за backend-ные переводы, но и за клиентские тоже. Таким образом можно добавить новый ф-нал прозрачно для конечно пользователя - система улучшилась, но пользователю не нужно делать что-то дополнительно или по другому.</p>\n<p><img src=\"/media/assets/magento-cache.png\" alt=\"Magento оптимизация кэша переводов\" width=\"1241\" height=\"312\"></p>\n<h2 id=\"ochistka-kesha-perevodov\"><a name=\"ochistka-kesha-perevodov\" class=\"h-link\" href=\"#\"></a>Очистка кэша переводов</h2>\n<p>Для этого добавим метод clearTranslatorCache в тот же хелпер класс</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\">//.....</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clearTranslatorCache</span><span class=\"hljs-params\">()</span>\n    </span>{\n        $files = glob(<span class=\"hljs-keyword\">$this</span>-&gt;_getTranslatorCacheFilePath(<span class=\"hljs-string\">'*'</span>));\n\n        <span class=\"hljs-keyword\">foreach</span>($files <span class=\"hljs-keyword\">as</span> $path) {\n          unlink($path);\n        }\n    }\n}\n</code></pre>\n<p>Логика очень простая - находим все файлы переводов (на это указывает звездочка) и удаляем их.</p>\n<p>Метод то добавили, а кто его вызовет? Для этого нужно подписаться на событие очистки переводов в Magento. К сожалению, отдельного события не предусмотрено, поэтому подпишемся на очистку любого типа кэша, а тип проверим внутри обработчика.</p>\n<pre><code class=\"hljs language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">config</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- ..... --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">adminhtml</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">events</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">adminhtml_cache_refresh_type</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">observers</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fi_optimisation</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">class</span>&gt;</span>fi_optimisation/observer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">class</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">method</span>&gt;</span>removeTranslatorCache<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">method</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fi_optimisation</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">observers</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">adminhtml_cache_refresh_type</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">events</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">adminhtml</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">config</span>&gt;</span>\n</code></pre>\n<p>Чтобы все это заработало нужно добавить класс Observer-а, который собственно и будет чистить кэш</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FI_Optimisation_Model_Observer</span> </span>{\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">removeTranslatorCache</span><span class=\"hljs-params\">(Varien_Event_Observer $observer)</span>\n  </span>{\n    $type = $observer-&gt;getEvent()-&gt;getType();\n\n    <span class=\"hljs-keyword\">if</span> ($type === Mage_Core_Model_Translate::CACHE_TAG) {\n      Mage::helper(<span class=\"hljs-string\">'fi_optimisation/js'</span>)-&gt;clearTranslatorCache();\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">$this</span>;\n  }\n}\n</code></pre>\n<p>Этот же класс просто проверяет тип кэша и делегирует всю работу хелпер класса, который я написал чуть выше.</p>\n<p>После добавления этого кода не забудьте почистить кэш Magento!</p>\n<p>В конечном итоге, у нас получилось уменьшить результирующую HTML страничку и записать в браузерный кэш этот огромный файл переводов (от 9 kB)!</p>","headings":[["ishodnaya-situacziya","Исходная ситуация"],["keshiruem-perevody","Кэшируем переводы"],["ochistka-kesha-perevodov","Очистка кэша переводов"]],"id":"kak-keshirovat-client-side-perevody-v-magento"}