{"title":"Байндинги в KnockOut: управление видимостью и содержимым","summary":"KO построен по принципам MVVM паттерна, т.е. предоставляет возможность\nизменять View посредством изменения ViewModel. А делает он это при помощи\nбайндингов. Рассмотрим какие из них отвечают за управление видимостью и\nсодержимым элементов\n","author":"sstotskyi","categories":["frontend","important"],"createdAt":"2012-04-18T12:00:00.000Z","meta":{"keywords":["javascript","knockout"]},"alias":"bajndingi-v-knockout-upravlenie-vidimostyu-i-soderzhimym","content":"<p>KO построен по принципам <em>MVVM</em> паттерна, т.е. предоставляет возможность изменять <em>View</em> посредством изменения <em>ViewModel</em>. А делает он это при помощи байндингов. Рассмотрим какие из них отвечают за управление видимостью и содержимым элементов.</p>\n<h2 id=\"visible\"><a name=\"visible\" class=\"h-link\" href=\"#\"></a>visible</h2>\n<p>Отвечает за отображение <em>DOM</em> элемента, т.е. делает его скрытым или видимым, в зависимости от переданного значения свойства <em>ViewModel</em>.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"visible: shouldShowMessage\"</span>&gt;</span>\n    You will see this message only when \"shouldShowMessage\" holds a true value.\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        shouldShowMessage: ko.observable(<span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// Message initially visible</span>\n    };\n    viewModel.shouldShowMessage(<span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// now it's hidden</span>\n    viewModel.shouldShowMessage(<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// now it's visible again</span>\n    ko.applyBindings(viewModel);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Принимает всего один параметр:</p>\n<ul>\n<li>если равен <strong>false</strong> (в том числе <strong>0</strong>, <strong>null</strong> и <strong>undefined</strong>), то <em>css</em> свойство <strong>display</strong> элемента (DomElement.style.display) установится в <strong>none</strong></li>\n<li>если равен <strong>true</strong> (все что угодно кроме <em>false</em> подобных значений), свойство <strong>display</strong> будет <strong>удалено</strong> с элемента</li>\n</ul>\n<p>Если параметр наблюдаемый, то элемент будет показываться/прятаться при каждом изменении последнего. Если он не наблюдаемый, то видимость будет установлено только один раз, при вызове ko.applyBindings.</p>\n<p>Также в качестве параметра можно передать JavaScript выражение или функцию, которую в последствии выполнит КО и использует вернувшийся результат, чтобы определить видимость элемента.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"visible: myValues().length &gt; 0\"</span>&gt;</span>\n    You will see this message only when 'myValues' has at least one member.\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        myValues: ko.observableArray([]) <span class=\"hljs-comment\">// Initially empty, so message hidden</span>\n    };\n    viewModel.myValues.push(<span class=\"hljs-string\">\"some value\"</span>); <span class=\"hljs-comment\">// Now visible</span>\n    ko.applyBindings(viewModel)\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"text\"><a name=\"text\" class=\"h-link\" href=\"#\"></a>text</h2>\n<p>Текстовый банйдинг отвечает за изменения текста в элементе. В основном используется с тегами <span> и <em>, которые обычно отображают какой-то текст. Технически его можно использовать с любым другим элементом.</p>\n<pre><code class=\"hljs language-html\">Today's message is: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: myMessage\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        myMessage: ko.observable() <span class=\"hljs-comment\">// Initially blank</span>\n    };\n    viewModel.myMessage(<span class=\"hljs-string\">\"Hello, world!\"</span>); <span class=\"hljs-comment\">// Text appears</span>\n    ko.applyBindings(viewModel)\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Принимает один параметр, который устанавливается в свойство <em>DOM</em> элемента <strong>innerText</strong> (для <em>IE</em>) или <strong>textContent</strong> (<em>FireFox</em> и другие). Если передать что-либо другое кроме строки или числа, то параметр приведется к строковому типу посредством вызова его метода <strong>toString</strong>.</p>\n<p>Байндинг заескейпит любой переданный ему <em>html</em> код, например</p>\n<pre><code class=\"hljs language-javascript\">viewModel.myMessage(<span class=\"hljs-string\">\"&lt;i&gt;Hello, world&lt;/i&gt;!\"</span>);\n</code></pre>\n<p>приведет к такому результату</p>\n<pre><code class=\"hljs language-html\">Today's message is: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: myMessage\"</span>&gt;</span><span class=\"hljs-symbol\">&amp;lt;</span>i<span class=\"hljs-symbol\">&amp;gt;</span>Hello, world<span class=\"hljs-symbol\">&amp;lt;</span>i<span class=\"hljs-symbol\">&amp;gt;</span>!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n</code></pre>\n<p>Это достаточно удобно, так как предотвращает <a href=\"http://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D0%B6%D1%81%D0%B0%D0%B9%D1%82%D0%BE%D0%B2%D1%8B%D0%B9_%D1%81%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D0%B8%D0%BD%D0%B3\" target=\"_blank\" rel=\"noopener nofollow\">XSS</a> атаки.</p>\n<h2 id=\"html\"><a name=\"html\" class=\"h-link\" href=\"#\"></a>html</h2>\n<p>Полностью аналогичен предыдущему с той разницей, что он изменяет свойство <strong>innerHTML</strong> у элемента.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"html: details\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"handlebars\"><span class=\"xml\">\n    var viewModel = {\n        details: ko.observable() // Initially blank\n    };\n    viewModel.details(\"<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">em</span>&gt;</span>For further details, view the report <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">'report.html'</span>&gt;</span>here<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">em</span>&gt;</span>\");\n    ko.applyBindings(viewModel)\n</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"css\"><a name=\"css\" class=\"h-link\" href=\"#\"></a>css</h2>\n<p>Этот байндинг удаляет или добавляет <em>CSS</em> класс элементу. Это полезно, например, для подсветки элемента, когда он выбран.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"css: { profitWarning: currentProfit() &lt; 0 }\"</span>&gt;</span>\n   Profit Information\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        currentProfit: ko.observable(<span class=\"hljs-number\">150000</span>) <span class=\"hljs-comment\">// Positive value, so initially we don't apply the \"profitWarning\" class</span>\n    };\n    viewModel.currentProfit(<span class=\"hljs-number\">-50</span>); <span class=\"hljs-comment\">// Causes the \"profitWarning\" class to be applied</span>\n    ko.applyBindings(viewModel);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>В таком случае элементу установится класс profitWarning при условии, что свойство currentProfit станет меньше 0 и удалит этот класс, когда значение станет больше 0.</p>\n<p>Принимает один параметр в виде хэша, ключи которого являются названиями классов, а значения - свойствами/выражениями/функциями связанными с <em>ViewModel</em>. Если нужно добавлять/удалять класс вида my-class, то его нужно взять в апострофы.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"css: { 'my-class': someValue, test: anotherValue }\"</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Это связано с ограничениями в <em>JavaScript</em> на имена ключей.</p>\n<h2 id=\"style\"><a name=\"style\" class=\"h-link\" href=\"#\"></a>style</h2>\n<p>Этот байндинг по синтаксису похож на предыдущий, но меняет он одно или несколько <em>css</em> свойств элемента. Это пригодится когда нужно изменять ширину элемента в зависимости от % закачки файла.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color:#f00\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"style: { width: progress + '%' }\"</span>&gt;</span>\n   Profit Information\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        progress: ko.observable(<span class=\"hljs-number\">0</span>)\n    };\n    viewModel.progress(<span class=\"hljs-number\">50</span>);\n    ko.applyBinding(viewModel)\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Так как ключи являются свойствами <em>JavaScript</em> объекта <strong>style</strong>, то чтобы привязать background-color нужно писать backgroundColor.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"style: { backgroundColor: bgColor }\"</span>&gt;</span>\n   Profit Information\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Полный список <em>JavaScript</em> эквивалентов названий <em>css</em> свойств можно найти <a href=\"http://www.comptechdoc.org/independent/web/cgi/javamanual/javastyle.html\" target=\"_blank\" rel=\"noopener nofollow\">здесь</a>.</p>\n<h2 id=\"attr\"><a name=\"attr\" class=\"h-link\" href=\"#\"></a>attr</h2>\n<p>Байндинг также по синтаксису похож на 2 предыдущих и изменяет значения атрибутов элемента. Это часто используется, когда нужно поменять атрибут <strong>src</strong> у картинки или <strong>href</strong> у ссылки.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"attr: { href: url, title: details }\"</span>&gt;</span>\n    Report\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    <span class=\"hljs-keyword\">var</span> viewModel = {\n        url: ko.observable(<span class=\"hljs-string\">\"year-end.html\"</span>),\n        details: ko.observable(<span class=\"hljs-string\">\"Report including final year-end statistics\"</span>)\n    };\n    ko.applyBindings(viewModel)\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Все остальное аналогично, как в двух предыдущих байндингах.</p>\n<p><strong>По материалам</strong>: <a href=\"http://knockoutjs.com/documentation/visible-binding.html\" target=\"_blank\" rel=\"noopener nofollow\">KnockOut</a></p>","headings":[["visible","visible"],["text","text"],["html","html"],["css","css"],["style","style"],["attr","attr"]],"id":"bajndingi-v-knockout-upravlenie-vidimostyu-i-soderzhimym"}