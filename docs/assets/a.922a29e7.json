{"title":"Ajax авторизация и регистрация в Magento","summary":"На пороге предшествия WEB 3.0, не использовать AJAX технологию - это сверх\nневежества по отношению к пользователю. Поэтому мне захотелось немного оживить\nвозможности такого тяжеловеса, как Magento и реализовать авторизацию и\nрегистрацию асинхронным методом.\n","author":"sstotskyi","categories":["backend","important"],"createdAt":"2011-10-03T09:11:00.000Z","meta":{"keywords":["ajax","magento","авторизация"]},"alias":"ajax-avtorizatsiya-i-registratsiya-v-magento","content":"<p><app-link to=\"page\" params=\"{&quot;id&quot;:&quot;javascript/show-16-ajax-formy-v-magento&quot;}\">В одной из предыдущих статтей</app-link> был создан JavaScript класс формы, которая умеет отправлять данные AJAX-ом. Самое время задействовать его на практике.</p>\n<h2 id=\"kak-vsegda\"><a name=\"kak-vsegda\" class=\"h-link\" href=\"#\"></a>Как всегда</h2>\n<p>Все начинается из <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;php_and_somethings/show-5-magento-sozdanie-crud-modulia&quot;}\">создания нового модуля</app-link>. Стандартный модуль, в котором добавляем новый путь в роутинге (ajax) и добавляем layout-update, который подключает на страницу css и js отвечающие за работу всплывающего окна логин формы.</p>\n<h2 id=\"kontroller-i-zashhita\"><a name=\"kontroller-i-zashhita\" class=\"h-link\" href=\"#\"></a>Контроллер и Защита</h2>\n<p>Создадим контроллер, который наследуется от Mage_Customer_AccountController. Работа с AJAX в Magento достаточна проста, благодаря гибкому механизму и универсальному классу <strong>Varien_Object</strong>. Пример реализации ответа может выглядеть следующим образом</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Freaks_Ajax_Customer_AccountController</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Mage_Customer_AccountController</span>\n</span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loginCustomerAction</span><span class=\"hljs-params\">()</span>\n    </span>{\n        $response = <span class=\"hljs-keyword\">$this</span>-&gt;getResponse();\n        $request  = <span class=\"hljs-keyword\">$this</span>-&gt;getRequest();\n        $result   = <span class=\"hljs-keyword\">new</span> Varien_Object();\n\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">$this</span>-&gt;_getSession()-&gt;isLoggedIn() || !$request-&gt;isPost()) {\n            $result-&gt;redirect = Mage::getUrl(<span class=\"hljs-string\">'*/*/'</span>);\n            <span class=\"hljs-keyword\">return</span> $response-&gt;setBody($result-&gt;toJSON());\n        }\n\n        $login = $request-&gt;getPost(<span class=\"hljs-string\">'login'</span>);\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>($login[<span class=\"hljs-string\">'username'</span>]) || <span class=\"hljs-keyword\">empty</span>($login[<span class=\"hljs-string\">'password'</span>])) {\n            $result-&gt;error = <span class=\"hljs-keyword\">$this</span>-&gt;__(<span class=\"hljs-string\">'Login and password are required.'</span>);\n            <span class=\"hljs-keyword\">return</span> $response-&gt;setBody($result-&gt;toJSON());\n        }\n\n        <span class=\"hljs-comment\">// do login and there are a few lines of code</span>\n        \n        <span class=\"hljs-keyword\">return</span> $response-&gt;setBody($result-&gt;toJSON());\n    }\n}\n</code></pre>\n<p>Еще очень важным моментом является то, что имена методов регистрации и авторизации должны начинаться с <strong>create</strong> и <strong>login</strong> соответственно. Если открыть и посмотреть исходный код класса Mage_Customer_AccountController, увидим что у него метод <strong>preDispatch</strong> проверяет имя метода и если оно не соответствует одному из списка разрешенных (доступных без авторизации), то мы получим ошибку в ответе.</p>\n<p>Далее в моем тяжелом деле помог копипаст, потому что изначально разработчики Magento не продумали возможность авторизации с помощью AJAX, пришлось скопировать обычные методы логина и регистрации и немного их подправить.</p>\n<p>Хотя данные и отправляются асинхронным методом, это не значит, что какой-то спам-бот не будет забивать нам базу новыми пользователями. Поэтому я реализовал защиту з помощью скрытого поля или <a href=\"http://en.wikipedia.org/wiki/Honeypot_(computing)\" target=\"_blank\" rel=\"noopener nofollow\">honey protection</a> (или <a href=\"http://habrahabr.ru/blogs/spam/127604/\" target=\"_blank\" rel=\"noopener nofollow\">здесь</a>).</p>\n<h2 id=\"klientskaya-chast\"><a name=\"klientskaya-chast\" class=\"h-link\" href=\"#\"></a>Клиентская часть</h2>\n<p>Исходники приводить не буду так как там ничего интересного. Просто создается 2 объекта класса <strong>FreaksForm</strong>, а также логика отвечающая за появление и скрытие логин попапа. Вот что получилось</p>\n<p><img src=\"/media/assets/magento_ajax_login.jpg\" alt=\"magento ajax login and register\" title=\"Magento ajax попап\" width=\"700\" height=\"462\"></p>\n<p>Исходники модуля можно скачать <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;backend/2011-10/ajax-avtorizatsiya-i-registratsiya-v-magento/Freaks_Ajax.zip&quot;}\">здесь</app-link></p>","headings":[["kak-vsegda","Как всегда"],["kontroller-i-zashhita","Контроллер и Защита"],["klientskaya-chast","Клиентская часть"]],"id":"ajax-avtorizatsiya-i-registratsiya-v-magento"}