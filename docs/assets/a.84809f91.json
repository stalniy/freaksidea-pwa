{"title":"Magento - импорт/экспорт cli-terminal версия","summary":"Думаю многие сталкивались с импортом/экспортом данных и думаю многие знают,\nчто в Magento - это одно из самых узких мест. Почему? Потому что структура\nбазы данных достаточно сложная для того, чтобы вставлять данные через обычные\nSQL запросы, потому что стандартный импорт/экспорт с использованием профайлов\nработает медленно. Но так было до версии 1.5. Начиная с этой версии появился\nновый модуль для импорта и экспорта продуктов и пользователей. Через веб\nинтерфейс все отлично работает, но что если нужно импортировать/экспортировать\nтовары по крону? Для этого нужно написать cli версию.\n","author":"sstotskyi","categories":["backend"],"createdAt":"2011-10-23T19:40:00.000Z","meta":{"keywords":["magento","import","cli"]},"alias":"magento---import-eksport-cli-terminal-versiya","content":"<p>Думаю многие сталкивались с импортом/экспортом данных и думаю многие знают, что в <em>Magento</em> - это одно из самых узких мест. Почему? Потому что структура базы данных достаточно сложная для того, чтобы вставлять данные через обычные <em>SQL</em> запросы, потому что стандартный импорт/экспорт с использованием профайлов работает медленно. Но так было до версии 1.5. Начиная с этой версии появился новый модуль для импорта и экспорта продуктов и пользователей. Через веб интерфейс все отлично работает, но что если нужно импортировать/экспортировать товары по крону? Для этого нужно написать <strong>cli</strong> версию.</p>\n<h2 id=\"analiziruem\"><a name=\"analiziruem\" class=\"h-link\" href=\"#\"></a>Анализируем</h2>\n<p>Зайдем на страницу импорта (<em>System</em> -&gt; <em>Import/Export</em> -&gt; <em>Import</em>) и будем разбираться как все устроено.</p>\n<p><img src=\"/media/assets/import.png\" alt=\"Import/Export\" title=\"Import/Export\" width=\"600\" height=\"271\"></p>\n<p>Видим, что сначала нужно выбрать тип сущности, которую нужно импортировать, поведение импорта и файл. Существует 3 поведения импорта, в основном оно отвечает за то, как будут обработаны <em>Custom Options</em> для продукта:</p>\n<ul>\n<li><em>append</em> - всегда добавляет <em>Custom Options</em> в продукт, даже если такие уже есть</li>\n<li><em>replace</em> - удаляет старые и вставляет те, которые находятся в файле</li>\n<li><em>delete</em> - удаляет все продукты, которые находятся в импортируемом файле</li>\n</ul>\n<p>При нажатии на кнопку &quot;<em>Check Data</em>&quot; - программа проверит файл на наличие ошибок. Если файл полностью корректный или же имеет допустимое количество ошибок, то появится кнопка <em>Import</em>, нажав на которую будет запущен непосредственно процесс импорта.</p>\n<p>Для того, чтобы написать <strong>cli</strong> вариант нужно по сути просто скопировать функционал контроллера импорта. Давайте откроем файл <em>app/code/core/Mage/ImportExport/controllers/Adminhtml/ImportController.php</em></p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mage_ImportExport_Adminhtml_ImportController</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Mage_Adminhtml_Controller_Action</span>\n</span>{\n    <span class=\"hljs-comment\">/**\n     * Start import process action.\n     *\n     * <span class=\"hljs-doctag\">@return</span> void\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">startAction</span><span class=\"hljs-params\">()</span>\n    </span>{\n        $data = <span class=\"hljs-keyword\">$this</span>-&gt;getRequest()-&gt;getPost();\n        <span class=\"hljs-keyword\">if</span> ($data) {\n            <span class=\"hljs-comment\">//prepare layout</span>\n\n            $importModel = Mage::getModel(<span class=\"hljs-string\">'importexport/import'</span>);\n\n            <span class=\"hljs-keyword\">try</span> {\n                $importModel-&gt;importSource();\n                $importModel-&gt;invalidateIndex();\n                $resultBlock-&gt;addAction(<span class=\"hljs-string\">'show'</span>, <span class=\"hljs-string\">'import_validation_container'</span>)\n                    -&gt;addAction(<span class=\"hljs-string\">'innerHTML'</span>, <span class=\"hljs-string\">'import_validation_container_header'</span>, <span class=\"hljs-keyword\">$this</span>-&gt;__(<span class=\"hljs-string\">'Status'</span>));\n            } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">Exception</span> $e) {\n                $resultBlock-&gt;addError($e-&gt;getMessage());\n                <span class=\"hljs-keyword\">$this</span>-&gt;renderLayout();\n                <span class=\"hljs-keyword\">return</span>;\n            }\n            $resultBlock-&gt;addAction(<span class=\"hljs-string\">'hide'</span>, <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'edit_form'</span>, <span class=\"hljs-string\">'upload_button'</span>, <span class=\"hljs-string\">'messages'</span>))\n                -&gt;addSuccess(<span class=\"hljs-keyword\">$this</span>-&gt;__(<span class=\"hljs-string\">'Import successfully done.'</span>));\n            <span class=\"hljs-keyword\">$this</span>-&gt;renderLayout();\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">$this</span>-&gt;_redirect(<span class=\"hljs-string\">'*/*/index'</span>);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Validate uploaded files action.\n     *\n     * <span class=\"hljs-doctag\">@return</span> void\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">validateAction</span><span class=\"hljs-params\">()</span>\n    </span>{\n        $data = <span class=\"hljs-keyword\">$this</span>-&gt;getRequest()-&gt;getPost();\n        <span class=\"hljs-keyword\">if</span> ($data) {\n            <span class=\"hljs-comment\">// prepare layout</span>\n\n            <span class=\"hljs-keyword\">try</span> {\n                <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@var</span> $import Mage_ImportExport_Model_Import */</span>\n                $import = Mage::getModel(<span class=\"hljs-string\">'importexport/import'</span>);\n                $validationResult = $import-&gt;validateSource($import-&gt;setData($data)-&gt;uploadSource());\n\n                <span class=\"hljs-comment\">// process validation result</span>\n            } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">Exception</span> $e) {\n                $resultBlock-&gt;addNotice(<span class=\"hljs-keyword\">$this</span>-&gt;__(<span class=\"hljs-string\">'Please fix errors and re-upload file'</span>))\n                    -&gt;addError($e-&gt;getMessage());\n            }\n            <span class=\"hljs-keyword\">$this</span>-&gt;renderLayout();\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">$this</span>-&gt;_getSession()-&gt;addError(<span class=\"hljs-keyword\">$this</span>-&gt;__(<span class=\"hljs-string\">'Data is invalid or file is not uploaded'</span>));\n            <span class=\"hljs-keyword\">$this</span>-&gt;_redirect(<span class=\"hljs-string\">'*/*/index'</span>);\n        }\n    }\n}\n</code></pre>\n<p>Я немного укоротил его. По сути нужно использовать код находящийся в конструкции <strong>try</strong>... <strong>catch</strong> и вместо того, чтобы устанавливать ошибки в сесию или блок просто выведем их на экран.</p>\n<h2 id=\"pristupaem-k-rabote\"><a name=\"pristupaem-k-rabote\" class=\"h-link\" href=\"#\"></a>Приступаем к работе</h2>\n<p>Прежде чем начать, нужно обсудить интерфейс скрипта. Нужно, чтобы ему можно было передавать опции: какую сущность импортировать (продукт, пользователь), какое поведение использовать, путь к импортируемому файлу, ну и конечно же опцию <em>verbose</em>, с помощью которой можно следить за работой импорта. Дадим опциям отвечающим за поведение и путь к файлу значения по умолчанию <em>replace</em> и <em>var/import/%entity_type%.csv</em> соответственно.</p>\n<p>Давайте напишем функцию, которая будет парсить опции из массива аргументов (работает только с длинными имена опций).</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseArgs</span><span class=\"hljs-params\">(array $data)</span> </span>{\n    $args    = <span class=\"hljs-keyword\">array</span>();\n    $current = <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-keyword\">foreach</span> ($data <span class=\"hljs-keyword\">as</span> $arg) {\n        $match = <span class=\"hljs-keyword\">array</span>();\n        <span class=\"hljs-keyword\">if</span> (preg_match(<span class=\"hljs-string\">'#^--([\\w\\d_-]{1,})$#'</span>, $arg, $match) || preg_match(<span class=\"hljs-string\">'#^-([\\w\\d_]{1,})$#'</span>, $arg, $match)) {\n            $current = $match[<span class=\"hljs-number\">1</span>];\n            $args[$current] = <span class=\"hljs-keyword\">true</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">if</span> ($current) {\n                $args[$current] = $arg;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (preg_match(<span class=\"hljs-string\">'#^([\\w\\d_]{1,})$#'</span>, $arg, $match)) {\n                $args[$match[<span class=\"hljs-number\">1</span>]] = <span class=\"hljs-keyword\">true</span>;\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> $args;\n}\n</code></pre>\n<p>Чтобы работать с моделями <em>Magento</em> в отдельном скрипте, достаточно подключить файл <em>app/Mage.php</em> а также инициализировать объект приложения</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'app/Mage.php'</span>;\n\nMage::app(<span class=\"hljs-string\">'admin'</span>);\n</code></pre>\n<p>Также оставим возможность запускать скрипт через <em>http</em>, чтобы можно было проверить побыстрее и по-проще. Для этого установим такую проверку</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">empty</span>($_SERVER[<span class=\"hljs-string\">'REQUEST_METHOD'</span>])) {\n    $args = $_GET;\n} <span class=\"hljs-keyword\">else</span> {\n    $args = parseArgs($_SERVER[<span class=\"hljs-string\">'argv'</span>]);\n}\n</code></pre>\n<p>Посмотрим теперь на весь код скрипта</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'app/Mage.php'</span>;\n\n<span class=\"hljs-comment\">// implementation 'parseArgs' function</span>\n<span class=\"hljs-comment\">// implementation 'reindexAll' function</span>\n<span class=\"hljs-comment\">// implementation 'printLog' function</span>\n\n<span class=\"hljs-comment\">// check is a web request</span>\n<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">empty</span>($_SERVER[<span class=\"hljs-string\">'REQUEST_METHOD'</span>])) {\n    $args = $_GET;\n} <span class=\"hljs-keyword\">else</span> {\n    $args = parseArgs($_SERVER[<span class=\"hljs-string\">'argv'</span>]);\n}\n\n<span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-comment\">// initialize mage app</span>\n    Mage::app(<span class=\"hljs-string\">'admin'</span>);\n\n    <span class=\"hljs-comment\">// add default options</span>\n    $args = $args + <span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'behavior'</span> =&gt; <span class=\"hljs-string\">'replace'</span>,\n        <span class=\"hljs-string\">'source'</span>   =&gt; Mage::getBaseDir(<span class=\"hljs-string\">'var'</span>) . DS . <span class=\"hljs-string\">'import'</span> . DS . $args[<span class=\"hljs-string\">'entity'</span>] . <span class=\"hljs-string\">'.csv'</span>\n    );\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>($args[<span class=\"hljs-string\">'entity'</span>])) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Exception</span>(<span class=\"hljs-string\">'Entity type is missed'</span>);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">empty</span>($args[<span class=\"hljs-string\">'source'</span>]) || !is_readable($args[<span class=\"hljs-string\">'source'</span>])) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Exception</span>(sprintf(<span class=\"hljs-string\">'Invalid source file \"%s\"'</span>, $args[<span class=\"hljs-string\">'source'</span>]));\n    }\n\n    $import = Mage::getModel(<span class=\"hljs-string\">'importexport/import'</span>)-&gt;setData(<span class=\"hljs-keyword\">array</span>(\n        <span class=\"hljs-string\">'entity'</span>   =&gt; $args[<span class=\"hljs-string\">'entity'</span>],\n        <span class=\"hljs-string\">'behavior'</span> =&gt; $args[<span class=\"hljs-string\">'behavior'</span>]\n    ));\n\n    $result   = $import-&gt;validateSource($args[<span class=\"hljs-string\">'source'</span>]);\n    $import-&gt;setValidationResult($result);\n\n    $canForce = $import-&gt;getProcessedRowsCount() != $import-&gt;getInvalidRowsCount();\n    $canForce = $canForce &amp;&amp; $import-&gt;getErrorsLimit() &gt; $import-&gt;getErrorsCount();\n    <span class=\"hljs-keyword\">if</span> ($canForce || $result) {\n        $result = $import-&gt;importSource();\n        reindexAll();\n    }\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">isset</span>($args[<span class=\"hljs-string\">'verbose'</span>])) {\n        printLog($import);\n    }\n} <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">Exception</span> $e) {\n    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">'Script has thrown an exception: '</span>, $e-&gt;getMessage(), <span class=\"hljs-string\">\"\\n\"</span>;\n}\n</code></pre>\n<p>Проанализируем работу. Сначала подключаем сердце скрипта - <em>Mage.php</em>, создаем 3 вспомогательные функции, дальше получаем аргументы из командной строки или через <em>http</em> запрос, добавляем опции по умолчанию и проверяем их на корректность. Дальше создаем модель импорта с определенными параметрами и проверяем импортируемый файл на корректность. Потом проверяем можно ли сделать импорт, даже если есть ошибки в файле. Если файл успешно прошел проверку или можно импортировать с ошибками, то делаем это и реиндексируем данные в <em>Magento</em>. Если передана опция <em>verbose</em>, то выводим <em>log-trace</em> на экран.</p>\n<p>Пример использования в командной строке</p>\n<pre><code class=\"hljs language-bash\">enej@linux:/home/pub/www/vv$ php -f import.php -- --entity catalog_product --<span class=\"hljs-built_in\">source</span> ~/Downloads/catalog_product_20111023_163631.csv --verbose\n1: Begin data validation\n2: Validation finished successfully\n3: Checked rows: 60, checked entities: 49, invalid rows: 0, total errors: 0\n4: Done import data validation\n5: Begin import of <span class=\"hljs-string\">\"catalog_product\"</span> with <span class=\"hljs-string\">\"replace\"</span> behavior\n6: Checked rows: 60, checked entities: 49, invalid rows: 0, total errors: 0\n7: Import has been <span class=\"hljs-keyword\">done</span> successfuly.\n</code></pre>\n<p>Исходник можно скачать <a href=\"/media/assets/import.zip\" title=\"Import/Export\" download=\"import.zip\">здесь</a>. Реализация <strong>cli</strong> версии экспорта полностью аналогична импорту.</p>","headings":[["analiziruem","Анализируем"],["pristupaem-k-rabote","Приступаем к работе"]],"id":"magento-import-eksport-cli-terminal-versiya"}