{"title":"Что нужно знать новичку в Linux: манипуляция файлами","summary":"Часто возникает проблема обработки нескольких файлов, например, переименование\nпо шаблону или если это картинки - cropping or resizing. Именно для\nманипуляций с файлами и директориями Вам понадобятся эти знания\n","author":"sstotskyi","categories":["linux","important"],"createdAt":"2011-10-05T10:33:00.000Z","meta":{"keywords":["linux","манипуляция","файлы"]},"alias":"chto-nuzhno-znat-novichku-v-linux-manipulyatsiya-fajlami","content":"<p>Представляю Вам часто используемые команды для манипуляции файлами и директориями</p>\n<ul>\n<li><strong>cp</strong> - копирует файлы и директории</li>\n<li><strong>mv</strong> - переименовывает или перемещает файлы и директории</li>\n<li><strong>rm</strong> - удаляет файлы и директории</li>\n<li><strong>mkdir</strong> - создает файлы и директории</li>\n</ul>\n<p>Это базовые команды для манипуляцией файлами и директориями. Буду честен, задачи которые выполняют эти команды намного проще совершить при помощи графического интерфейса. В файловом менеджере Вы можете перетаскивать файлы/каталоги, переименовывать, копировать, удалять. Так зачем же использовать выше перечисленные команды?</p>\n<p>Ответ прост - мощность и гибкость. Простые операции проще делать при помощи графического файлового менеджера, но сложные - будет на много проще при помощи командной строки. Например, как Вы будете копировать все CSS файлы из одной директории в другую и только те, которых не существуют в каталоге куда копируем или версия которых более новая? Достаточно сложное задание для графического файлового менеджера и достаточно простое для командной строки</p>\n<h2></h2>\n<pre><code class=\"hljs language-bash\">enej@linux:/home/pub/www/vseshini$ cp -u *.css destination\n</code></pre>\n<h2 id=\"shablony\"><a name=\"shablony\" class=\"h-link\" href=\"#\"></a>Шаблоны</h2>\n<p>Перед тем, как начать использовать эти команды, стоит упомянуть о шаблонах, которые делают интерфейс командной строки более гибким и мощным. Поскольку в <strong>Shell</strong> работа с файлами ведется достаточно часто, то он должен предоставлять простой способ группировки файлов. Шаблоны позволяют Вам выбирать файлы основываясь на группе символов. Рассмотрим их</p>\n<ol>\n<li><strong>*</strong> - означает любое к-во символов (0 - бесконечность)</li>\n<li><strong>?</strong> - означает любой 1 символ</li>\n<li><strong>[символы]</strong> - любой символ из группы (например, [ae] - значит символ &quot;a&quot; или &quot;e&quot;). Для тех, кто знаком с регулярными выражениями, будет приятной новостью, что здесь можно использовать классы символов по стандарту <strong>POSIX</strong></li>\n<li><strong>[!символы]</strong> - любой символ, которого нет в группе.</li>\n</ol>\n<p>Используя шаблоны можно построить достаточно сложных критерии выборки файлов. Вот несколько примеров</p>\n<ol>\n<li><strong>g*</strong> - любой файл, имя которого начинается из символа &quot;g&quot;</li>\n<li><strong>b*.txt</strong> - любой файл, имя которого начинается на &quot;b&quot; и заканчивается &quot;.txt&quot;</li>\n<li><strong>Data???</strong> - все файлы, имя которых состоит из &quot;Data&quot; и еще 3 любых символов</li>\n<li><strong>[abc]*</strong> - все файлы, имя которых начинается на &quot;a&quot;, &quot;b&quot; или &quot;c&quot;</li>\n<li><strong>BACKUP.[[:digit:]][[:digit:]]</strong> - любой файл, имя которого начинается с &quot;BACKUP.&quot; и за которым следует 2 числа (в стандарте POSIX [:digit:] - группа символов отвечающая за любое число, тоже что и [0123456789])</li>\n</ol>\n<p>Шаблоны можно использовать с любыми командами, которые работают с файлами (это относится и к <strong>ls</strong> команде).</p>\n<h2 id=\"kopirovanie-fajlov-cp\"><a name=\"kopirovanie-fajlov-cp\" class=\"h-link\" href=\"#\"></a>Копирование файлов - <strong>cp</strong></h2>\n<p>В своей самой простой форме эта команда просто копирует файл, если файл, куда копируем, существует он перезаписывается</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ cp file1 file2\n</code></pre>\n<p>Во избежания перезаписывания можно использовать команду следующим образом</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ cp -i file1 file2\n</code></pre>\n<p>Если новый файл существует, то команда спросит перезаписывать или нет. Также можно использовать для множественного копирования файлов</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ cp file1 file2 file3 directory\n</code></pre>\n<p>Например, следующая команда скопирует весь контент директории dir1 в dir2</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ cp -R dir1 dir2\n</code></pre>\n<h2 id=\"peremeshhenie-mv\"><a name=\"peremeshhenie-mv\" class=\"h-link\" href=\"#\"></a>Перемещение - mv</h2>\n<p>Эта команда предоставляет две разные возможности, в зависимости от того как ее использовать. Умеет переименовывать и перемещать файлы. Например, переименовать файл, если файл с новым именем существует, он перезапишется</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ mv filename1 filename2\n</code></pre>\n<p>Во избежание произвола и самовольного перезаписывания, команда по аналогии к <strong>cp</strong> имеет опцию <strong>-i</strong>. Переместить файлы в другую директорию</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ mv file1 file2 file3 directory\n</code></pre>\n<p>Также умеет работать с директориями</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ mv dir1 dir2\n</code></pre>\n<p>Если каталог dir2 существует, то dir1 будет перенесен в нее, если не существует, то dir1 будет переименован в dir2.</p>\n<h2 id=\"sozdanie-katalogov-mkdir\"><a name=\"sozdanie-katalogov-mkdir\" class=\"h-link\" href=\"#\"></a>Создание каталогов - mkdir</h2>\n<p>Данная команда позволяет создавать каталоги и их структуры. Например, результатом выполнения следующей строки будет создание 4 директорий.</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ mkdir dir1 dir2 dir3 dir4\n</code></pre>\n<p>Также, умеет создавать структуру каталогов</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ mkdir -p dir1/dir2/dir3/dir4\n</code></pre>\n<p>Результатом будет также создание 4 директорий, но в с учетом указанной структуры, т.е. каталог dir1 содержит в себе остальные 3.</p>\n<h2 id=\"udalenie-rm\"><a name=\"udalenie-rm\" class=\"h-link\" href=\"#\"></a>Удаление - rm</h2>\n<p>Позволяет удалять каталоги и файлы. Удалить файл</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ rm file\n</code></pre>\n<p>Удалить директорию</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ rm -r dir\n</code></pre>\n<p>Будьте особенно осторожны с этой командой, поскольку после удаления будет невозможным восстановить информацию. Не забывайте, что здесь нет корзины, как у Windows или графических оболочках для Linux. Перед тем как использовать <strong>rm</strong> из шаблонами, проверьте шаблон на команде <strong>ls</strong>, чтобы быть на 100% уверенным какие файлы исчезнут навсегда</p>\n<p>Также не забывайте, что более детальную информацию о команде можно получить из менуала (<strong>man command_name</strong>)</p>\n<p>По мотивам <a href=\"http://linuxcommand.org\" target=\"_blank\" rel=\"noopener nofollow\">http://linuxcommand.org</a></p>","headings":[["shablony","Шаблоны"],["kopirovanie-fajlov-cp","Копирование файлов -  cp"],["peremeshhenie-mv","Перемещение - mv"],["sozdanie-katalogov-mkdir","Создание каталогов - mkdir"],["udalenie-rm","Удаление - rm"]],"id":"chto-nuzhno-znat-novichku-v-linux-manipulyatsiya-fajlami"}