{"title":"Учимся программировать в Shell: функции","summary":"В Shell, как и в большинстве других языков программирования можно создавать\nфункции, чтобы не повторять код или же просто для работы с более абстрактными\nпонятиями. Посмотрим на них поближе\n","author":"sstotskyi","categories":["devops","important"],"createdAt":"2011-10-10T11:36:00.000Z","meta":{"keywords":["linux","Bash","функции"]},"alias":"uchimsya-programmirovat-v-shell-funktsii","content":"<p>Если раньше о понятии &quot;команда&quot; мы говорили абстрактно, то сейчас, предстоит разобраться, что же это такое на самом деле. Команды бывают разных типов. Некоторые из них встроены в Shell, например <strong>cd</strong> и <strong>pwd</strong> (посмотреть список встроенных команд в Bash можно в мануале).</p>\n<p>Другой тип команд - это встроенные программы. Большинство команд относится именно к этой группе. Эти программы хранятся в директориях, которые перечислены в переменной <strong>$PATH</strong>.</p>\n<p>Последние две группы команд существуют только во время вашей рабочей сессии на протяжении которой, система хранит информацию о них в оперативной памяти. Эта информация также называется <em>рабочей средой</em> (<em>environment</em>). Посмотреть весь список переменных рабочей среды можно при помощи команды <strong>env</strong>. Если нужно найти специфическую переменную, то можно перенаправить поток на команду <strong>grep</strong></p>\n<pre><code class=\"hljs language-bash\">enej@linux:/home/pub/www/vv$ env | grep PATH\nPATH=/home/enej/bin:/usr/<span class=\"hljs-built_in\">local</span>/sbin:/usr/<span class=\"hljs-built_in\">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/bin:/bin\n</code></pre>\n<p>В число этих 2 последних групп команд входят элиасы (aliases) и shell-функции.</p>\n<h2 id=\"aliases\"><a name=\"aliases\" class=\"h-link\" href=\"#\"></a>Aliases</h2>\n<p>Alias - это просто псевдоним для команды, обычно используется для удобства и краткости написания. Например, если Вам надоело писать <strong>ls -l</strong>, то можно создать alias с именем <strong>lf</strong> (ls full format)</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ <span class=\"hljs-built_in\">alias</span> lf=<span class=\"hljs-string\">'ls -l'</span>\nenej@linux:~$ lf\ntotal 4192\n-rw-r--r--  1 enej enej   22049 2011-10-09 22:00 111.PNG\n-rw-r--r--  1 enej enej 1089086 2011-10-09 13:24 all.rar\ndrwxr-xr-x  3 enej enej    4096 2011-07-04 19:45 bin\ndrwxr-xr-x  8 enej enej    4096 2011-05-01 10:44 Books\n..........................................................\n</code></pre>\n<p>Чтобы вывести текущую дату в определенном формате (для этого используется команда <strong>date</strong>)</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ <span class=\"hljs-built_in\">alias</span> today=<span class=\"hljs-string\">'date +\"%A, %B %-d, %Y\"'</span>\nenej@linux:~$ today\nMonday, October 10, 2011\n</code></pre>\n<p>Таким образом Вы можете создать множество своих команд. Но не забывайте если Вы хотите, чтобы изменения сохранились при следующем входе в систему, то команды нужно прописать в один из файлов: <strong>.bashrc</strong> или <strong>.bash_profile</strong></p>\n<h2 id=\"shell-funkczii\"><a name=\"shell-funkczii\" class=\"h-link\" href=\"#\"></a>Shell функции</h2>\n<p>Псевдонимы (alias-ы) удобны для реализации простых команд. Но что если нужно скомбинировать работу нескольких команд и внедрить какую-то логику. Для этого используются shell функции. Например, давайте напишем ф-цию <strong>today</strong>, которая будет выводить текущую дату</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-keyword\">function</span> today {\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Today's date is:\"</span>\n    date +<span class=\"hljs-string\">\"%A, %B %-d, %Y\"</span>\n}\n</code></pre>\n<p>Намного нагляднее и понятней, чем если бы это было сделано псевдонимом. Функции, также как и команды, могут принимать аргументы. Для этого в Bash существуют специальные переменные. Это относится как к написанным скриптам (файлам) так и к функциям.</p>\n<p>Список всех аргументов переданных команде хранится в переменной <strong>$@</strong>. В переменной <strong>$0</strong> - хранится путь к файлу (команды), который запускается. Все остальные переменные вида <strong>$1</strong>, <strong>$2</strong>,..., <strong>$n</strong> - хранят в себе переданные по очереди аргументы. Чтобы убедится в этом, напишем простой скрипт</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash\n</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">t</span></span>() {\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$0 in fn: '</span> <span class=\"hljs-variable\">$0</span>;\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$1 in fn: '</span> <span class=\"hljs-variable\">$1</span>;\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$2 in fn: '</span> <span class=\"hljs-variable\">$2</span>;\n}\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'All Script Args: '</span> <span class=\"hljs-variable\">$@</span>;\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$0 = '</span> <span class=\"hljs-variable\">$0</span>;\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$1 = '</span> <span class=\"hljs-variable\">$1</span>;\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$2 = '</span> <span class=\"hljs-variable\">$2</span>;\nt 6 7 8;\n</code></pre>\n<p>Сохраним его в свою папку <strong>bin</strong>, установим права на выполнение и запустим с несколькими аргументами</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/bin$ ./test.sh 1 2 3\nAll Script Args:  1 2 3\n<span class=\"hljs-variable\">$0</span> =  ./test.sh\n<span class=\"hljs-variable\">$1</span> =  1\n<span class=\"hljs-variable\">$2</span> =  2\n<span class=\"hljs-variable\">$0</span> <span class=\"hljs-keyword\">in</span> fn:  ./test.sh\n<span class=\"hljs-variable\">$1</span> <span class=\"hljs-keyword\">in</span> fn:  6\n<span class=\"hljs-variable\">$2</span> <span class=\"hljs-keyword\">in</span> fn:  7\n</code></pre>\n<p>Как видим переменная <strong>$0</strong> глобальная для всего файла! Но другие аргументы находятся в области видимости команды. Если нужно передать все аргументы переданные в команду какой-то функции, то это можно сделать так</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash\n</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">t</span></span>() {\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$0 in fn: '</span> <span class=\"hljs-variable\">$0</span>;\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$1 in fn: '</span> <span class=\"hljs-variable\">$1</span>;\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$2 in fn: '</span> <span class=\"hljs-variable\">$2</span>;\n}\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'All Script Args: '</span> <span class=\"hljs-variable\">$@</span>;\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$0 = '</span> <span class=\"hljs-variable\">$0</span>;\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$1 = '</span> <span class=\"hljs-variable\">$1</span>;\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'$2 = '</span> <span class=\"hljs-variable\">$2</span>;\nt <span class=\"hljs-variable\">$@</span>;\n</code></pre>\n<p>Обратите внимание на последнюю строку - все аргументы переданные в файл <strong>test.sh</strong> передаются во внутреннюю функцию <strong>t</strong>.</p>\n<p><strong>P.S.</strong>: стоит обратить внимание, что переменные в одиночных кавычках (апострофах) не интерполируются. Для определения типа команды используйте <strong>type command_name</strong></p>","headings":[["aliases","Aliases"],["shell-funkczii","Shell функции"]],"id":"uchimsya-programmirovat-v-shell-funktsii"}