{"title":"Что нужно знать новичку в Linux: i/o переадресация","summary":"Одной из основных и самых мощных возможностей командной строки, является\nперенаправления потоков. Простыми словами - это возможность передачи\nрезультата выполнения одной команды другой или чтение/запись в файл\n","author":"sstotskyi","categories":["linux","important"],"createdAt":"2011-10-06T14:09:00.000Z","meta":{"keywords":["linux","input","output"]},"alias":"chto-nuzhno-znat-novichku-v-linux-i-o-pereadresatsiya","content":"<p>Как Вы уже увидели большинство команд, таких как <strong>ls</strong>, выдают информацию на дисплей. Однако, используя специальные обозначения можно перенаправить результат вывода большинства команд в файл, на устройство или передать как входной поток для другой команды</p>\n<h2 id=\"standartnyj-vyvod-standard-output\"><a name=\"standartnyj-vyvod-standard-output\" class=\"h-link\" href=\"#\"></a>Стандартный вывод (Standard Output)</h2>\n<p>Большинство команд в командной строке для чтобы отобразить результат роботы на мониторе пользователя отсылают данные на стандартный вывод. По умолчанию, стандартный вывод перенаправляет данные на дисплей. Чтобы переадресовать поток в файл используется символ &quot;<strong>&gt;</strong>&quot;</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ ls &gt; file_list.txt\n</code></pre>\n<p>В этом примере выполняется команда <strong>ls</strong> и результат ее выполнения записывается в <strong>file_list.txt</strong> (если файл существует, то он будет перезаписан!). Если Вы хотите, чтобы результат записывался в конец файла, а не перезаписывал его используйте символы &quot;<strong>&gt;&gt;</strong>&quot;</p>\n<pre><code class=\"hljs language-php\">enej@linux:~$ ls &gt;&gt; file_list.txt\n</code></pre>\n<p>Поскольку результат работы команды был перенаправлен в файл, то на экране вы ничего не увидите. Если файла не существовало на момент выполнения команды он будет создан.</p>\n<h2 id=\"standartnyj-vvod-standard-input\"><a name=\"standartnyj-vvod-standard-input\" class=\"h-link\" href=\"#\"></a>Стандартный ввод (Standard Input)</h2>\n<p>Многие команды умеют принимать аргумент из стандартного ввода. Обычно стандартный ввод - это данные введенные пользователем с клавиатуры, но как и стандартный вывод может быть перенаправлен. Чтобы отослать файл на стандартный ввод используется символ &quot;<strong>&lt;</strong>&quot;</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ sort &lt; file_list.txt\n</code></pre>\n<p>В данном примере команда <strong>sort</strong> (man sort) читает файл из стандартного ввода и сортирует его строки. Забавно будет выглядеть, если перенаправить результат работы в другой файл</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ sort &lt; file_list.txt &gt; sorted_file_list.txt\n</code></pre>\n<p>Будьте осторожны с такими конструкциями, потому что они плохо читаемые и можно ошибиться с порядком перенаправления. Обязательным условием является, то что операторы перенаправления (&quot;<strong>&gt;</strong>&quot;, &quot;<strong>&lt;</strong>&quot;) должны следовать после всех опций и аргументов команды.</p>\n<h2 id=\"pajpy-pipes\"><a name=\"pajpy-pipes\" class=\"h-link\" href=\"#\"></a>Пайпы (Pipes)</h2>\n<p>Наиболее полезным и мощным инструментом является создание цепочки команды, которые передают результат своего вывода на стандартный ввод другой команды. Это делается при помощи пайпа (&quot;<strong>|</strong>&quot;). Один из любимых примеров</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ ls -l | less\n</code></pre>\n<p>Здесь результат работы команды <strong>ls</strong> перенаправляется на стандартный ввод команды <strong>less</strong>. Используя подобный трюк, можно вывод любой команды сделать прокручиваемым. Составляя такие цепочки команд можно получить достаточно полезные конструкции, например</p>\n<ul>\n<li>\n<p>10 самых новых файлов в текущей директории.</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/bin$ ls -lt | head\n</code></pre>\n</li>\n<li>\n<p>список папок и их размер отсортированных от наибольшего к наименьшему</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/bin$ du | sort -nr\n</code></pre>\n</li>\n<li>\n<p>к-во файлов в директории и ее поддиректориях</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~/bin$ find . -<span class=\"hljs-built_in\">type</span> f -<span class=\"hljs-built_in\">print</span> | wc -l\n</code></pre>\n</li>\n</ul>\n<h2 id=\"filtry\"><a name=\"filtry\" class=\"h-link\" href=\"#\"></a>Фильтры</h2>\n<p>Существует группа команд, которые удобно использовать для фильтрации данных. Обычно они читают информацию из стандартного ввода, фильтруют/преобразовывают ее и выводят на стандартный вывод. Вот несколько из них</p>\n<ul>\n<li><strong>sort</strong> - сортирует стандартный ввод и передает результат на стандартный вывод</li>\n<li><strong>uniq</strong> - получает сортированный поток данных на стандартный ввод и удаляет повторяющиеся строки</li>\n<li><strong>grep</strong> - одна из часто используемых и очень мощных команд. Читает данные из стандартного ввода, фильтрует их по определенному шаблону (<a href=\"http://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F\" target=\"_blank\" rel=\"noopener nofollow\">регулярному выражению</a>) и выдает результат. Кстати слово <strong>грепать</strong> пошло от имени этой команды и по своему существу означает &quot;искать&quot;.</li>\n<li><strong>fmt</strong> - читает текст из стандартного ввода и выводит отформатированный текст</li>\n<li><strong>pr</strong> - читает текст из стандартного ввода и разбивает его на страницы, добавляя также колонтитулы. Используется перед отправкой данных на принтер</li>\n<li><strong>head</strong> - возвращает несколько первых строк из стандартного ввода (по умолчанию 10)</li>\n<li><strong>tail</strong> - возвращает несколько последних строк. Очень полезная для просмотра лог файлов</li>\n<li><strong>tr</strong> - транслитерирует символы. Заменяет один символ на другой, например, полезно для конвертации конца строки из DOS формата в Unix формат</li>\n<li><strong>sed</strong> - это по сути целый язык. В самом простом случае используется для поиска и замены строк в соответствии с регулярным выражением</li>\n<li><strong>awk</strong> - очень мощный язык программирования. Используется для написания сложных фильтров и преобразований</li>\n</ul>\n<h2 id=\"neskolko-tryukov\"><a name=\"neskolko-tryukov\" class=\"h-link\" href=\"#\"></a>Несколько трюков</h2>\n<p>В Linux существует достаточно мощная команда <strong>ltr</strong>, которая читает данные из стандартного ввода и отправляет их на принтер. Вот несколько примеров</p>\n<pre><code class=\"hljs language-php\">enej@linux:~/bin$ cat poorly_formatted_report.txt | fmt | pr | lpr\nenej@linux:~/bin$ cat unsorted_list_with_dupes.txt | sort | uniq | pr | lpr\n</code></pre>\n<p>Команда <strong>cat</strong> читает весь файл и отправляет его на стандартный вывод, куда тот в свою очередь переадресовывается на команду форматирования и потом отправляется на принтер.</p>\n<p>Очень полезным является возможность просмотра внутренностей tar архивированного файла</p>\n<pre><code class=\"hljs language-bash\">tar tzvf name_of_file.tar.gz | less\n</code></pre>\n<p><strong>P.S.</strong>: не забываем о прекрасном менуеле в Linux!</p>","headings":[["standartnyj-vyvod-standard-output","Стандартный вывод (Standard Output)"],["standartnyj-vvod-standard-input","Стандартный ввод (Standard Input)"],["pajpy-pipes","Пайпы (Pipes)"],["filtry","Фильтры"],["neskolko-tryukov","Несколько трюков"]],"id":"chto-nuzhno-znat-novichku-v-linux-i-o-pereadresatsiya"}