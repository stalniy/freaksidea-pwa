{"title":"Управляющие конструкции в KnockOut","summary":"По аналогии большинству языков программирования в Knockout реализованы\nосновные управляющие конструкции: foreach, if, ifnot и with. foreach будет\nполезен при итерировании по массиву значений, if - для принятия какого-либо\nрешения и with - для создания определенного контекста выполнения. Рассмотрим\nих более детально.\n","author":"sstotskyi","categories":["frontend"],"createdAt":"2012-06-06T14:17:00.000Z","meta":{"keywords":["knockout","observables","конструкции"]},"alias":"upravlyayuschie-konstruktsii-v-knockout","content":"<p>По аналогии большинству языков программирования в <em>Knockout</em> реализованы основные управляющие конструкции: <strong>foreach</strong>, <strong>if</strong>, <strong>ifnot</strong> и <strong>with</strong>. foreach будет полезен при итерировании по массиву значений, if - для принятия какого-либо решения и with - для создания определенного контекста выполнения. Рассмотрим их более детально.</p>\n<h2 id=\"konstrukcziya-foreach\"><a name=\"konstrukcziya-foreach\" class=\"h-link\" href=\"#\"></a>Конструкция foreach</h2>\n<p>Этот байндинг копирует часть разметки для каждого элемента в массиве. А это очень полезно при отображении списков или таблиц. Если массив является наблюдаемым, то при удалении (или добавлении) какого-либо элемента, автоматически удалится (или добавится новая) часть разметки, которая отвечает за его отображение. И, конечно же, есть возможность смешивать управляющие конструкции в произвольном порядке, с любой вложенностью. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>First name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Last name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"foreach: people\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: firstName\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: lastName\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    ko.applyBindings({\n        people: [\n            { firstName: <span class=\"hljs-string\">'Bert'</span>, lastName: <span class=\"hljs-string\">'Bertington'</span> },\n            { firstName: <span class=\"hljs-string\">'Charles'</span>, lastName: <span class=\"hljs-string\">'Charlesforth'</span> },\n            { firstName: <span class=\"hljs-string\">'Denise'</span>, lastName: <span class=\"hljs-string\">'Dentiste'</span> }\n        ]\n    });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Посмотреть живой пример можно <a href=\"http://knockoutjs.com/documentation/foreach-binding.html#example_2_live_example_with_addremove\" target=\"_blank\" rel=\"noopener nofollow\">здесь</a>. Чтобы создать кнопки удаления и добавления достаточно реализовать 2 метода во <em>ViewModel</em>:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> viewModel = {\n    <span class=\"hljs-attr\">people</span>: ko.observableArray([\n        {<span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">\"John\"</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">\"Kovalskiy\"</span>},\n        {<span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">\"Peter\"</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">\"Ruskiy\"</span>},\n        {<span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">\"Stefan\"</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">\"Salvatore\"</span>}\n    ])\n};\n\n<span class=\"hljs-keyword\">var</span> self = viewModel;\nviewModel.addPerson = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    self.people.push({<span class=\"hljs-attr\">firstName</span>: <span class=\"hljs-string\">\"Test \"</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>, <span class=\"hljs-attr\">lastName</span>: <span class=\"hljs-string\">\"Blah \"</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>});\n};\n\nviewModel.removePerson = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    self.people.remove(<span class=\"hljs-keyword\">this</span>);\n};\n\nko.applyBindings(viewModel);\n</code></pre>\n<p>И потом забайндить их на разметке:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"visible: people().length &gt; 0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>First name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Last name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"foreach: people\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: firstName\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: lastName\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"click: $root.removePerson\"</span>&gt;</span>remove<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"click: addPerson\"</span>&gt;</span>Add Person<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre>\n<p>Переменную <strong>$root</strong> нужно было использовать, так как каждая строка - это контекст элемента массива <strong>ViewModel::people</strong>, у которого нет метода <em>removePerson</em>. По-этому нужно было сослаться на главный контекст, т.е. на <em>ViewModel</em>. Уже зная о байндинге <strong>visible</strong>, можно добавить его к таблице и делать последнюю невидимой, если массив людей пуст.</p>\n<p><strong>foreach</strong> принимает единственный параметр: объект по-которому нужно итерировать или же объект настроек:</p>\n<ul>\n<li><strong>data</strong> - итерируемый массив.</li>\n<li><strong>includeDestroyed</strong> - флаг, который указывает показывать ли элементы в которых свойство <strong>_destroy</strong> установлено в <strong>true</strong>. По умолчанию равно <strong>false</strong>.</li>\n<li><strong>afterRender</strong> - callback функция, которая вызывается каждый раз после того как новая порция разметки вставлена в документ. Принимает 2 параметра: массив вставленных DOM элементов и элемент-контекст.</li>\n<li><strong>afterAdd</strong> - аналогичен предыдущему за исключением, что вызывается каждый раз когда в массив добавляется новый элемент. Принимает 3 параметра: DOM элемент, который будет вставлен в документ, индекс нового элемента массива и сам элемент массива. Можно использовать для реализации анимации, когда элемент добавляется в массив. Например, при помощи функции <strong>jQuery</strong> $(domNode).fadeIn().</li>\n<li><strong>beforeRemove</strong> - вызывается после того, как элемент из массива удален, но его разметка все еще присутствует в документе. Принимает 3 параметра: DOM элемент, который будет удален, индекс удаленного элемента массива и сам элемент. Полезен для реализации анимации при удалении, например, при помощи $(domNode).fadeOut().</li>\n</ul>\n<p>Пример реализации анимации при добавлении элемента можно посмотреть <a href=\"http://knockoutjs.com/examples/animatedTransitions.html\" target=\"_blank\" rel=\"noopener nofollow\">здесь</a>.</p>\n<p>Если элементы вашего массива не объекты, а, например, строки, тогда нужно использовать ключевое слово <strong>$data</strong>, которое содержит в себе текущий элемент массива. В предыдущих примерах можно тоже использовать <strong>$data</strong>, но это усложняет восприятие слоя <em>View</em>, который должен быть максимально простым!</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"foreach: months\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n        The current item is: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">b</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: $data\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">b</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    ko.applyBindings({\n        months: [ <span class=\"hljs-string\">'Jan'</span>, <span class=\"hljs-string\">'Feb'</span>, <span class=\"hljs-string\">'Mar'</span>, <span class=\"hljs-string\">'etc'</span> ]\n    });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p><em>KnockOut</em> сильно опирается на контексты выполнения конструкций. В одном из примеров пришлось использовать переменную контекста <strong>$root</strong>, которая ссылается на ViewModel, есть также переменные <strong>$index</strong> и <strong>$parent</strong>. Первый содержит индекс текущего элемента массива, по-которому производится итерация, а последний возвращает ссылку на родительский контекст.</p>\n<p>Чтобы использовать <strong>foreach</strong>, если нет родительского блока, в который можно поместить шаблон для каждого элемента, предусмотрена следующая конструкция:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"header\"</span>&gt;</span>Header item<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- ko foreach: myItems --&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Item <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: $data\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- /ko --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    ko.applyBindings({\n        myItems: [ <span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'C'</span> ]\n    });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Комментарии <!-- ko foreach: myItems --> и <!-- /ko --> используются как начальный и конечный маркеры для <strong>foreach</strong>. Аналогичные маркеры есть и для <strong>if</strong>, <strong>ifnot</strong> и <strong>with</strong>.</p>\n<h2 id=\"konstrukcziya-if\"><a name=\"konstrukcziya-if\" class=\"h-link\" href=\"#\"></a>Конструкция if</h2>\n<p>Эта конструкция определяет нужно показывать или нет часть разметки. В отличии от байндинга <strong>visible</strong> (который скрывает элемент при помощи <em>css</em>), <strong>if</strong> полностью удаляет или добавляет все дочерние элементы относительно родительского, того к которому применен байндинг. Например</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"checked: displayMessage\"</span> /&gt;</span> Display message<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"if: displayMessage\"</span>&gt;</span>Here is a message. Astonishing.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\nko.applyBindings({\n    displayMessage: ko.observable(<span class=\"hljs-literal\">false</span>)\n})\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Пример роботы можно посмотреть <a href=\"http://knockoutjs.com/documentation/if-binding.html#example_1\" target=\"_blank\" rel=\"noopener nofollow\">здесь</a>.</p>\n<p>Конструкция <strong>ifnot</strong> полностью аналогична <strong>if</strong> и была реализовано только из эстетических соображений. Чтобы не писать</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"if: !displayMessage()\"</span>&gt;</span>Here is a message. Astonishing.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>можно писать</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"ifnot: displayMessage\"</span>&gt;</span>Here is a message. Astonishing.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<h2 id=\"konstrukcziya-with\"><a name=\"konstrukcziya-with\" class=\"h-link\" href=\"#\"></a>Конструкция with</h2>\n<p>Эта конструкция задает контекст для внутренних байндингов, по аналогии к <em>JavaScript</em> оператору <strong>with</strong></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: city\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"with: coords\"</span>&gt;</span>\n    Latitude: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: latitude\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>,\n    Longitude: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-bind</span>=<span class=\"hljs-string\">\"text: longitude\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n \n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n    ko.applyBindings({\n        city: <span class=\"hljs-string\">\"London\"</span>,\n        coords: {\n            latitude:  <span class=\"hljs-number\">51.5001524</span>,\n            longitude: <span class=\"hljs-number\">-0.1262362</span>\n        }\n    });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Если выражение переданное в <strong>with</strong> является <em>null</em> или <em>undefined</em>, то все дочерние элементы будут скрыты. Если выражение является наблюдаемым объектом, то каждый раз при его изменении <em>Knockout</em> будет делать ререндеринг, что в свою очередь приведет к удалении всех дочерних элементов из документа и вставки их новых копий.</p>\n<p><strong>По материалам</strong>: <a href=\"http://knockoutjs.com/\" target=\"_blank\" rel=\"noopener nofollow\">KnockOut</a></p>","headings":[["konstrukcziya-foreach","Конструкция foreach"],["konstrukcziya-if","Конструкция if"],["konstrukcziya-with","Конструкция with"]],"id":"upravlyayuschie-konstruktsii-v-knockout"}