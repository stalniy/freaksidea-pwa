{"title":"Учимся программировать в Shell","summary":"Наибольшая мощь компьютера - это возможность выполнять работу за Вас. Но чтобы\nон что-то делал, ему нужно объяснить что и как. Одним из лучших посредников в\nэтом деле является Shell\n","author":"sstotskyi","categories":["devops"],"createdAt":"2011-10-09T11:07:00.000Z","meta":{"keywords":["linux","Bash"]},"alias":"uchimsya-programmirovat-v-shell","content":"<p>Shell скрипты - это наборы команд, хранящиеся в файле. При запуске файла, Shell читает его и выполняет команды так, как будто они были введены при помощи клавиатуры. Кроме стандартных команд Shell имеет еще целую кучу возможностей, благодаря которым можно писать достаточно мощные скрипты при помощи нескольких строк.</p>\n<h2 id=\"napisanie-pervogo-skripta\"><a name=\"napisanie-pervogo-skripta\" class=\"h-link\" href=\"#\"></a>Написание первого скрипта</h2>\n<p>Для написания скрипта Вам нужно сделать 3 вещи:</p>\n<ul>\n<li>написать скрипт</li>\n<li>установить права на выполнение</li>\n<li>положить его туда, где Shell сможет найти его</li>\n</ul>\n<p>Shell скрипт - это обычный текстовый файл. По-этому для его написания Вам понадобится текстовый редактор. Существует целая уйма таких редакторов под Linux. Например</p>\n<ul>\n<li><strong>vi</strong> (<strong>vim</strong>) - не рекомендую использовать новичкам, иначе поначалу потратите кучу нервов и времени</li>\n<li><strong>nano</strong> - именно то что нужно новичку. Все просто, подсказки написаны в футере редактора</li>\n<li><strong>gedit</strong> - стандартный графический текстовый редактор в оболочке Gnome</li>\n<li><strong>kwrite</strong> - стандартный графический текстовый редактор для KDE</li>\n</ul>\n<p>Вы также можете использовать любой другой редактор, который Вам нравится. Я обычно использую <strong>geany</strong> или <strong>vi</strong>. Так давайте уже напишем этот первый скрипт. По традиции представляю Вам скрипт &quot;Hello World&quot; на <a href=\"http://ru.wikipedia.org/wiki/Bash\" target=\"_blank\" rel=\"noopener nofollow\">Bash</a></p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/bin/bash</span>\n<span class=\"hljs-comment\"># My first script</span>\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Hello World!\"</span>;\n</code></pre>\n<p>Сохраните этот файл под любым именем, например <strong>my_script</strong>. Теперь проанализируем, что же в нем написано.</p>\n<p>Первая строка очень важная. Она указывает, какую программу нужно использовать для интерпретации скрипта. Другие языки вроде Perl, Awk, Python, PHP также могут использовать этот механизм.</p>\n<p>Вторая строка - это просто комментарий. Все что находится за символом &quot;<strong>#</strong>&quot; игнорируется в Bash. Комментарии становятся полезными, когда Ваш скрипт будет состоять из множества строк. Обычно в комментариях описывают что делает той или иной блок кода, чтобы если вдруг кто-то посторонний посмотрит на код, то ему было понятно.</p>\n<p>Последняя строка - команда <strong>echo</strong>. Отправляет текст на стандартный вывод, другими словами просто печатает его.</p>\n<h2 id=\"3-2-1-0-zapusk\"><a name=\"3-2-1-0-zapusk\" class=\"h-link\" href=\"#\"></a>3,2,1,0 - Запуск</h2>\n<p>Для начала установим права на запуск скрипта при помощи команды <strong>chmod</strong></p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ chmod 755 my_script\n</code></pre>\n<p>755 - означает, что Вы имеете права на выполнение, чтение и запись. Все остальные могут только читать и выполнять. Если Вы хотите ограничить доступ к скрипту, то установите права 700.</p>\n<p>Запустить скрипт можно 2 способами:</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ /bin/bash my_script\n</code></pre>\n<p>или же</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ ./my_script\n</code></pre>\n<p>Мы будем использовать второй вариант поскольку права на выполнение установлены, а интерпретатор прописан в первой строчке нашего скрипта.</p>\n<p>После запуска Вы должны увидеть &quot;Hello World!&quot;. Если нет, тогда убедитесь, что Вы запускает скрипт из директории в которой он лежит.</p>\n<p>Прежде чем идти дальше, нужно узнать кое-что о путях. При вводе имени команды система ищет ее в специальных директориях. Если команда не найдена, то получим хорошо известное сообщение об ошибке: command not found.</p>\n<p>Посмотреть список директорий, в которых Shell ищет команды - просто</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$PATH</span>\n</code></pre>\n<p>Вы увидите список директорий разделенных двоеточием, в которых система будет искать команду. В нашем случае этого не происходило, потому что мы указали путь к скрипту (&quot;./&quot;);</p>\n<p>Добавить в этот список новый каталог можно при помощи следующей команды</p>\n<pre><code class=\"hljs language-bash\">enej@linux:~$ <span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$PATH</span>:directory\n</code></pre>\n<p>Где directory - путь к любому каталогу.</p>\n<p>Хорошей практикой является создание в своей домашней директории каталог <strong>bin</strong>, в который складывать все свои скрипты. Создайте ее при помощи команды <strong>mkdir</strong> и переместите в нее Ваш скрипт.</p>\n<p><strong>P.S.</strong>: если Вы добавили какую-то директорию в переменную PATH, то после выхода из системы Ваши изменения исчезнут. Чтобы изменения сохранились нужно написать эту команду в файл <strong>.bashrc</strong> или <strong>.bash_profile</strong>, который находится в домашней директории, тогда она будет выполнятся каждый раз когда Вы входите в систему.</p>\n<p>По мотивам <a href=\"http://linuxcommand.org\" target=\"_blank\" rel=\"noopener nofollow\">http://linuxcommand.org</a></p>","headings":[["napisanie-pervogo-skripta","Написание первого скрипта"],["3-2-1-0-zapusk","3,2,1,0 - Запуск"]],"id":"uchimsya-programmirovat-v-shell"}